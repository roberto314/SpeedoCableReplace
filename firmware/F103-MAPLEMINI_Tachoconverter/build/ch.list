
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	080044b1 	.word	0x080044b1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	08005de1 	.word	0x08005de1
 8000070:	08005dc1 	.word	0x08005dc1
 8000074:	08005da1 	.word	0x08005da1
 8000078:	08005d81 	.word	0x08005d81
 800007c:	08005d61 	.word	0x08005d61
 8000080:	08005d41 	.word	0x08005d41
 8000084:	08005d21 	.word	0x08005d21
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	0800023b 	.word	0x0800023b
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	08005a21 	.word	0x08005a21
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	08005a41 	.word	0x08005a41
 80000b0:	08005a01 	.word	0x08005a01
 80000b4:	08005a51 	.word	0x08005a51
 80000b8:	08005991 	.word	0x08005991
 80000bc:	08005bf1 	.word	0x08005bf1
 80000c0:	08005b11 	.word	0x08005b11
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	080057c1 	.word	0x080057c1
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f005 fe84 	bl	8005e90 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f005 fada 	bl	8005740 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f005 fe16 	bl	8005e00 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f005 fe54 	bl	8005e80 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f004 fa9a 	bl	8004720 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f005 be38 	b.w	8005e70 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	08007634 	.word	0x08007634
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000d30 	.word	0x20000d30
                ldr     r1, =__bss_base__
 8000220:	20000d30 	.word	0x20000d30
                ldr     r2, =__bss_end__
 8000224:	200013c8 	.word	0x200013c8
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d014 	str.w	sp, [r1, #20]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	6943      	ldr	r3, [r0, #20]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f004 f938 	bl	80044d0 <chThdExit>

08000260 <_zombies>:
_zombies:       b       _zombies
 8000260:	e7fe      	b.n	8000260 <_zombies>

08000262 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000262:	f004 f93d 	bl	80044e0 <chSchDoReschedule>

08000266 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <_port_exit_from_isr+0x2>
	...

0800026c <memcpy>:
 800026c:	4684      	mov	ip, r0
 800026e:	ea41 0300 	orr.w	r3, r1, r0
 8000272:	f013 0303 	ands.w	r3, r3, #3
 8000276:	d149      	bne.n	800030c <memcpy+0xa0>
 8000278:	3a40      	subs	r2, #64	; 0x40
 800027a:	d323      	bcc.n	80002c4 <memcpy+0x58>
 800027c:	680b      	ldr	r3, [r1, #0]
 800027e:	6003      	str	r3, [r0, #0]
 8000280:	684b      	ldr	r3, [r1, #4]
 8000282:	6043      	str	r3, [r0, #4]
 8000284:	688b      	ldr	r3, [r1, #8]
 8000286:	6083      	str	r3, [r0, #8]
 8000288:	68cb      	ldr	r3, [r1, #12]
 800028a:	60c3      	str	r3, [r0, #12]
 800028c:	690b      	ldr	r3, [r1, #16]
 800028e:	6103      	str	r3, [r0, #16]
 8000290:	694b      	ldr	r3, [r1, #20]
 8000292:	6143      	str	r3, [r0, #20]
 8000294:	698b      	ldr	r3, [r1, #24]
 8000296:	6183      	str	r3, [r0, #24]
 8000298:	69cb      	ldr	r3, [r1, #28]
 800029a:	61c3      	str	r3, [r0, #28]
 800029c:	6a0b      	ldr	r3, [r1, #32]
 800029e:	6203      	str	r3, [r0, #32]
 80002a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80002a2:	6243      	str	r3, [r0, #36]	; 0x24
 80002a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80002a6:	6283      	str	r3, [r0, #40]	; 0x28
 80002a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80002aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80002ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80002ae:	6303      	str	r3, [r0, #48]	; 0x30
 80002b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80002b2:	6343      	str	r3, [r0, #52]	; 0x34
 80002b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80002b6:	6383      	str	r3, [r0, #56]	; 0x38
 80002b8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80002ba:	63c3      	str	r3, [r0, #60]	; 0x3c
 80002bc:	3040      	adds	r0, #64	; 0x40
 80002be:	3140      	adds	r1, #64	; 0x40
 80002c0:	3a40      	subs	r2, #64	; 0x40
 80002c2:	d2db      	bcs.n	800027c <memcpy+0x10>
 80002c4:	3230      	adds	r2, #48	; 0x30
 80002c6:	d30b      	bcc.n	80002e0 <memcpy+0x74>
 80002c8:	680b      	ldr	r3, [r1, #0]
 80002ca:	6003      	str	r3, [r0, #0]
 80002cc:	684b      	ldr	r3, [r1, #4]
 80002ce:	6043      	str	r3, [r0, #4]
 80002d0:	688b      	ldr	r3, [r1, #8]
 80002d2:	6083      	str	r3, [r0, #8]
 80002d4:	68cb      	ldr	r3, [r1, #12]
 80002d6:	60c3      	str	r3, [r0, #12]
 80002d8:	3010      	adds	r0, #16
 80002da:	3110      	adds	r1, #16
 80002dc:	3a10      	subs	r2, #16
 80002de:	d2f3      	bcs.n	80002c8 <memcpy+0x5c>
 80002e0:	320c      	adds	r2, #12
 80002e2:	d305      	bcc.n	80002f0 <memcpy+0x84>
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	3a04      	subs	r2, #4
 80002ee:	d2f9      	bcs.n	80002e4 <memcpy+0x78>
 80002f0:	3204      	adds	r2, #4
 80002f2:	d008      	beq.n	8000306 <memcpy+0x9a>
 80002f4:	07d2      	lsls	r2, r2, #31
 80002f6:	bf1c      	itt	ne
 80002f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000300:	d301      	bcc.n	8000306 <memcpy+0x9a>
 8000302:	880b      	ldrh	r3, [r1, #0]
 8000304:	8003      	strh	r3, [r0, #0]
 8000306:	4660      	mov	r0, ip
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	2a08      	cmp	r2, #8
 800030e:	d313      	bcc.n	8000338 <memcpy+0xcc>
 8000310:	078b      	lsls	r3, r1, #30
 8000312:	d0b1      	beq.n	8000278 <memcpy+0xc>
 8000314:	f010 0303 	ands.w	r3, r0, #3
 8000318:	d0ae      	beq.n	8000278 <memcpy+0xc>
 800031a:	f1c3 0304 	rsb	r3, r3, #4
 800031e:	1ad2      	subs	r2, r2, r3
 8000320:	07db      	lsls	r3, r3, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d3a4      	bcc.n	8000278 <memcpy+0xc>
 800032e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000332:	f820 3b02 	strh.w	r3, [r0], #2
 8000336:	e79f      	b.n	8000278 <memcpy+0xc>
 8000338:	3a04      	subs	r2, #4
 800033a:	d3d9      	bcc.n	80002f0 <memcpy+0x84>
 800033c:	3a01      	subs	r2, #1
 800033e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000342:	f800 3b01 	strb.w	r3, [r0], #1
 8000346:	d2f9      	bcs.n	800033c <memcpy+0xd0>
 8000348:	780b      	ldrb	r3, [r1, #0]
 800034a:	7003      	strb	r3, [r0, #0]
 800034c:	784b      	ldrb	r3, [r1, #1]
 800034e:	7043      	strb	r3, [r0, #1]
 8000350:	788b      	ldrb	r3, [r1, #2]
 8000352:	7083      	strb	r3, [r0, #2]
 8000354:	4660      	mov	r0, ip
 8000356:	4770      	bx	lr

08000358 <strcmp>:
 8000358:	ea80 0c01 	eor.w	ip, r0, r1
 800035c:	f01c 0f03 	tst.w	ip, #3
 8000360:	d137      	bne.n	80003d2 <strcmp+0x7a>
 8000362:	f010 0c03 	ands.w	ip, r0, #3
 8000366:	f020 0003 	bic.w	r0, r0, #3
 800036a:	f021 0103 	bic.w	r1, r1, #3
 800036e:	f850 2b04 	ldr.w	r2, [r0], #4
 8000372:	bf08      	it	eq
 8000374:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000378:	d00e      	beq.n	8000398 <strcmp+0x40>
 800037a:	f08c 0c03 	eor.w	ip, ip, #3
 800037e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000382:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000386:	fa23 fc0c 	lsr.w	ip, r3, ip
 800038a:	f851 3b04 	ldr.w	r3, [r1], #4
 800038e:	ea42 020c 	orr.w	r2, r2, ip
 8000392:	ea43 030c 	orr.w	r3, r3, ip
 8000396:	bf00      	nop
 8000398:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800039c:	429a      	cmp	r2, r3
 800039e:	bf01      	itttt	eq
 80003a0:	ea2c 0c02 	biceq.w	ip, ip, r2
 80003a4:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 80003a8:	f850 2b04 	ldreq.w	r2, [r0], #4
 80003ac:	f851 3b04 	ldreq.w	r3, [r1], #4
 80003b0:	d0f2      	beq.n	8000398 <strcmp+0x40>
 80003b2:	ea4f 6002 	mov.w	r0, r2, lsl #24
 80003b6:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80003ba:	2801      	cmp	r0, #1
 80003bc:	bf28      	it	cs
 80003be:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 80003c2:	bf08      	it	eq
 80003c4:	0a1b      	lsreq	r3, r3, #8
 80003c6:	d0f4      	beq.n	80003b2 <strcmp+0x5a>
 80003c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80003cc:	0e00      	lsrs	r0, r0, #24
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4770      	bx	lr
 80003d2:	f010 0f03 	tst.w	r0, #3
 80003d6:	d00a      	beq.n	80003ee <strcmp+0x96>
 80003d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80003dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003e0:	2a01      	cmp	r2, #1
 80003e2:	bf28      	it	cs
 80003e4:	429a      	cmpcs	r2, r3
 80003e6:	d0f4      	beq.n	80003d2 <strcmp+0x7a>
 80003e8:	eba2 0003 	sub.w	r0, r2, r3
 80003ec:	4770      	bx	lr
 80003ee:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80003f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80003f6:	f001 0503 	and.w	r5, r1, #3
 80003fa:	f021 0103 	bic.w	r1, r1, #3
 80003fe:	f851 3b04 	ldr.w	r3, [r1], #4
 8000402:	2d02      	cmp	r5, #2
 8000404:	d026      	beq.n	8000454 <strcmp+0xfc>
 8000406:	d84d      	bhi.n	80004a4 <strcmp+0x14c>
 8000408:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 800040c:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8000410:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8000414:	ea2c 0c02 	bic.w	ip, ip, r2
 8000418:	d10d      	bne.n	8000436 <strcmp+0xde>
 800041a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800041e:	bf08      	it	eq
 8000420:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000424:	d10a      	bne.n	800043c <strcmp+0xe4>
 8000426:	ea85 0502 	eor.w	r5, r5, r2
 800042a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 800042e:	d10c      	bne.n	800044a <strcmp+0xf2>
 8000430:	f850 2b04 	ldr.w	r2, [r0], #4
 8000434:	e7e8      	b.n	8000408 <strcmp+0xb0>
 8000436:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800043a:	e05b      	b.n	80004f4 <strcmp+0x19c>
 800043c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8000440:	d154      	bne.n	80004ec <strcmp+0x194>
 8000442:	780b      	ldrb	r3, [r1, #0]
 8000444:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8000448:	e054      	b.n	80004f4 <strcmp+0x19c>
 800044a:	ea4f 6512 	mov.w	r5, r2, lsr #24
 800044e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000452:	e04f      	b.n	80004f4 <strcmp+0x19c>
 8000454:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8000458:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800045c:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8000460:	ea2c 0c02 	bic.w	ip, ip, r2
 8000464:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8000468:	d118      	bne.n	800049c <strcmp+0x144>
 800046a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 800046e:	bf08      	it	eq
 8000470:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000474:	d107      	bne.n	8000486 <strcmp+0x12e>
 8000476:	ea85 0502 	eor.w	r5, r5, r2
 800047a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 800047e:	d109      	bne.n	8000494 <strcmp+0x13c>
 8000480:	f850 2b04 	ldr.w	r2, [r0], #4
 8000484:	e7e6      	b.n	8000454 <strcmp+0xfc>
 8000486:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 800048a:	d12f      	bne.n	80004ec <strcmp+0x194>
 800048c:	880b      	ldrh	r3, [r1, #0]
 800048e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000492:	e02f      	b.n	80004f4 <strcmp+0x19c>
 8000494:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000498:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800049c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80004a0:	e028      	b.n	80004f4 <strcmp+0x19c>
 80004a2:	bf00      	nop
 80004a4:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 80004a8:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 80004ac:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80004b0:	ea2c 0c02 	bic.w	ip, ip, r2
 80004b4:	d10d      	bne.n	80004d2 <strcmp+0x17a>
 80004b6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80004ba:	bf08      	it	eq
 80004bc:	f851 3b04 	ldreq.w	r3, [r1], #4
 80004c0:	d10a      	bne.n	80004d8 <strcmp+0x180>
 80004c2:	ea85 0502 	eor.w	r5, r5, r2
 80004c6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 80004ca:	d10a      	bne.n	80004e2 <strcmp+0x18a>
 80004cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80004d0:	e7e8      	b.n	80004a4 <strcmp+0x14c>
 80004d2:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80004d6:	e00d      	b.n	80004f4 <strcmp+0x19c>
 80004d8:	f012 0fff 	tst.w	r2, #255	; 0xff
 80004dc:	d006      	beq.n	80004ec <strcmp+0x194>
 80004de:	f851 3b04 	ldr.w	r3, [r1], #4
 80004e2:	ea4f 2512 	mov.w	r5, r2, lsr #8
 80004e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004ea:	e003      	b.n	80004f4 <strcmp+0x19c>
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bc20      	pop	{r5}
 80004f2:	4770      	bx	lr
 80004f4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 80004f8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004fc:	2801      	cmp	r0, #1
 80004fe:	bf28      	it	cs
 8000500:	4290      	cmpcs	r0, r2
 8000502:	bf04      	itt	eq
 8000504:	0a2d      	lsreq	r5, r5, #8
 8000506:	0a1b      	lsreq	r3, r3, #8
 8000508:	d0f4      	beq.n	80004f4 <strcmp+0x19c>
 800050a:	eba2 0000 	sub.w	r0, r2, r0
 800050e:	bc20      	pop	{r5}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_dmul>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8de 	bleq	8000a68 <__aeabi_dmul+0x1dc>
 80008ac:	442c      	add	r4, r5
 80008ae:	ea81 0603 	eor.w	r6, r1, r3
 80008b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008be:	bf18      	it	ne
 80008c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008cc:	d038      	beq.n	8000940 <__aeabi_dmul+0xb4>
 80008ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80008d2:	f04f 0500 	mov.w	r5, #0
 80008d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008e2:	f04f 0600 	mov.w	r6, #0
 80008e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008ea:	f09c 0f00 	teq	ip, #0
 80008ee:	bf18      	it	ne
 80008f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000900:	d204      	bcs.n	800090c <__aeabi_dmul+0x80>
 8000902:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000906:	416d      	adcs	r5, r5
 8000908:	eb46 0606 	adc.w	r6, r6, r6
 800090c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000910:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000914:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000918:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800091c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000920:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000924:	bf88      	it	hi
 8000926:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092a:	d81e      	bhi.n	800096a <__aeabi_dmul+0xde>
 800092c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000930:	bf08      	it	eq
 8000932:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000944:	ea46 0101 	orr.w	r1, r6, r1
 8000948:	ea40 0002 	orr.w	r0, r0, r2
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	f300 80ab 	bgt.w	8000ac4 <__aeabi_dmul+0x238>
 800096e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000972:	bfde      	ittt	le
 8000974:	2000      	movle	r0, #0
 8000976:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800097a:	bd70      	pople	{r4, r5, r6, pc}
 800097c:	f1c4 0400 	rsb	r4, r4, #0
 8000980:	3c20      	subs	r4, #32
 8000982:	da35      	bge.n	80009f0 <__aeabi_dmul+0x164>
 8000984:	340c      	adds	r4, #12
 8000986:	dc1b      	bgt.n	80009c0 <__aeabi_dmul+0x134>
 8000988:	f104 0414 	add.w	r4, r4, #20
 800098c:	f1c4 0520 	rsb	r5, r4, #32
 8000990:	fa00 f305 	lsl.w	r3, r0, r5
 8000994:	fa20 f004 	lsr.w	r0, r0, r4
 8000998:	fa01 f205 	lsl.w	r2, r1, r5
 800099c:	ea40 0002 	orr.w	r0, r0, r2
 80009a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009ac:	fa21 f604 	lsr.w	r6, r1, r4
 80009b0:	eb42 0106 	adc.w	r1, r2, r6
 80009b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b8:	bf08      	it	eq
 80009ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f1c4 040c 	rsb	r4, r4, #12
 80009c4:	f1c4 0520 	rsb	r5, r4, #32
 80009c8:	fa00 f304 	lsl.w	r3, r0, r4
 80009cc:	fa20 f005 	lsr.w	r0, r0, r5
 80009d0:	fa01 f204 	lsl.w	r2, r1, r4
 80009d4:	ea40 0002 	orr.w	r0, r0, r2
 80009d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009e0:	f141 0100 	adc.w	r1, r1, #0
 80009e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e8:	bf08      	it	eq
 80009ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f1c4 0520 	rsb	r5, r4, #32
 80009f4:	fa00 f205 	lsl.w	r2, r0, r5
 80009f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000a00:	fa01 f205 	lsl.w	r2, r1, r5
 8000a04:	ea43 0302 	orr.w	r3, r3, r2
 8000a08:	fa21 f004 	lsr.w	r0, r1, r4
 8000a0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a10:	fa21 f204 	lsr.w	r2, r1, r4
 8000a14:	ea20 0002 	bic.w	r0, r0, r2
 8000a18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a20:	bf08      	it	eq
 8000a22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f094 0f00 	teq	r4, #0
 8000a2c:	d10f      	bne.n	8000a4e <__aeabi_dmul+0x1c2>
 8000a2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a32:	0040      	lsls	r0, r0, #1
 8000a34:	eb41 0101 	adc.w	r1, r1, r1
 8000a38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a3c:	bf08      	it	eq
 8000a3e:	3c01      	subeq	r4, #1
 8000a40:	d0f7      	beq.n	8000a32 <__aeabi_dmul+0x1a6>
 8000a42:	ea41 0106 	orr.w	r1, r1, r6
 8000a46:	f095 0f00 	teq	r5, #0
 8000a4a:	bf18      	it	ne
 8000a4c:	4770      	bxne	lr
 8000a4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a52:	0052      	lsls	r2, r2, #1
 8000a54:	eb43 0303 	adc.w	r3, r3, r3
 8000a58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a5c:	bf08      	it	eq
 8000a5e:	3d01      	subeq	r5, #1
 8000a60:	d0f7      	beq.n	8000a52 <__aeabi_dmul+0x1c6>
 8000a62:	ea43 0306 	orr.w	r3, r3, r6
 8000a66:	4770      	bx	lr
 8000a68:	ea94 0f0c 	teq	r4, ip
 8000a6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a70:	bf18      	it	ne
 8000a72:	ea95 0f0c 	teqne	r5, ip
 8000a76:	d00c      	beq.n	8000a92 <__aeabi_dmul+0x206>
 8000a78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a7c:	bf18      	it	ne
 8000a7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a82:	d1d1      	bne.n	8000a28 <__aeabi_dmul+0x19c>
 8000a84:	ea81 0103 	eor.w	r1, r1, r3
 8000a88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a96:	bf06      	itte	eq
 8000a98:	4610      	moveq	r0, r2
 8000a9a:	4619      	moveq	r1, r3
 8000a9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa0:	d019      	beq.n	8000ad6 <__aeabi_dmul+0x24a>
 8000aa2:	ea94 0f0c 	teq	r4, ip
 8000aa6:	d102      	bne.n	8000aae <__aeabi_dmul+0x222>
 8000aa8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000aac:	d113      	bne.n	8000ad6 <__aeabi_dmul+0x24a>
 8000aae:	ea95 0f0c 	teq	r5, ip
 8000ab2:	d105      	bne.n	8000ac0 <__aeabi_dmul+0x234>
 8000ab4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ab8:	bf1c      	itt	ne
 8000aba:	4610      	movne	r0, r2
 8000abc:	4619      	movne	r1, r3
 8000abe:	d10a      	bne.n	8000ad6 <__aeabi_dmul+0x24a>
 8000ac0:	ea81 0103 	eor.w	r1, r1, r3
 8000ac4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ac8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000acc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ada:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ade:	bd70      	pop	{r4, r5, r6, pc}

08000ae0 <__aeabi_ddiv>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000aea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aee:	bf1d      	ittte	ne
 8000af0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000af4:	ea94 0f0c 	teqne	r4, ip
 8000af8:	ea95 0f0c 	teqne	r5, ip
 8000afc:	f000 f8a7 	bleq	8000c4e <__aeabi_ddiv+0x16e>
 8000b00:	eba4 0405 	sub.w	r4, r4, r5
 8000b04:	ea81 0e03 	eor.w	lr, r1, r3
 8000b08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b10:	f000 8088 	beq.w	8000c24 <__aeabi_ddiv+0x144>
 8000b14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b24:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b30:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b38:	429d      	cmp	r5, r3
 8000b3a:	bf08      	it	eq
 8000b3c:	4296      	cmpeq	r6, r2
 8000b3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b42:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b46:	d202      	bcs.n	8000b4e <__aeabi_ddiv+0x6e>
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4e:	1ab6      	subs	r6, r6, r2
 8000b50:	eb65 0503 	sbc.w	r5, r5, r3
 8000b54:	085b      	lsrs	r3, r3, #1
 8000b56:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b62:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6a:	bf22      	ittt	cs
 8000b6c:	1ab6      	subcs	r6, r6, r2
 8000b6e:	4675      	movcs	r5, lr
 8000b70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b82:	bf22      	ittt	cs
 8000b84:	1ab6      	subcs	r6, r6, r2
 8000b86:	4675      	movcs	r5, lr
 8000b88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b8c:	085b      	lsrs	r3, r3, #1
 8000b8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b92:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b9a:	bf22      	ittt	cs
 8000b9c:	1ab6      	subcs	r6, r6, r2
 8000b9e:	4675      	movcs	r5, lr
 8000ba0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ba4:	085b      	lsrs	r3, r3, #1
 8000ba6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000baa:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bb2:	bf22      	ittt	cs
 8000bb4:	1ab6      	subcs	r6, r6, r2
 8000bb6:	4675      	movcs	r5, lr
 8000bb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bbc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bc0:	d018      	beq.n	8000bf4 <__aeabi_ddiv+0x114>
 8000bc2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bc6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bd2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bd6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bde:	d1c0      	bne.n	8000b62 <__aeabi_ddiv+0x82>
 8000be0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be4:	d10b      	bne.n	8000bfe <__aeabi_ddiv+0x11e>
 8000be6:	ea41 0100 	orr.w	r1, r1, r0
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bf2:	e7b6      	b.n	8000b62 <__aeabi_ddiv+0x82>
 8000bf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bf8:	bf04      	itt	eq
 8000bfa:	4301      	orreq	r1, r0
 8000bfc:	2000      	moveq	r0, #0
 8000bfe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c02:	bf88      	it	hi
 8000c04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c08:	f63f aeaf 	bhi.w	800096a <__aeabi_dmul+0xde>
 8000c0c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c10:	bf04      	itt	eq
 8000c12:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c1a:	f150 0000 	adcs.w	r0, r0, #0
 8000c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c30:	bfc2      	ittt	gt
 8000c32:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c3a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c40:	f04f 0e00 	mov.w	lr, #0
 8000c44:	3c01      	subs	r4, #1
 8000c46:	e690      	b.n	800096a <__aeabi_dmul+0xde>
 8000c48:	ea45 0e06 	orr.w	lr, r5, r6
 8000c4c:	e68d      	b.n	800096a <__aeabi_dmul+0xde>
 8000c4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c52:	ea94 0f0c 	teq	r4, ip
 8000c56:	bf08      	it	eq
 8000c58:	ea95 0f0c 	teqeq	r5, ip
 8000c5c:	f43f af3b 	beq.w	8000ad6 <__aeabi_dmul+0x24a>
 8000c60:	ea94 0f0c 	teq	r4, ip
 8000c64:	d10a      	bne.n	8000c7c <__aeabi_ddiv+0x19c>
 8000c66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c6a:	f47f af34 	bne.w	8000ad6 <__aeabi_dmul+0x24a>
 8000c6e:	ea95 0f0c 	teq	r5, ip
 8000c72:	f47f af25 	bne.w	8000ac0 <__aeabi_dmul+0x234>
 8000c76:	4610      	mov	r0, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	e72c      	b.n	8000ad6 <__aeabi_dmul+0x24a>
 8000c7c:	ea95 0f0c 	teq	r5, ip
 8000c80:	d106      	bne.n	8000c90 <__aeabi_ddiv+0x1b0>
 8000c82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c86:	f43f aefd 	beq.w	8000a84 <__aeabi_dmul+0x1f8>
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	e722      	b.n	8000ad6 <__aeabi_dmul+0x24a>
 8000c90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c94:	bf18      	it	ne
 8000c96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c9a:	f47f aec5 	bne.w	8000a28 <__aeabi_dmul+0x19c>
 8000c9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ca2:	f47f af0d 	bne.w	8000ac0 <__aeabi_dmul+0x234>
 8000ca6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000caa:	f47f aeeb 	bne.w	8000a84 <__aeabi_dmul+0x1f8>
 8000cae:	e712      	b.n	8000ad6 <__aeabi_dmul+0x24a>

08000cb0 <__aeabi_d2uiz>:
 8000cb0:	004a      	lsls	r2, r1, #1
 8000cb2:	d211      	bcs.n	8000cd8 <__aeabi_d2uiz+0x28>
 8000cb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb8:	d211      	bcs.n	8000cde <__aeabi_d2uiz+0x2e>
 8000cba:	d50d      	bpl.n	8000cd8 <__aeabi_d2uiz+0x28>
 8000cbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cc4:	d40e      	bmi.n	8000ce4 <__aeabi_d2uiz+0x34>
 8000cc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd6:	4770      	bx	lr
 8000cd8:	f04f 0000 	mov.w	r0, #0
 8000cdc:	4770      	bx	lr
 8000cde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ce2:	d102      	bne.n	8000cea <__aeabi_d2uiz+0x3a>
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce8:	4770      	bx	lr
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_d2f>:
 8000cf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cf8:	bf24      	itt	cs
 8000cfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d02:	d90d      	bls.n	8000d20 <__aeabi_d2f+0x30>
 8000d04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d24:	d121      	bne.n	8000d6a <__aeabi_d2f+0x7a>
 8000d26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d2a:	bfbc      	itt	lt
 8000d2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d30:	4770      	bxlt	lr
 8000d32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d3a:	f1c2 0218 	rsb	r2, r2, #24
 8000d3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d46:	fa20 f002 	lsr.w	r0, r0, r2
 8000d4a:	bf18      	it	ne
 8000d4c:	f040 0001 	orrne.w	r0, r0, #1
 8000d50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d5c:	ea40 000c 	orr.w	r0, r0, ip
 8000d60:	fa23 f302 	lsr.w	r3, r3, r2
 8000d64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d68:	e7cc      	b.n	8000d04 <__aeabi_d2f+0x14>
 8000d6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d6e:	d107      	bne.n	8000d80 <__aeabi_d2f+0x90>
 8000d70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d74:	bf1e      	ittt	ne
 8000d76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bxne	lr
 8000d80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <__aeabi_frsub>:
 8000d90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d94:	e002      	b.n	8000d9c <__addsf3>
 8000d96:	bf00      	nop

08000d98 <__aeabi_fsub>:
 8000d98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d9c <__addsf3>:
 8000d9c:	0042      	lsls	r2, r0, #1
 8000d9e:	bf1f      	itttt	ne
 8000da0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000da4:	ea92 0f03 	teqne	r2, r3
 8000da8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db0:	d06a      	beq.n	8000e88 <__addsf3+0xec>
 8000db2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000db6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dba:	bfc1      	itttt	gt
 8000dbc:	18d2      	addgt	r2, r2, r3
 8000dbe:	4041      	eorgt	r1, r0
 8000dc0:	4048      	eorgt	r0, r1
 8000dc2:	4041      	eorgt	r1, r0
 8000dc4:	bfb8      	it	lt
 8000dc6:	425b      	neglt	r3, r3
 8000dc8:	2b19      	cmp	r3, #25
 8000dca:	bf88      	it	hi
 8000dcc:	4770      	bxhi	lr
 8000dce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000dda:	bf18      	it	ne
 8000ddc:	4240      	negne	r0, r0
 8000dde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000de2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000de6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000dea:	bf18      	it	ne
 8000dec:	4249      	negne	r1, r1
 8000dee:	ea92 0f03 	teq	r2, r3
 8000df2:	d03f      	beq.n	8000e74 <__addsf3+0xd8>
 8000df4:	f1a2 0201 	sub.w	r2, r2, #1
 8000df8:	fa41 fc03 	asr.w	ip, r1, r3
 8000dfc:	eb10 000c 	adds.w	r0, r0, ip
 8000e00:	f1c3 0320 	rsb	r3, r3, #32
 8000e04:	fa01 f103 	lsl.w	r1, r1, r3
 8000e08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	d502      	bpl.n	8000e14 <__addsf3+0x78>
 8000e0e:	4249      	negs	r1, r1
 8000e10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e18:	d313      	bcc.n	8000e42 <__addsf3+0xa6>
 8000e1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e1e:	d306      	bcc.n	8000e2e <__addsf3+0x92>
 8000e20:	0840      	lsrs	r0, r0, #1
 8000e22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e26:	f102 0201 	add.w	r2, r2, #1
 8000e2a:	2afe      	cmp	r2, #254	; 0xfe
 8000e2c:	d251      	bcs.n	8000ed2 <__addsf3+0x136>
 8000e2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e36:	bf08      	it	eq
 8000e38:	f020 0001 	biceq.w	r0, r0, #1
 8000e3c:	ea40 0003 	orr.w	r0, r0, r3
 8000e40:	4770      	bx	lr
 8000e42:	0049      	lsls	r1, r1, #1
 8000e44:	eb40 0000 	adc.w	r0, r0, r0
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	bf28      	it	cs
 8000e4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e50:	d2ed      	bcs.n	8000e2e <__addsf3+0x92>
 8000e52:	fab0 fc80 	clz	ip, r0
 8000e56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000e5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e62:	bfaa      	itet	ge
 8000e64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e68:	4252      	neglt	r2, r2
 8000e6a:	4318      	orrge	r0, r3
 8000e6c:	bfbc      	itt	lt
 8000e6e:	40d0      	lsrlt	r0, r2
 8000e70:	4318      	orrlt	r0, r3
 8000e72:	4770      	bx	lr
 8000e74:	f092 0f00 	teq	r2, #0
 8000e78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e7c:	bf06      	itte	eq
 8000e7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e82:	3201      	addeq	r2, #1
 8000e84:	3b01      	subne	r3, #1
 8000e86:	e7b5      	b.n	8000df4 <__addsf3+0x58>
 8000e88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e90:	bf18      	it	ne
 8000e92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e96:	d021      	beq.n	8000edc <__addsf3+0x140>
 8000e98:	ea92 0f03 	teq	r2, r3
 8000e9c:	d004      	beq.n	8000ea8 <__addsf3+0x10c>
 8000e9e:	f092 0f00 	teq	r2, #0
 8000ea2:	bf08      	it	eq
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea90 0f01 	teq	r0, r1
 8000eac:	bf1c      	itt	ne
 8000eae:	2000      	movne	r0, #0
 8000eb0:	4770      	bxne	lr
 8000eb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000eb6:	d104      	bne.n	8000ec2 <__addsf3+0x126>
 8000eb8:	0040      	lsls	r0, r0, #1
 8000eba:	bf28      	it	cs
 8000ebc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ec6:	bf3c      	itt	cc
 8000ec8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ecc:	4770      	bxcc	lr
 8000ece:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ed2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ed6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eda:	4770      	bx	lr
 8000edc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ee0:	bf16      	itet	ne
 8000ee2:	4608      	movne	r0, r1
 8000ee4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ee8:	4601      	movne	r1, r0
 8000eea:	0242      	lsls	r2, r0, #9
 8000eec:	bf06      	itte	eq
 8000eee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ef2:	ea90 0f01 	teqeq	r0, r1
 8000ef6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000efa:	4770      	bx	lr

08000efc <__aeabi_ui2f>:
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	e004      	b.n	8000f0c <__aeabi_i2f+0x8>
 8000f02:	bf00      	nop

08000f04 <__aeabi_i2f>:
 8000f04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f08:	bf48      	it	mi
 8000f0a:	4240      	negmi	r0, r0
 8000f0c:	ea5f 0c00 	movs.w	ip, r0
 8000f10:	bf08      	it	eq
 8000f12:	4770      	bxeq	lr
 8000f14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f18:	4601      	mov	r1, r0
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	e01c      	b.n	8000f5a <__aeabi_l2f+0x2a>

08000f20 <__aeabi_ul2f>:
 8000f20:	ea50 0201 	orrs.w	r2, r0, r1
 8000f24:	bf08      	it	eq
 8000f26:	4770      	bxeq	lr
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e00a      	b.n	8000f44 <__aeabi_l2f+0x14>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_l2f>:
 8000f30:	ea50 0201 	orrs.w	r2, r0, r1
 8000f34:	bf08      	it	eq
 8000f36:	4770      	bxeq	lr
 8000f38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	d502      	bpl.n	8000f44 <__aeabi_l2f+0x14>
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	ea5f 0c01 	movs.w	ip, r1
 8000f48:	bf02      	ittt	eq
 8000f4a:	4684      	moveq	ip, r0
 8000f4c:	4601      	moveq	r1, r0
 8000f4e:	2000      	moveq	r0, #0
 8000f50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f54:	bf08      	it	eq
 8000f56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f5e:	fabc f28c 	clz	r2, ip
 8000f62:	3a08      	subs	r2, #8
 8000f64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f68:	db10      	blt.n	8000f8c <__aeabi_l2f+0x5c>
 8000f6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f6e:	4463      	add	r3, ip
 8000f70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f74:	f1c2 0220 	rsb	r2, r2, #32
 8000f78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f80:	eb43 0002 	adc.w	r0, r3, r2
 8000f84:	bf08      	it	eq
 8000f86:	f020 0001 	biceq.w	r0, r0, #1
 8000f8a:	4770      	bx	lr
 8000f8c:	f102 0220 	add.w	r2, r2, #32
 8000f90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f94:	f1c2 0220 	rsb	r2, r2, #32
 8000f98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000fa0:	eb43 0002 	adc.w	r0, r3, r2
 8000fa4:	bf08      	it	eq
 8000fa6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000faa:	4770      	bx	lr

08000fac <__aeabi_fmul>:
 8000fac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fb4:	bf1e      	ittt	ne
 8000fb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fba:	ea92 0f0c 	teqne	r2, ip
 8000fbe:	ea93 0f0c 	teqne	r3, ip
 8000fc2:	d06f      	beq.n	80010a4 <__aeabi_fmul+0xf8>
 8000fc4:	441a      	add	r2, r3
 8000fc6:	ea80 0c01 	eor.w	ip, r0, r1
 8000fca:	0240      	lsls	r0, r0, #9
 8000fcc:	bf18      	it	ne
 8000fce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000fd2:	d01e      	beq.n	8001012 <__aeabi_fmul+0x66>
 8000fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fd8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000fdc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000fe0:	fba0 3101 	umull	r3, r1, r0, r1
 8000fe4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fe8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000fec:	bf3e      	ittt	cc
 8000fee:	0049      	lslcc	r1, r1, #1
 8000ff0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ff4:	005b      	lslcc	r3, r3, #1
 8000ff6:	ea40 0001 	orr.w	r0, r0, r1
 8000ffa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ffe:	2afd      	cmp	r2, #253	; 0xfd
 8001000:	d81d      	bhi.n	800103e <__aeabi_fmul+0x92>
 8001002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001006:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100a:	bf08      	it	eq
 800100c:	f020 0001 	biceq.w	r0, r0, #1
 8001010:	4770      	bx	lr
 8001012:	f090 0f00 	teq	r0, #0
 8001016:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800101a:	bf08      	it	eq
 800101c:	0249      	lsleq	r1, r1, #9
 800101e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001022:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8001026:	3a7f      	subs	r2, #127	; 0x7f
 8001028:	bfc2      	ittt	gt
 800102a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001032:	4770      	bxgt	lr
 8001034:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	3a01      	subs	r2, #1
 800103e:	dc5d      	bgt.n	80010fc <__aeabi_fmul+0x150>
 8001040:	f112 0f19 	cmn.w	r2, #25
 8001044:	bfdc      	itt	le
 8001046:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800104a:	4770      	bxle	lr
 800104c:	f1c2 0200 	rsb	r2, r2, #0
 8001050:	0041      	lsls	r1, r0, #1
 8001052:	fa21 f102 	lsr.w	r1, r1, r2
 8001056:	f1c2 0220 	rsb	r2, r2, #32
 800105a:	fa00 fc02 	lsl.w	ip, r0, r2
 800105e:	ea5f 0031 	movs.w	r0, r1, rrx
 8001062:	f140 0000 	adc.w	r0, r0, #0
 8001066:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800106a:	bf08      	it	eq
 800106c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001070:	4770      	bx	lr
 8001072:	f092 0f00 	teq	r2, #0
 8001076:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107a:	bf02      	ittt	eq
 800107c:	0040      	lsleq	r0, r0, #1
 800107e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001082:	3a01      	subeq	r2, #1
 8001084:	d0f9      	beq.n	800107a <__aeabi_fmul+0xce>
 8001086:	ea40 000c 	orr.w	r0, r0, ip
 800108a:	f093 0f00 	teq	r3, #0
 800108e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001092:	bf02      	ittt	eq
 8001094:	0049      	lsleq	r1, r1, #1
 8001096:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109a:	3b01      	subeq	r3, #1
 800109c:	d0f9      	beq.n	8001092 <__aeabi_fmul+0xe6>
 800109e:	ea41 010c 	orr.w	r1, r1, ip
 80010a2:	e78f      	b.n	8000fc4 <__aeabi_fmul+0x18>
 80010a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010a8:	ea92 0f0c 	teq	r2, ip
 80010ac:	bf18      	it	ne
 80010ae:	ea93 0f0c 	teqne	r3, ip
 80010b2:	d00a      	beq.n	80010ca <__aeabi_fmul+0x11e>
 80010b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010b8:	bf18      	it	ne
 80010ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010be:	d1d8      	bne.n	8001072 <__aeabi_fmul+0xc6>
 80010c0:	ea80 0001 	eor.w	r0, r0, r1
 80010c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80010c8:	4770      	bx	lr
 80010ca:	f090 0f00 	teq	r0, #0
 80010ce:	bf17      	itett	ne
 80010d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80010d4:	4608      	moveq	r0, r1
 80010d6:	f091 0f00 	teqne	r1, #0
 80010da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80010de:	d014      	beq.n	800110a <__aeabi_fmul+0x15e>
 80010e0:	ea92 0f0c 	teq	r2, ip
 80010e4:	d101      	bne.n	80010ea <__aeabi_fmul+0x13e>
 80010e6:	0242      	lsls	r2, r0, #9
 80010e8:	d10f      	bne.n	800110a <__aeabi_fmul+0x15e>
 80010ea:	ea93 0f0c 	teq	r3, ip
 80010ee:	d103      	bne.n	80010f8 <__aeabi_fmul+0x14c>
 80010f0:	024b      	lsls	r3, r1, #9
 80010f2:	bf18      	it	ne
 80010f4:	4608      	movne	r0, r1
 80010f6:	d108      	bne.n	800110a <__aeabi_fmul+0x15e>
 80010f8:	ea80 0001 	eor.w	r0, r0, r1
 80010fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001100:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001104:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001108:	4770      	bx	lr
 800110a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800110e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001112:	4770      	bx	lr

08001114 <__aeabi_fdiv>:
 8001114:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001118:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800111c:	bf1e      	ittt	ne
 800111e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001122:	ea92 0f0c 	teqne	r2, ip
 8001126:	ea93 0f0c 	teqne	r3, ip
 800112a:	d069      	beq.n	8001200 <__aeabi_fdiv+0xec>
 800112c:	eba2 0203 	sub.w	r2, r2, r3
 8001130:	ea80 0c01 	eor.w	ip, r0, r1
 8001134:	0249      	lsls	r1, r1, #9
 8001136:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800113a:	d037      	beq.n	80011ac <__aeabi_fdiv+0x98>
 800113c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001140:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001144:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001148:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800114c:	428b      	cmp	r3, r1
 800114e:	bf38      	it	cc
 8001150:	005b      	lslcc	r3, r3, #1
 8001152:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001156:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800115a:	428b      	cmp	r3, r1
 800115c:	bf24      	itt	cs
 800115e:	1a5b      	subcs	r3, r3, r1
 8001160:	ea40 000c 	orrcs.w	r0, r0, ip
 8001164:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001168:	bf24      	itt	cs
 800116a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800116e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001172:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001176:	bf24      	itt	cs
 8001178:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800117c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001180:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001184:	bf24      	itt	cs
 8001186:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800118a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	bf18      	it	ne
 8001192:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001196:	d1e0      	bne.n	800115a <__aeabi_fdiv+0x46>
 8001198:	2afd      	cmp	r2, #253	; 0xfd
 800119a:	f63f af50 	bhi.w	800103e <__aeabi_fmul+0x92>
 800119e:	428b      	cmp	r3, r1
 80011a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011a4:	bf08      	it	eq
 80011a6:	f020 0001 	biceq.w	r0, r0, #1
 80011aa:	4770      	bx	lr
 80011ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80011b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80011b4:	327f      	adds	r2, #127	; 0x7f
 80011b6:	bfc2      	ittt	gt
 80011b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80011bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80011c0:	4770      	bxgt	lr
 80011c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	3a01      	subs	r2, #1
 80011cc:	e737      	b.n	800103e <__aeabi_fmul+0x92>
 80011ce:	f092 0f00 	teq	r2, #0
 80011d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80011d6:	bf02      	ittt	eq
 80011d8:	0040      	lsleq	r0, r0, #1
 80011da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80011de:	3a01      	subeq	r2, #1
 80011e0:	d0f9      	beq.n	80011d6 <__aeabi_fdiv+0xc2>
 80011e2:	ea40 000c 	orr.w	r0, r0, ip
 80011e6:	f093 0f00 	teq	r3, #0
 80011ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80011ee:	bf02      	ittt	eq
 80011f0:	0049      	lsleq	r1, r1, #1
 80011f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80011f6:	3b01      	subeq	r3, #1
 80011f8:	d0f9      	beq.n	80011ee <__aeabi_fdiv+0xda>
 80011fa:	ea41 010c 	orr.w	r1, r1, ip
 80011fe:	e795      	b.n	800112c <__aeabi_fdiv+0x18>
 8001200:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001204:	ea92 0f0c 	teq	r2, ip
 8001208:	d108      	bne.n	800121c <__aeabi_fdiv+0x108>
 800120a:	0242      	lsls	r2, r0, #9
 800120c:	f47f af7d 	bne.w	800110a <__aeabi_fmul+0x15e>
 8001210:	ea93 0f0c 	teq	r3, ip
 8001214:	f47f af70 	bne.w	80010f8 <__aeabi_fmul+0x14c>
 8001218:	4608      	mov	r0, r1
 800121a:	e776      	b.n	800110a <__aeabi_fmul+0x15e>
 800121c:	ea93 0f0c 	teq	r3, ip
 8001220:	d104      	bne.n	800122c <__aeabi_fdiv+0x118>
 8001222:	024b      	lsls	r3, r1, #9
 8001224:	f43f af4c 	beq.w	80010c0 <__aeabi_fmul+0x114>
 8001228:	4608      	mov	r0, r1
 800122a:	e76e      	b.n	800110a <__aeabi_fmul+0x15e>
 800122c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001230:	bf18      	it	ne
 8001232:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001236:	d1ca      	bne.n	80011ce <__aeabi_fdiv+0xba>
 8001238:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800123c:	f47f af5c 	bne.w	80010f8 <__aeabi_fmul+0x14c>
 8001240:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001244:	f47f af3c 	bne.w	80010c0 <__aeabi_fmul+0x114>
 8001248:	e75f      	b.n	800110a <__aeabi_fmul+0x15e>
 800124a:	bf00      	nop

0800124c <__gesf2>:
 800124c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001250:	e006      	b.n	8001260 <__cmpsf2+0x4>
 8001252:	bf00      	nop

08001254 <__lesf2>:
 8001254:	f04f 0c01 	mov.w	ip, #1
 8001258:	e002      	b.n	8001260 <__cmpsf2+0x4>
 800125a:	bf00      	nop

0800125c <__cmpsf2>:
 800125c:	f04f 0c01 	mov.w	ip, #1
 8001260:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001264:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800126c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001270:	bf18      	it	ne
 8001272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001276:	d011      	beq.n	800129c <__cmpsf2+0x40>
 8001278:	b001      	add	sp, #4
 800127a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800127e:	bf18      	it	ne
 8001280:	ea90 0f01 	teqne	r0, r1
 8001284:	bf58      	it	pl
 8001286:	ebb2 0003 	subspl.w	r0, r2, r3
 800128a:	bf88      	it	hi
 800128c:	17c8      	asrhi	r0, r1, #31
 800128e:	bf38      	it	cc
 8001290:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001294:	bf18      	it	ne
 8001296:	f040 0001 	orrne.w	r0, r0, #1
 800129a:	4770      	bx	lr
 800129c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80012a0:	d102      	bne.n	80012a8 <__cmpsf2+0x4c>
 80012a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80012a6:	d105      	bne.n	80012b4 <__cmpsf2+0x58>
 80012a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80012ac:	d1e4      	bne.n	8001278 <__cmpsf2+0x1c>
 80012ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80012b2:	d0e1      	beq.n	8001278 <__cmpsf2+0x1c>
 80012b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <__aeabi_cfrcmple>:
 80012bc:	4684      	mov	ip, r0
 80012be:	4608      	mov	r0, r1
 80012c0:	4661      	mov	r1, ip
 80012c2:	e7ff      	b.n	80012c4 <__aeabi_cfcmpeq>

080012c4 <__aeabi_cfcmpeq>:
 80012c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80012c6:	f7ff ffc9 	bl	800125c <__cmpsf2>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	bf48      	it	mi
 80012ce:	f110 0f00 	cmnmi.w	r0, #0
 80012d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080012d4 <__aeabi_fcmpeq>:
 80012d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80012d8:	f7ff fff4 	bl	80012c4 <__aeabi_cfcmpeq>
 80012dc:	bf0c      	ite	eq
 80012de:	2001      	moveq	r0, #1
 80012e0:	2000      	movne	r0, #0
 80012e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80012e6:	bf00      	nop

080012e8 <__aeabi_fcmplt>:
 80012e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80012ec:	f7ff ffea 	bl	80012c4 <__aeabi_cfcmpeq>
 80012f0:	bf34      	ite	cc
 80012f2:	2001      	movcc	r0, #1
 80012f4:	2000      	movcs	r0, #0
 80012f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80012fa:	bf00      	nop

080012fc <__aeabi_fcmple>:
 80012fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001300:	f7ff ffe0 	bl	80012c4 <__aeabi_cfcmpeq>
 8001304:	bf94      	ite	ls
 8001306:	2001      	movls	r0, #1
 8001308:	2000      	movhi	r0, #0
 800130a:	f85d fb08 	ldr.w	pc, [sp], #8
 800130e:	bf00      	nop

08001310 <__aeabi_fcmpge>:
 8001310:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001314:	f7ff ffd2 	bl	80012bc <__aeabi_cfrcmple>
 8001318:	bf94      	ite	ls
 800131a:	2001      	movls	r0, #1
 800131c:	2000      	movhi	r0, #0
 800131e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001322:	bf00      	nop

08001324 <__aeabi_fcmpgt>:
 8001324:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001328:	f7ff ffc8 	bl	80012bc <__aeabi_cfrcmple>
 800132c:	bf34      	ite	cc
 800132e:	2001      	movcc	r0, #1
 8001330:	2000      	movcs	r0, #0
 8001332:	f85d fb08 	ldr.w	pc, [sp], #8
 8001336:	bf00      	nop

08001338 <__aeabi_f2uiz>:
 8001338:	0042      	lsls	r2, r0, #1
 800133a:	d20e      	bcs.n	800135a <__aeabi_f2uiz+0x22>
 800133c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001340:	d30b      	bcc.n	800135a <__aeabi_f2uiz+0x22>
 8001342:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001346:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800134a:	d409      	bmi.n	8001360 <__aeabi_f2uiz+0x28>
 800134c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001354:	fa23 f002 	lsr.w	r0, r3, r2
 8001358:	4770      	bx	lr
 800135a:	f04f 0000 	mov.w	r0, #0
 800135e:	4770      	bx	lr
 8001360:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001364:	d101      	bne.n	800136a <__aeabi_f2uiz+0x32>
 8001366:	0242      	lsls	r2, r0, #9
 8001368:	d102      	bne.n	8001370 <__aeabi_f2uiz+0x38>
 800136a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136e:	4770      	bx	lr
 8001370:	f04f 0000 	mov.w	r0, #0
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop

08001378 <__aeabi_uldivmod>:
 8001378:	b953      	cbnz	r3, 8001390 <__aeabi_uldivmod+0x18>
 800137a:	b94a      	cbnz	r2, 8001390 <__aeabi_uldivmod+0x18>
 800137c:	2900      	cmp	r1, #0
 800137e:	bf08      	it	eq
 8001380:	2800      	cmpeq	r0, #0
 8001382:	bf1c      	itt	ne
 8001384:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001388:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800138c:	f000 b96e 	b.w	800166c <__aeabi_idiv0>
 8001390:	f1ad 0c08 	sub.w	ip, sp, #8
 8001394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001398:	f000 f806 	bl	80013a8 <__udivmoddi4>
 800139c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80013a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013a4:	b004      	add	sp, #16
 80013a6:	4770      	bx	lr

080013a8 <__udivmoddi4>:
 80013a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013ac:	9e08      	ldr	r6, [sp, #32]
 80013ae:	460d      	mov	r5, r1
 80013b0:	4604      	mov	r4, r0
 80013b2:	468e      	mov	lr, r1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 8083 	bne.w	80014c0 <__udivmoddi4+0x118>
 80013ba:	428a      	cmp	r2, r1
 80013bc:	4617      	mov	r7, r2
 80013be:	d947      	bls.n	8001450 <__udivmoddi4+0xa8>
 80013c0:	fab2 f382 	clz	r3, r2
 80013c4:	b14b      	cbz	r3, 80013da <__udivmoddi4+0x32>
 80013c6:	f1c3 0120 	rsb	r1, r3, #32
 80013ca:	fa05 fe03 	lsl.w	lr, r5, r3
 80013ce:	fa20 f101 	lsr.w	r1, r0, r1
 80013d2:	409f      	lsls	r7, r3
 80013d4:	ea41 0e0e 	orr.w	lr, r1, lr
 80013d8:	409c      	lsls	r4, r3
 80013da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80013de:	fbbe fcf8 	udiv	ip, lr, r8
 80013e2:	fa1f f987 	uxth.w	r9, r7
 80013e6:	fb08 e21c 	mls	r2, r8, ip, lr
 80013ea:	fb0c f009 	mul.w	r0, ip, r9
 80013ee:	0c21      	lsrs	r1, r4, #16
 80013f0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80013f4:	4290      	cmp	r0, r2
 80013f6:	d90a      	bls.n	800140e <__udivmoddi4+0x66>
 80013f8:	18ba      	adds	r2, r7, r2
 80013fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80013fe:	f080 8118 	bcs.w	8001632 <__udivmoddi4+0x28a>
 8001402:	4290      	cmp	r0, r2
 8001404:	f240 8115 	bls.w	8001632 <__udivmoddi4+0x28a>
 8001408:	f1ac 0c02 	sub.w	ip, ip, #2
 800140c:	443a      	add	r2, r7
 800140e:	1a12      	subs	r2, r2, r0
 8001410:	fbb2 f0f8 	udiv	r0, r2, r8
 8001414:	fb08 2210 	mls	r2, r8, r0, r2
 8001418:	fb00 f109 	mul.w	r1, r0, r9
 800141c:	b2a4      	uxth	r4, r4
 800141e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001422:	42a1      	cmp	r1, r4
 8001424:	d909      	bls.n	800143a <__udivmoddi4+0x92>
 8001426:	193c      	adds	r4, r7, r4
 8001428:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800142c:	f080 8103 	bcs.w	8001636 <__udivmoddi4+0x28e>
 8001430:	42a1      	cmp	r1, r4
 8001432:	f240 8100 	bls.w	8001636 <__udivmoddi4+0x28e>
 8001436:	3802      	subs	r0, #2
 8001438:	443c      	add	r4, r7
 800143a:	1a64      	subs	r4, r4, r1
 800143c:	2100      	movs	r1, #0
 800143e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001442:	b11e      	cbz	r6, 800144c <__udivmoddi4+0xa4>
 8001444:	2200      	movs	r2, #0
 8001446:	40dc      	lsrs	r4, r3
 8001448:	e9c6 4200 	strd	r4, r2, [r6]
 800144c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001450:	b902      	cbnz	r2, 8001454 <__udivmoddi4+0xac>
 8001452:	deff      	udf	#255	; 0xff
 8001454:	fab2 f382 	clz	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d14f      	bne.n	80014fc <__udivmoddi4+0x154>
 800145c:	1a8d      	subs	r5, r1, r2
 800145e:	2101      	movs	r1, #1
 8001460:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001464:	fa1f f882 	uxth.w	r8, r2
 8001468:	fbb5 fcfe 	udiv	ip, r5, lr
 800146c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001470:	fb08 f00c 	mul.w	r0, r8, ip
 8001474:	0c22      	lsrs	r2, r4, #16
 8001476:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800147a:	42a8      	cmp	r0, r5
 800147c:	d907      	bls.n	800148e <__udivmoddi4+0xe6>
 800147e:	197d      	adds	r5, r7, r5
 8001480:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001484:	d202      	bcs.n	800148c <__udivmoddi4+0xe4>
 8001486:	42a8      	cmp	r0, r5
 8001488:	f200 80e9 	bhi.w	800165e <__udivmoddi4+0x2b6>
 800148c:	4694      	mov	ip, r2
 800148e:	1a2d      	subs	r5, r5, r0
 8001490:	fbb5 f0fe 	udiv	r0, r5, lr
 8001494:	fb0e 5510 	mls	r5, lr, r0, r5
 8001498:	fb08 f800 	mul.w	r8, r8, r0
 800149c:	b2a4      	uxth	r4, r4
 800149e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80014a2:	45a0      	cmp	r8, r4
 80014a4:	d907      	bls.n	80014b6 <__udivmoddi4+0x10e>
 80014a6:	193c      	adds	r4, r7, r4
 80014a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80014ac:	d202      	bcs.n	80014b4 <__udivmoddi4+0x10c>
 80014ae:	45a0      	cmp	r8, r4
 80014b0:	f200 80d9 	bhi.w	8001666 <__udivmoddi4+0x2be>
 80014b4:	4610      	mov	r0, r2
 80014b6:	eba4 0408 	sub.w	r4, r4, r8
 80014ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80014be:	e7c0      	b.n	8001442 <__udivmoddi4+0x9a>
 80014c0:	428b      	cmp	r3, r1
 80014c2:	d908      	bls.n	80014d6 <__udivmoddi4+0x12e>
 80014c4:	2e00      	cmp	r6, #0
 80014c6:	f000 80b1 	beq.w	800162c <__udivmoddi4+0x284>
 80014ca:	2100      	movs	r1, #0
 80014cc:	e9c6 0500 	strd	r0, r5, [r6]
 80014d0:	4608      	mov	r0, r1
 80014d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014d6:	fab3 f183 	clz	r1, r3
 80014da:	2900      	cmp	r1, #0
 80014dc:	d14b      	bne.n	8001576 <__udivmoddi4+0x1ce>
 80014de:	42ab      	cmp	r3, r5
 80014e0:	d302      	bcc.n	80014e8 <__udivmoddi4+0x140>
 80014e2:	4282      	cmp	r2, r0
 80014e4:	f200 80b9 	bhi.w	800165a <__udivmoddi4+0x2b2>
 80014e8:	1a84      	subs	r4, r0, r2
 80014ea:	eb65 0303 	sbc.w	r3, r5, r3
 80014ee:	2001      	movs	r0, #1
 80014f0:	469e      	mov	lr, r3
 80014f2:	2e00      	cmp	r6, #0
 80014f4:	d0aa      	beq.n	800144c <__udivmoddi4+0xa4>
 80014f6:	e9c6 4e00 	strd	r4, lr, [r6]
 80014fa:	e7a7      	b.n	800144c <__udivmoddi4+0xa4>
 80014fc:	409f      	lsls	r7, r3
 80014fe:	f1c3 0220 	rsb	r2, r3, #32
 8001502:	40d1      	lsrs	r1, r2
 8001504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001508:	fbb1 f0fe 	udiv	r0, r1, lr
 800150c:	fa1f f887 	uxth.w	r8, r7
 8001510:	fb0e 1110 	mls	r1, lr, r0, r1
 8001514:	fa24 f202 	lsr.w	r2, r4, r2
 8001518:	409d      	lsls	r5, r3
 800151a:	fb00 fc08 	mul.w	ip, r0, r8
 800151e:	432a      	orrs	r2, r5
 8001520:	0c15      	lsrs	r5, r2, #16
 8001522:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001526:	45ac      	cmp	ip, r5
 8001528:	fa04 f403 	lsl.w	r4, r4, r3
 800152c:	d909      	bls.n	8001542 <__udivmoddi4+0x19a>
 800152e:	197d      	adds	r5, r7, r5
 8001530:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001534:	f080 808f 	bcs.w	8001656 <__udivmoddi4+0x2ae>
 8001538:	45ac      	cmp	ip, r5
 800153a:	f240 808c 	bls.w	8001656 <__udivmoddi4+0x2ae>
 800153e:	3802      	subs	r0, #2
 8001540:	443d      	add	r5, r7
 8001542:	eba5 050c 	sub.w	r5, r5, ip
 8001546:	fbb5 f1fe 	udiv	r1, r5, lr
 800154a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800154e:	fb01 f908 	mul.w	r9, r1, r8
 8001552:	b295      	uxth	r5, r2
 8001554:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001558:	45a9      	cmp	r9, r5
 800155a:	d907      	bls.n	800156c <__udivmoddi4+0x1c4>
 800155c:	197d      	adds	r5, r7, r5
 800155e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8001562:	d274      	bcs.n	800164e <__udivmoddi4+0x2a6>
 8001564:	45a9      	cmp	r9, r5
 8001566:	d972      	bls.n	800164e <__udivmoddi4+0x2a6>
 8001568:	3902      	subs	r1, #2
 800156a:	443d      	add	r5, r7
 800156c:	eba5 0509 	sub.w	r5, r5, r9
 8001570:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001574:	e778      	b.n	8001468 <__udivmoddi4+0xc0>
 8001576:	f1c1 0720 	rsb	r7, r1, #32
 800157a:	408b      	lsls	r3, r1
 800157c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001580:	ea4c 0c03 	orr.w	ip, ip, r3
 8001584:	fa25 f407 	lsr.w	r4, r5, r7
 8001588:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800158c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001590:	fa1f f88c 	uxth.w	r8, ip
 8001594:	fb0e 4419 	mls	r4, lr, r9, r4
 8001598:	fa20 f307 	lsr.w	r3, r0, r7
 800159c:	fb09 fa08 	mul.w	sl, r9, r8
 80015a0:	408d      	lsls	r5, r1
 80015a2:	431d      	orrs	r5, r3
 80015a4:	0c2b      	lsrs	r3, r5, #16
 80015a6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80015aa:	45a2      	cmp	sl, r4
 80015ac:	fa02 f201 	lsl.w	r2, r2, r1
 80015b0:	fa00 f301 	lsl.w	r3, r0, r1
 80015b4:	d909      	bls.n	80015ca <__udivmoddi4+0x222>
 80015b6:	eb1c 0404 	adds.w	r4, ip, r4
 80015ba:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80015be:	d248      	bcs.n	8001652 <__udivmoddi4+0x2aa>
 80015c0:	45a2      	cmp	sl, r4
 80015c2:	d946      	bls.n	8001652 <__udivmoddi4+0x2aa>
 80015c4:	f1a9 0902 	sub.w	r9, r9, #2
 80015c8:	4464      	add	r4, ip
 80015ca:	eba4 040a 	sub.w	r4, r4, sl
 80015ce:	fbb4 f0fe 	udiv	r0, r4, lr
 80015d2:	fb0e 4410 	mls	r4, lr, r0, r4
 80015d6:	fb00 fa08 	mul.w	sl, r0, r8
 80015da:	b2ad      	uxth	r5, r5
 80015dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80015e0:	45a2      	cmp	sl, r4
 80015e2:	d908      	bls.n	80015f6 <__udivmoddi4+0x24e>
 80015e4:	eb1c 0404 	adds.w	r4, ip, r4
 80015e8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80015ec:	d22d      	bcs.n	800164a <__udivmoddi4+0x2a2>
 80015ee:	45a2      	cmp	sl, r4
 80015f0:	d92b      	bls.n	800164a <__udivmoddi4+0x2a2>
 80015f2:	3802      	subs	r0, #2
 80015f4:	4464      	add	r4, ip
 80015f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80015fa:	fba0 8902 	umull	r8, r9, r0, r2
 80015fe:	eba4 040a 	sub.w	r4, r4, sl
 8001602:	454c      	cmp	r4, r9
 8001604:	46c6      	mov	lr, r8
 8001606:	464d      	mov	r5, r9
 8001608:	d319      	bcc.n	800163e <__udivmoddi4+0x296>
 800160a:	d016      	beq.n	800163a <__udivmoddi4+0x292>
 800160c:	b15e      	cbz	r6, 8001626 <__udivmoddi4+0x27e>
 800160e:	ebb3 020e 	subs.w	r2, r3, lr
 8001612:	eb64 0405 	sbc.w	r4, r4, r5
 8001616:	fa04 f707 	lsl.w	r7, r4, r7
 800161a:	fa22 f301 	lsr.w	r3, r2, r1
 800161e:	431f      	orrs	r7, r3
 8001620:	40cc      	lsrs	r4, r1
 8001622:	e9c6 7400 	strd	r7, r4, [r6]
 8001626:	2100      	movs	r1, #0
 8001628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800162c:	4631      	mov	r1, r6
 800162e:	4630      	mov	r0, r6
 8001630:	e70c      	b.n	800144c <__udivmoddi4+0xa4>
 8001632:	468c      	mov	ip, r1
 8001634:	e6eb      	b.n	800140e <__udivmoddi4+0x66>
 8001636:	4610      	mov	r0, r2
 8001638:	e6ff      	b.n	800143a <__udivmoddi4+0x92>
 800163a:	4543      	cmp	r3, r8
 800163c:	d2e6      	bcs.n	800160c <__udivmoddi4+0x264>
 800163e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001642:	eb69 050c 	sbc.w	r5, r9, ip
 8001646:	3801      	subs	r0, #1
 8001648:	e7e0      	b.n	800160c <__udivmoddi4+0x264>
 800164a:	4628      	mov	r0, r5
 800164c:	e7d3      	b.n	80015f6 <__udivmoddi4+0x24e>
 800164e:	4611      	mov	r1, r2
 8001650:	e78c      	b.n	800156c <__udivmoddi4+0x1c4>
 8001652:	4681      	mov	r9, r0
 8001654:	e7b9      	b.n	80015ca <__udivmoddi4+0x222>
 8001656:	4608      	mov	r0, r1
 8001658:	e773      	b.n	8001542 <__udivmoddi4+0x19a>
 800165a:	4608      	mov	r0, r1
 800165c:	e749      	b.n	80014f2 <__udivmoddi4+0x14a>
 800165e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001662:	443d      	add	r5, r7
 8001664:	e713      	b.n	800148e <__udivmoddi4+0xe6>
 8001666:	3802      	subs	r0, #2
 8001668:	443c      	add	r4, r7
 800166a:	e724      	b.n	80014b6 <__udivmoddi4+0x10e>

0800166c <__aeabi_idiv0>:
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop

08001670 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8001670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
 8001674:	2601      	movs	r6, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8001676:	4c29      	ldr	r4, [pc, #164]	; (800171c <dmaStreamAllocI.part.0.constprop.0+0xac>)
    uint32_t mask = (1U << i);
 8001678:	fa06 f500 	lsl.w	r5, r6, r0
    if ((dma.allocated_mask & mask) == 0U) {
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	4215      	tst	r5, r2

      return dmastp;
    }
  }

  return NULL;
 8001680:	bf18      	it	ne
 8001682:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8001684:	d001      	beq.n	800168a <dmaStreamAllocI.part.0.constprop.0+0x1a>
}
 8001686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800168a:	4603      	mov	r3, r0
        rccEnableDMA1(true);
 800168c:	f8df c098 	ldr.w	ip, [pc, #152]	; 8001728 <dmaStreamAllocI.part.0.constprop.0+0xb8>
      dma.allocated_mask  |= mask;
 8001690:	432a      	orrs	r2, r5
 8001692:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 8001694:	f8dc 0014 	ldr.w	r0, [ip, #20]
      dma.streams[i].func  = func;
 8001698:	199a      	adds	r2, r3, r6
 800169a:	f844 1032 	str.w	r1, [r4, r2, lsl #3]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800169e:	4f20      	ldr	r7, [pc, #128]	; (8001720 <dmaStreamAllocI.part.0.constprop.0+0xb0>)
      dma.streams[i].param = param;
 80016a0:	4920      	ldr	r1, [pc, #128]	; (8001724 <dmaStreamAllocI.part.0.constprop.0+0xb4>)
        rccEnableDMA1(true);
 80016a2:	ea40 0e06 	orr.w	lr, r0, r6
      dma.streams[i].param = param;
 80016a6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80016aa:	6051      	str	r1, [r2, #4]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80016ac:	eb07 1003 	add.w	r0, r7, r3, lsl #4
        rccEnableDMA1(true);
 80016b0:	f8cc e014 	str.w	lr, [ip, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80016b4:	6882      	ldr	r2, [r0, #8]
 80016b6:	f8d4 e004 	ldr.w	lr, [r4, #4]
        rccEnableDMA1(true);
 80016ba:	f8dc 1014 	ldr.w	r1, [ip, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80016be:	ea1e 0f02 	tst.w	lr, r2
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80016c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80016c6:	d012      	beq.n	80016ee <dmaStreamAllocI.part.0.constprop.0+0x7e>
      dmaStreamDisable(dmastp);
 80016c8:	210e      	movs	r1, #14
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80016ca:	f04f 0c00 	mov.w	ip, #0
      dmaStreamDisable(dmastp);
 80016ce:	18fe      	adds	r6, r7, r3
 80016d0:	6872      	ldr	r2, [r6, #4]
 80016d2:	58ff      	ldr	r7, [r7, r3]
 80016d4:	7b76      	ldrb	r6, [r6, #13]
        dma.isr_mask |= mask;
 80016d6:	ea45 030e 	orr.w	r3, r5, lr
      dmaStreamDisable(dmastp);
 80016da:	6815      	ldr	r5, [r2, #0]
 80016dc:	40b1      	lsls	r1, r6
 80016de:	f025 050f 	bic.w	r5, r5, #15
 80016e2:	6015      	str	r5, [r2, #0]
        dma.isr_mask |= mask;
 80016e4:	6063      	str	r3, [r4, #4]
      dmaStreamDisable(dmastp);
 80016e6:	6079      	str	r1, [r7, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80016e8:	f8c2 c000 	str.w	ip, [r2]
 80016ec:	e7cb      	b.n	8001686 <dmaStreamAllocI.part.0.constprop.0+0x16>

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80016ee:	f04f 0c50 	mov.w	ip, #80	; 0x50
          nvicEnableVector(dmastp->vector, priority);
 80016f2:	7bc2      	ldrb	r2, [r0, #15]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016f4:	0951      	lsrs	r1, r2, #5
 80016f6:	0089      	lsls	r1, r1, #2
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80016f8:	f102 4860 	add.w	r8, r2, #3758096384	; 0xe0000000
 80016fc:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001700:	f002 021f 	and.w	r2, r2, #31
 8001704:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
 8001708:	fa06 f202 	lsl.w	r2, r6, r2
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800170c:	f508 4861 	add.w	r8, r8, #57600	; 0xe100
 8001710:	f888 c300 	strb.w	ip, [r8, #768]	; 0x300
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001714:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001718:	600a      	str	r2, [r1, #0]
 800171a:	e7d5      	b.n	80016c8 <dmaStreamAllocI.part.0.constprop.0+0x58>
 800171c:	20000ff0 	.word	0x20000ff0
 8001720:	0800725c 	.word	0x0800725c
 8001724:	20000d30 	.word	0x20000d30
 8001728:	40021000 	.word	0x40021000
 800172c:	00000000 	.word	0x00000000

08001730 <get_pos_u16.constprop.0>:
        }
      }
  }
  return table->t_length-1;
}
uint16_t get_pos_u16(table_1d_u16_t * table, uint16_t x){ //finds the nearest position,
 8001730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001734:	4605      	mov	r5, r0
  // if return value is > 0xFF input value rails at max or min
  uint16_t index;
  // First check boundaries
  if (x >= (table->in[table->t_length-1])) {
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <get_pos_u16.constprop.0+0x8c>)
 8001738:	8810      	ldrh	r0, [r2, #0]
 800173a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 800173e:	3801      	subs	r0, #1
 8001740:	42ab      	cmp	r3, r5
 8001742:	d917      	bls.n	8001774 <get_pos_u16.constprop.0+0x44>
     /* x-value too large, saturate to max y-value */
      return (uint16_t)((table->t_length-1));
  }
  else if (x <= (table->in[0])) {
 8001744:	8856      	ldrh	r6, [r2, #2]
 8001746:	42b5      	cmp	r5, r6
 8001748:	d918      	bls.n	800177c <get_pos_u16.constprop.0+0x4c>
     /* x-value too small, saturate to min y-value */
      return 0;
  }
  /* Find the nearest segment that holds x */
  for (index = 0; index<(table->t_length-1); index++){
 800174a:	2800      	cmp	r0, #0
 800174c:	dd12      	ble.n	8001774 <get_pos_u16.constprop.0+0x44>
 800174e:	2400      	movs	r4, #0
 8001750:	4623      	mov	r3, r4
 8001752:	e000      	b.n	8001756 <get_pos_u16.constprop.0+0x26>
 8001754:	884e      	ldrh	r6, [r1, #2]
      if ((table->in[index] <= x) && (table->in[index+1] >= x)){
 8001756:	42b5      	cmp	r5, r6
 8001758:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  for (index = 0; index<(table->t_length-1); index++){
 800175c:	f104 0101 	add.w	r1, r4, #1
      if ((table->in[index] <= x) && (table->in[index+1] >= x)){
 8001760:	d302      	bcc.n	8001768 <get_pos_u16.constprop.0+0x38>
 8001762:	889f      	ldrh	r7, [r3, #4]
 8001764:	42bd      	cmp	r5, r7
 8001766:	d90d      	bls.n	8001784 <get_pos_u16.constprop.0+0x54>
  for (index = 0; index<(table->t_length-1); index++){
 8001768:	b28c      	uxth	r4, r1
 800176a:	42a0      	cmp	r0, r4
 800176c:	4623      	mov	r3, r4
 800176e:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8001772:	dcef      	bgt.n	8001754 <get_pos_u16.constprop.0+0x24>
          if (x > middle) return index;
          else return index + 1;
        }
      }
  }
  return table->t_length-1;
 8001774:	b284      	uxth	r4, r0
}
 8001776:	4620      	mov	r0, r4
 8001778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 800177c:	2400      	movs	r4, #0
}
 800177e:	4620      	mov	r0, r4
 8001780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        float middle = (table->in[index] + table->in[index + 1]) / 2;
 8001784:	19f0      	adds	r0, r6, r7
 8001786:	1040      	asrs	r0, r0, #1
 8001788:	f7ff fbbc 	bl	8000f04 <__aeabi_i2f>
        if (table->in[index] < table->in[index + 1]){ //rising slope
 800178c:	42b7      	cmp	r7, r6
        float middle = (table->in[index] + table->in[index + 1]) / 2;
 800178e:	4680      	mov	r8, r0
          if (x < middle) return index;
 8001790:	4628      	mov	r0, r5
        if (table->in[index] < table->in[index + 1]){ //rising slope
 8001792:	d90a      	bls.n	80017aa <get_pos_u16.constprop.0+0x7a>
          if (x < middle) return index;
 8001794:	f7ff fbb6 	bl	8000f04 <__aeabi_i2f>
 8001798:	4601      	mov	r1, r0
 800179a:	4640      	mov	r0, r8
 800179c:	f7ff fdc2 	bl	8001324 <__aeabi_fcmpgt>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d1e8      	bne.n	8001776 <get_pos_u16.constprop.0+0x46>
          else return index + 1;
 80017a4:	3401      	adds	r4, #1
 80017a6:	b2a4      	uxth	r4, r4
 80017a8:	e7e5      	b.n	8001776 <get_pos_u16.constprop.0+0x46>
          if (x > middle) return index;
 80017aa:	f7ff fbab 	bl	8000f04 <__aeabi_i2f>
 80017ae:	4601      	mov	r1, r0
 80017b0:	4640      	mov	r0, r8
 80017b2:	f7ff fd99 	bl	80012e8 <__aeabi_fcmplt>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d1dd      	bne.n	8001776 <get_pos_u16.constprop.0+0x46>
 80017ba:	e7f3      	b.n	80017a4 <get_pos_u16.constprop.0+0x74>
 80017bc:	20000800 	.word	0x20000800

080017c0 <chCoreAllocFromTop>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80017c0:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80017c2:	b430      	push	{r4, r5}
 80017c4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <chCoreAllocFromTop+0x38>)
 80017ca:	4249      	negs	r1, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80017cc:	e9d3 4500 	ldrd	r4, r5, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80017d0:	1a28      	subs	r0, r5, r0
 80017d2:	4008      	ands	r0, r1
  prev = p - offset;
 80017d4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80017d6:	42a2      	cmp	r2, r4
 80017d8:	d307      	bcc.n	80017ea <chCoreAllocFromTop+0x2a>
 80017da:	4295      	cmp	r5, r2
 80017dc:	d305      	bcc.n	80017ea <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	2300      	movs	r3, #0
 80017e2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80017e6:	bc30      	pop	{r4, r5}
 80017e8:	4770      	bx	lr
    return NULL;
 80017ea:	2000      	movs	r0, #0
 80017ec:	2300      	movs	r3, #0
 80017ee:	f383 8811 	msr	BASEPRI, r3
}
 80017f2:	bc30      	pop	{r4, r5}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000fc8 	.word	0x20000fc8
 80017fc:	00000000 	.word	0x00000000

08001800 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8001800:	4a02      	ldr	r2, [pc, #8]	; (800180c <notify2+0xc>)
 8001802:	68d3      	ldr	r3, [r2, #12]
 8001804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001808:	60d3      	str	r3, [r2, #12]
}
 800180a:	4770      	bx	lr
 800180c:	40004400 	.word	0x40004400

08001810 <ch_Speed>:
}
void ch_PWM_Freq(uint32_t freq){
    pwmChangePeriod(&PWMD4, freq);
    pwmEnableChannel(&PWMD4, 3, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, 5000));
}
void ch_Speed(uint16_t speed){
 8001810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001814:	4605      	mov	r5, r0
}

uint16_t read_table_u16(table_1d_u16_t * table, uint16_t in){
  uint16_t idx; //
  // First check boundaries
  if (in >= (table->in[table->t_length-1])){ // in-value too large, saturate to max y-value
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <ch_Speed+0x118>)
    //table lookup here!
    pwmEnableChannel(&PWMD4, 2, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, read_table_u16(&(cudata.configstruct.table0), speed)));
 8001818:	4e44      	ldr	r6, [pc, #272]	; (800192c <ch_Speed+0x11c>)
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	68b4      	ldr	r4, [r6, #8]
 800181e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8001822:	42a8      	cmp	r0, r5
 8001824:	d977      	bls.n	8001916 <ch_Speed+0x106>
    return table->out[table->t_length-1];
  }
  else if (in <= (table->in[0])){            // in-value too small, saturate to min y-value
 8001826:	885f      	ldrh	r7, [r3, #2]
 8001828:	42bd      	cmp	r5, r7
 800182a:	d94f      	bls.n	80018cc <ch_Speed+0xbc>
 800182c:	1e51      	subs	r1, r2, #1
  for (index = 0; index<(table->t_length-1); index++){
 800182e:	2900      	cmp	r1, #0
 8001830:	dd13      	ble.n	800185a <ch_Speed+0x4a>
 8001832:	2200      	movs	r2, #0
 8001834:	4610      	mov	r0, r2
 8001836:	e000      	b.n	800183a <ch_Speed+0x2a>
 8001838:	887f      	ldrh	r7, [r7, #2]
      if ((table->in[index] <= x) && (table->in[index+1] >= x)){
 800183a:	42bd      	cmp	r5, r7
 800183c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  for (index = 0; index<(table->t_length-1); index++){
 8001840:	f102 0c01 	add.w	ip, r2, #1
      if ((table->in[index] <= x) && (table->in[index+1] >= x)){
 8001844:	d302      	bcc.n	800184c <ch_Speed+0x3c>
 8001846:	8880      	ldrh	r0, [r0, #4]
 8001848:	42a8      	cmp	r0, r5
 800184a:	d26b      	bcs.n	8001924 <ch_Speed+0x114>
  for (index = 0; index<(table->t_length-1); index++){
 800184c:	fa1f f28c 	uxth.w	r2, ip
 8001850:	4291      	cmp	r1, r2
 8001852:	4610      	mov	r0, r2
 8001854:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8001858:	dcee      	bgt.n	8001838 <ch_Speed+0x28>
  return table->t_length-1;
 800185a:	b2c9      	uxtb	r1, r1
    return table->out[0];
  }
  // Now we can get to business
  idx = get_idx_u16(table, in);
  return interpolate_segment_u16(table->in[idx],    /* x0 */
 800185c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8001860:	8850      	ldrh	r0, [r2, #2]
 8001862:	f8b2 7042 	ldrh.w	r7, [r2, #66]	; 0x42
    if (x <= x0) { return y0; }
 8001866:	4285      	cmp	r5, r0
  return interpolate_segment_u16(table->in[idx],    /* x0 */
 8001868:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800186c:	f8b2 a044 	ldrh.w	sl, [r2, #68]	; 0x44
    if (x <= x0) { return y0; }
 8001870:	d92e      	bls.n	80018d0 <ch_Speed+0xc0>
    if (x >= x1) { return y1; }
 8001872:	454d      	cmp	r5, r9
 8001874:	d254      	bcs.n	8001920 <ch_Speed+0x110>
    t =  ((float)x-(float)x0);
 8001876:	f7ff fb41 	bl	8000efc <__aeabi_ui2f>
 800187a:	4680      	mov	r8, r0
 800187c:	4628      	mov	r0, r5
 800187e:	f7ff fb3d 	bl	8000efc <__aeabi_ui2f>
 8001882:	4641      	mov	r1, r8
 8001884:	f7ff fa88 	bl	8000d98 <__aeabi_fsub>
 8001888:	4603      	mov	r3, r0
    return (uint16_t)((float)y0 + t*((float)y1-(float)y0));
 800188a:	4638      	mov	r0, r7
    t =  ((float)x-(float)x0);
 800188c:	461f      	mov	r7, r3
    return (uint16_t)((float)y0 + t*((float)y1-(float)y0));
 800188e:	f7ff fb35 	bl	8000efc <__aeabi_ui2f>
 8001892:	4605      	mov	r5, r0
    t /= ((float)x1-(float)x0);
 8001894:	4648      	mov	r0, r9
 8001896:	f7ff fb31 	bl	8000efc <__aeabi_ui2f>
 800189a:	4641      	mov	r1, r8
 800189c:	f7ff fa7c 	bl	8000d98 <__aeabi_fsub>
 80018a0:	4601      	mov	r1, r0
 80018a2:	4638      	mov	r0, r7
 80018a4:	f7ff fc36 	bl	8001114 <__aeabi_fdiv>
 80018a8:	4607      	mov	r7, r0
    return (uint16_t)((float)y0 + t*((float)y1-(float)y0));
 80018aa:	4650      	mov	r0, sl
 80018ac:	f7ff fb26 	bl	8000efc <__aeabi_ui2f>
 80018b0:	4629      	mov	r1, r5
 80018b2:	f7ff fa71 	bl	8000d98 <__aeabi_fsub>
 80018b6:	4601      	mov	r1, r0
 80018b8:	4638      	mov	r0, r7
 80018ba:	f7ff fb77 	bl	8000fac <__aeabi_fmul>
 80018be:	4629      	mov	r1, r5
 80018c0:	f7ff fa6c 	bl	8000d9c <__addsf3>
 80018c4:	f7ff fd38 	bl	8001338 <__aeabi_f2uiz>
 80018c8:	b287      	uxth	r7, r0
 80018ca:	e001      	b.n	80018d0 <ch_Speed+0xc0>
    return table->out[0];
 80018cc:	f8b3 7042 	ldrh.w	r7, [r3, #66]	; 0x42
 80018d0:	fb04 f407 	mul.w	r4, r4, r7
 80018d4:	4816      	ldr	r0, [pc, #88]	; (8001930 <ch_Speed+0x120>)
 80018d6:	2220      	movs	r2, #32
 80018d8:	fba0 3404 	umull	r3, r4, r0, r4
 80018dc:	0b64      	lsrs	r4, r4, #13
 80018de:	f382 8811 	msr	BASEPRI, r2

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 80018e2:	68f3      	ldr	r3, [r6, #12]
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 80018e4:	69b1      	ldr	r1, [r6, #24]
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	60f3      	str	r3, [r6, #12]
 80018ec:	63cc      	str	r4, [r1, #60]	; 0x3c
 80018ee:	2300      	movs	r3, #0
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f382 8811 	msr	BASEPRI, r2
 *
 * @notapi
 */
void pwm_lld_enable_channel_notification(PWMDriver *pwmp,
                                         pwmchannel_t channel) {
  uint32_t dier = pwmp->tim->DIER;
 80018f8:	69b2      	ldr	r2, [r6, #24]
 80018fa:	68d3      	ldr	r3, [r2, #12]
  osalDbgAssert(channel < 4, "callback not supported");
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
 80018fc:	0719      	lsls	r1, r3, #28
 80018fe:	d405      	bmi.n	800190c <ch_Speed+0xfc>
    pwmp->tim->SR   = ~(2 << channel);
 8001900:	f06f 0108 	mvn.w	r1, #8
    pwmp->tim->DIER = dier | (2 << channel);
 8001904:	f043 0308 	orr.w	r3, r3, #8
    pwmp->tim->SR   = ~(2 << channel);
 8001908:	6111      	str	r1, [r2, #16]
    pwmp->tim->DIER = dier | (2 << channel);
 800190a:	60d3      	str	r3, [r2, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	f383 8811 	msr	BASEPRI, r3
    pwmEnableChannelNotification(&PWMD4, 2);
}
 8001912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return table->out[table->t_length-1];
 8001916:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800191a:	f8b3 7040 	ldrh.w	r7, [r3, #64]	; 0x40
 800191e:	e7d7      	b.n	80018d0 <ch_Speed+0xc0>
    if (x >= x1) { return y1; }
 8001920:	4657      	mov	r7, sl
 8001922:	e7d5      	b.n	80018d0 <ch_Speed+0xc0>
        return index;
 8001924:	b2d1      	uxtb	r1, r2
 8001926:	e799      	b.n	800185c <ch_Speed+0x4c>
 8001928:	20000800 	.word	0x20000800
 800192c:	20000d98 	.word	0x20000d98
 8001930:	d1b71759 	.word	0xd1b71759
	...

08001940 <icuoverflowcb>:
    cnt = 0;
 8001940:	2000      	movs	r0, #0
    speed_in = 0;
 8001942:	2200      	movs	r2, #0
    cnt = 0;
 8001944:	4902      	ldr	r1, [pc, #8]	; (8001950 <icuoverflowcb+0x10>)
    speed_in = 0;
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <icuoverflowcb+0x14>)
    cnt = 0;
 8001948:	8008      	strh	r0, [r1, #0]
    speed_in = 0;
 800194a:	601a      	str	r2, [r3, #0]
}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000fd0 	.word	0x20000fd0
 8001954:	20001278 	.word	0x20001278
	...

08001960 <icuperiodcb>:
  last_period = (float)icuGetPeriodX(icup);
 8001960:	6943      	ldr	r3, [r0, #20]
static void icuperiodcb(ICUDriver *icup) {
 8001962:	b510      	push	{r4, lr}
  last_period = (float)icuGetPeriodX(icup);
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	4c06      	ldr	r4, [pc, #24]	; (8001980 <icuperiodcb+0x20>)
 8001968:	3001      	adds	r0, #1
 800196a:	f7ff fac7 	bl	8000efc <__aeabi_ui2f>
 800196e:	f7ff fce3 	bl	8001338 <__aeabi_f2uiz>
    cnt++;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <icuperiodcb+0x24>)
  last_period = (float)icuGetPeriodX(icup);
 8001974:	6020      	str	r0, [r4, #0]
    cnt++;
 8001976:	8813      	ldrh	r3, [r2, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	8013      	strh	r3, [r2, #0]
}
 800197c:	bd10      	pop	{r4, pc}
 800197e:	bf00      	nop
 8001980:	20001268 	.word	0x20001268
 8001984:	20000fd0 	.word	0x20000fd0
	...

08001990 <eepfs_getposition>:
msg_t eepfs_getposition(void *ip) {

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));

  return ((EepromFileStream *)ip)->position;
}
 8001990:	6880      	ldr	r0, [r0, #8]
 8001992:	4770      	bx	lr
	...

080019a0 <_port_irq_epilogue>:
 80019a0:	2320      	movs	r3, #32
 80019a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <_port_irq_epilogue+0x3c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80019ae:	d102      	bne.n	80019b6 <_port_irq_epilogue+0x16>
 80019b0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80019b4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80019b6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80019ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 80019be:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80019c0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80019c2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80019c6:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <_port_irq_epilogue+0x40>)
 80019c8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80019ca:	6952      	ldr	r2, [r2, #20]
    if (chSchIsPreemptionRequired()) {
 80019cc:	6889      	ldr	r1, [r1, #8]
 80019ce:	6892      	ldr	r2, [r2, #8]
 80019d0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80019d2:	bf8c      	ite	hi
 80019d4:	4a03      	ldrhi	r2, [pc, #12]	; (80019e4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80019d6:	4a04      	ldrls	r2, [pc, #16]	; (80019e8 <_port_irq_epilogue+0x48>)
 80019d8:	619a      	str	r2, [r3, #24]
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	20000e30 	.word	0x20000e30
 80019e4:	08000263 	.word	0x08000263
 80019e8:	08000266 	.word	0x08000266
 80019ec:	00000000 	.word	0x00000000

080019f0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80019f2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80019f4:	e9d3 4200 	ldrd	r4, r2, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80019f8:	4249      	negs	r1, r1
 80019fa:	1a10      	subs	r0, r2, r0
 80019fc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80019fe:	42a0      	cmp	r0, r4
 8001a00:	d304      	bcc.n	8001a0c <chCoreAllocAlignedI+0x1c>
 8001a02:	4282      	cmp	r2, r0
 8001a04:	d302      	bcc.n	8001a0c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001a06:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8001a08:	6058      	str	r0, [r3, #4]
 8001a0a:	4770      	bx	lr
    return NULL;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	bc10      	pop	{r4}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000fc8 	.word	0x20000fc8
	...

08001a20 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <chTMStopMeasurementX+0x3c>)
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <chTMStopMeasurementX+0x40>)
 8001a24:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001a26:	685b      	ldr	r3, [r3, #4]
  tmp->last = (now - tmp->last) - offset;
 8001a28:	6882      	ldr	r2, [r0, #8]
 8001a2a:	1a5b      	subs	r3, r3, r1
 8001a2c:	1a9b      	subs	r3, r3, r2
  tmp->n++;
 8001a2e:	68c2      	ldr	r2, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001a30:	b430      	push	{r4, r5}
  tmp->cumulative += (rttime_t)tmp->last;
 8001a32:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8001a36:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8001a38:	3201      	adds	r2, #1
  tmp->cumulative += (rttime_t)tmp->last;
 8001a3a:	18e4      	adds	r4, r4, r3
  tmp->last = (now - tmp->last) - offset;
 8001a3c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (tmp->last < tmp->best) {
 8001a40:	6802      	ldr	r2, [r0, #0]
  tmp->cumulative += (rttime_t)tmp->last;
 8001a42:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001a46:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8001a48:	bf88      	it	hi
 8001a4a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8001a4c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8001a4e:	e9c0 4504 	strd	r4, r5, [r0, #16]
}
 8001a52:	bc30      	pop	{r4, r5}
    tmp->best = tmp->last;
 8001a54:	bf38      	it	cc
 8001a56:	6003      	strcc	r3, [r0, #0]
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000e30 	.word	0x20000e30
 8001a60:	e0001000 	.word	0xe0001000
	...

08001a70 <chTMStartMeasurementX>:
 8001a70:	4b01      	ldr	r3, [pc, #4]	; (8001a78 <chTMStartMeasurementX+0x8>)
 8001a72:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001a74:	6083      	str	r3, [r0, #8]
}
 8001a76:	4770      	bx	lr
 8001a78:	e0001000 	.word	0xe0001000
 8001a7c:	00000000 	.word	0x00000000

08001a80 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8001a80:	b4f0      	push	{r4, r5, r6, r7}
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001a82:	2100      	movs	r1, #0
  tp->state     = CH_STATE_WTSTART;
 8001a84:	2702      	movs	r7, #2
  tp->refs      = (trefs_t)1;
 8001a86:	2501      	movs	r5, #1
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001a88:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8001a8a:	6846      	ldr	r6, [r0, #4]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001a8c:	6904      	ldr	r4, [r0, #16]
  REG_INSERT(tp);
 8001a8e:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <chThdCreateSuspendedI+0x74>)
  tp->wabase = tdp->wbase;
 8001a90:	f843 6c2c 	str.w	r6, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001a94:	f843 4c6c 	str.w	r4, [r3, #-108]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8001a98:	6806      	ldr	r6, [r0, #0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001a9a:	6944      	ldr	r4, [r0, #20]
  return _thread_init(tp, tdp->name, tdp->prio);
 8001a9c:	68c0      	ldr	r0, [r0, #12]
  tp->refs      = (trefs_t)1;
 8001a9e:	f803 5c26 	strb.w	r5, [r3, #-38]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001aa2:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8001aa6:	f803 7c28 	strb.w	r7, [r3, #-40]
  REG_INSERT(tp);
 8001aaa:	f843 2c3c 	str.w	r2, [r3, #-60]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001aae:	4d12      	ldr	r5, [pc, #72]	; (8001af8 <chThdCreateSuspendedI+0x78>)
 8001ab0:	f843 4c68 	str.w	r4, [r3, #-104]
  tp->prio      = prio;
 8001ab4:	f843 0c40 	str.w	r0, [r3, #-64]
  REG_INSERT(tp);
 8001ab8:	6914      	ldr	r4, [r2, #16]
  tp->realprio  = prio;
 8001aba:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001abe:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
  tp->epending  = (eventmask_t)0;
 8001ac2:	e943 1105 	strd	r1, r1, [r3, #-20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001ac6:	f843 0c34 	str.w	r0, [r3, #-52]
 8001aca:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8001ace:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  list_init(&tp->waiting);
 8001ad2:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 8001ad6:	f1a3 011c 	sub.w	r1, r3, #28
  tp->name      = name;
 8001ada:	f843 6c30 	str.w	r6, [r3, #-48]
  REG_INSERT(tp);
 8001ade:	f843 4c38 	str.w	r4, [r3, #-56]
 8001ae2:	60e0      	str	r0, [r4, #12]
 8001ae4:	6110      	str	r0, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001ae6:	e943 5108 	strd	r5, r1, [r3, #-32]
}
 8001aea:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 8001aec:	f843 1c18 	str.w	r1, [r3, #-24]
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000e30 	.word	0x20000e30
 8001af8:	08000251 	.word	0x08000251
 8001afc:	00000000 	.word	0x00000000

08001b00 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001b00:	2320      	movs	r3, #32
 8001b02:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001b06:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	d80d      	bhi.n	8001b2a <wakeup+0x2a>
 8001b0e:	e8df f003 	tbb	[pc, r3]
 8001b12:	0c27      	.short	0x0c27
 8001b14:	0408230c 	.word	0x0408230c
 8001b18:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 8001b1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001b1c:	6893      	ldr	r3, [r2, #8]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001b22:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001b26:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001b28:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 8001b2a:	2200      	movs	r2, #0
static void wakeup(void *p) {
 8001b2c:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
 8001b2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8001b32:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001b36:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001b38:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001b3c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d2fb      	bcs.n	8001b3c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	2100      	movs	r1, #0
 8001b48:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001b4c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001b4e:	6058      	str	r0, [r3, #4]
 8001b50:	f381 8811 	msr	BASEPRI, r1
}
 8001b54:	bc10      	pop	{r4}
 8001b56:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b5c:	601a      	str	r2, [r3, #0]
    break;
 8001b5e:	e7e4      	b.n	8001b2a <wakeup+0x2a>
 8001b60:	2300      	movs	r3, #0
 8001b62:	f383 8811 	msr	BASEPRI, r3
 8001b66:	4770      	bx	lr
 8001b68:	20000e30 	.word	0x20000e30
 8001b6c:	00000000 	.word	0x00000000

08001b70 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001b70:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8001b72:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8001b76:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001b7a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	d2fb      	bcs.n	8001b7a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001b88:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001b8a:	6058      	str	r0, [r3, #4]
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000e30 	.word	0x20000e30
	...

08001ba0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001ba2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001ba4:	42a0      	cmp	r0, r4
 8001ba6:	d021      	beq.n	8001bec <chEvtBroadcastFlagsI+0x4c>
 8001ba8:	4607      	mov	r7, r0
 8001baa:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8001bac:	2600      	movs	r6, #0
 8001bae:	e004      	b.n	8001bba <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001bb0:	2a0b      	cmp	r2, #11
 8001bb2:	d01c      	beq.n	8001bee <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8001bb4:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001bb6:	42a7      	cmp	r7, r4
 8001bb8:	d018      	beq.n	8001bec <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 8001bba:	68e3      	ldr	r3, [r4, #12]
 8001bbc:	432b      	orrs	r3, r5
 8001bbe:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001bc0:	b115      	cbz	r5, 8001bc8 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001bc2:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001bc4:	421d      	tst	r5, r3
 8001bc6:	d0f5      	beq.n	8001bb4 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8001bc8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8001bcc:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001bce:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8001bd2:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001bd4:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8001bd6:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001bd8:	d1ea      	bne.n	8001bb0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001bda:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001bdc:	4213      	tst	r3, r2
 8001bde:	d0e9      	beq.n	8001bb4 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001be0:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001be2:	f7ff ffc5 	bl	8001b70 <chSchReadyI>
    elp = elp->next;
 8001be6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001be8:	42a7      	cmp	r7, r4
 8001bea:	d1e6      	bne.n	8001bba <chEvtBroadcastFlagsI+0x1a>
}
 8001bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8001bee:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001bf0:	ea32 0303 	bics.w	r3, r2, r3
 8001bf4:	d1de      	bne.n	8001bb4 <chEvtBroadcastFlagsI+0x14>
 8001bf6:	e7f3      	b.n	8001be0 <chEvtBroadcastFlagsI+0x40>
	...

08001c00 <_idle_thread>:
}
 8001c00:	e7fe      	b.n	8001c00 <_idle_thread>
 8001c02:	bf00      	nop
	...

08001c10 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8001c10:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 8001c12:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001c14:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 8001c16:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001c18:	68dd      	ldr	r5, [r3, #12]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	4015      	ands	r5, r2
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001c1e:	b2ea      	uxtb	r2, r5
  icup->tim->SR = ~sr;
 8001c20:	43d2      	mvns	r2, r2
 8001c22:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001c24:	7d0b      	ldrb	r3, [r1, #20]
 8001c26:	b97b      	cbnz	r3, 8001c48 <icu_lld_serve_interrupt+0x38>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001c28:	076b      	lsls	r3, r5, #29
 8001c2a:	d52b      	bpl.n	8001c84 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
 8001c2c:	7803      	ldrb	r3, [r0, #0]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d025      	beq.n	8001c7e <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001c32:	07a9      	lsls	r1, r5, #30
 8001c34:	d40f      	bmi.n	8001c56 <icu_lld_serve_interrupt+0x46>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8001c36:	07ed      	lsls	r5, r5, #31
 8001c38:	d505      	bpl.n	8001c46 <icu_lld_serve_interrupt+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 8001c3a:	6863      	ldr	r3, [r4, #4]
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4798      	blx	r3
 8001c42:	2303      	movs	r3, #3
 8001c44:	7023      	strb	r3, [r4, #0]
}
 8001c46:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001c48:	07aa      	lsls	r2, r5, #30
 8001c4a:	d50a      	bpl.n	8001c62 <icu_lld_serve_interrupt+0x52>
      _icu_isr_invoke_width_cb(icup);
 8001c4c:	7803      	ldrb	r3, [r0, #0]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d004      	beq.n	8001c5c <icu_lld_serve_interrupt+0x4c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001c52:	076b      	lsls	r3, r5, #29
 8001c54:	d5ef      	bpl.n	8001c36 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001c56:	2304      	movs	r3, #4
 8001c58:	7023      	strb	r3, [r4, #0]
 8001c5a:	e7ec      	b.n	8001c36 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_width_cb(icup);
 8001c5c:	688b      	ldr	r3, [r1, #8]
 8001c5e:	b1d3      	cbz	r3, 8001c96 <icu_lld_serve_interrupt+0x86>
 8001c60:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001c62:	076b      	lsls	r3, r5, #29
 8001c64:	d5e7      	bpl.n	8001c36 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001c66:	7823      	ldrb	r3, [r4, #0]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d1f4      	bne.n	8001c56 <icu_lld_serve_interrupt+0x46>
 8001c6c:	6861      	ldr	r1, [r4, #4]
 8001c6e:	68cb      	ldr	r3, [r1, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <icu_lld_serve_interrupt+0x46>
 8001c74:	4620      	mov	r0, r4
 8001c76:	4798      	blx	r3
 8001c78:	2304      	movs	r3, #4
 8001c7a:	7023      	strb	r3, [r4, #0]
 8001c7c:	e7db      	b.n	8001c36 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_width_cb(icup);
 8001c7e:	688b      	ldr	r3, [r1, #8]
 8001c80:	b133      	cbz	r3, 8001c90 <icu_lld_serve_interrupt+0x80>
 8001c82:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001c84:	07a9      	lsls	r1, r5, #30
 8001c86:	d5d6      	bpl.n	8001c36 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001c88:	7823      	ldrb	r3, [r4, #0]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d1e3      	bne.n	8001c56 <icu_lld_serve_interrupt+0x46>
 8001c8e:	e7ed      	b.n	8001c6c <icu_lld_serve_interrupt+0x5c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001c90:	07a8      	lsls	r0, r5, #30
 8001c92:	d4ec      	bmi.n	8001c6e <icu_lld_serve_interrupt+0x5e>
 8001c94:	e7cf      	b.n	8001c36 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001c96:	076a      	lsls	r2, r5, #29
 8001c98:	d4e9      	bmi.n	8001c6e <icu_lld_serve_interrupt+0x5e>
 8001c9a:	e7cc      	b.n	8001c36 <icu_lld_serve_interrupt+0x26>
 8001c9c:	0000      	movs	r0, r0
	...

08001ca0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ca0:	070b      	lsls	r3, r1, #28
 8001ca2:	d412      	bmi.n	8001cca <i2c_lld_serve_tx_end_irq+0x2a>
  I2C_TypeDef *dp = i2cp->i2c;
 8001ca4:	e9d0 200c 	ldrd	r2, r0, [r0, #48]	; 0x30
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8001ca8:	230e      	movs	r3, #14
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001caa:	b430      	push	{r4, r5}
  dmaStreamDisable(i2cp->dmatx);
 8001cac:	e9d2 5400 	ldrd	r5, r4, [r2]
 8001cb0:	6821      	ldr	r1, [r4, #0]
 8001cb2:	f021 010f 	bic.w	r1, r1, #15
 8001cb6:	6021      	str	r1, [r4, #0]
 8001cb8:	7b52      	ldrb	r2, [r2, #13]
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	606b      	str	r3, [r5, #4]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001cbe:	6843      	ldr	r3, [r0, #4]
}
 8001cc0:	bc30      	pop	{r4, r5}
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6043      	str	r3, [r0, #4]
}
 8001cc8:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8001cca:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8001ccc:	4b01      	ldr	r3, [pc, #4]	; (8001cd4 <i2c_lld_serve_tx_end_irq+0x34>)
 8001cce:	4a02      	ldr	r2, [pc, #8]	; (8001cd8 <i2c_lld_serve_tx_end_irq+0x38>)
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd2:	e7fe      	b.n	8001cd2 <i2c_lld_serve_tx_end_irq+0x32>
 8001cd4:	20000e30 	.word	0x20000e30
 8001cd8:	08006218 	.word	0x08006218
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ce0:	f011 0108 	ands.w	r1, r1, #8
 8001ce4:	d126      	bne.n	8001d34 <i2c_lld_serve_rx_end_irq+0x54>
  dmaStreamDisable(i2cp->dmarx);
 8001ce6:	220e      	movs	r2, #14
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001ce8:	b570      	push	{r4, r5, r6, lr}
  dmaStreamDisable(i2cp->dmarx);
 8001cea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 8001cec:	6b43      	ldr	r3, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 8001cee:	6866      	ldr	r6, [r4, #4]
 8001cf0:	6835      	ldr	r5, [r6, #0]
 8001cf2:	f025 050f 	bic.w	r5, r5, #15
 8001cf6:	6035      	str	r5, [r6, #0]
 8001cf8:	7b65      	ldrb	r5, [r4, #13]
 8001cfa:	6824      	ldr	r4, [r4, #0]
 8001cfc:	40aa      	lsls	r2, r5
 8001cfe:	6062      	str	r2, [r4, #4]
  dp->CR2 &= ~I2C_CR2_LAST;
 8001d00:	685a      	ldr	r2, [r3, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001d02:	2420      	movs	r4, #32
 8001d04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d08:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d10:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f384 8811 	msr	BASEPRI, r4
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001d1e:	69c3      	ldr	r3, [r0, #28]
 8001d20:	b123      	cbz	r3, 8001d2c <i2c_lld_serve_rx_end_irq+0x4c>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8001d22:	61c1      	str	r1, [r0, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001d24:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8001d26:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001d28:	f7ff ff22 	bl	8001b70 <chSchReadyI>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f383 8811 	msr	BASEPRI, r3
}
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
 8001d36:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <i2c_lld_serve_rx_end_irq+0x60>)
 8001d38:	4a02      	ldr	r2, [pc, #8]	; (8001d44 <i2c_lld_serve_rx_end_irq+0x64>)
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d3c:	e7fe      	b.n	8001d3c <i2c_lld_serve_rx_end_irq+0x5c>
 8001d3e:	bf00      	nop
 8001d40:	20000e30 	.word	0x20000e30
 8001d44:	08006218 	.word	0x08006218
	...

08001d50 <_pal_lld_setgroupmode>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8001d50:	2a03      	cmp	r2, #3
                           iomode_t mode) {
 8001d52:	b4f0      	push	{r4, r5, r6, r7}
  if (mode == PAL_MODE_INPUT_PULLUP)
 8001d54:	d02d      	beq.n	8001db2 <_pal_lld_setgroupmode+0x62>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8001d56:	2a04      	cmp	r2, #4
    port->BRR = mask;
 8001d58:	bf08      	it	eq
 8001d5a:	6141      	streq	r1, [r0, #20]
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8001d5c:	2300      	movs	r3, #0
  cfg = cfgtab[mode];
 8001d5e:	2708      	movs	r7, #8
  mh = ml = crh = crl = 0;
 8001d60:	461d      	mov	r5, r3
 8001d62:	461c      	mov	r4, r3
 8001d64:	461e      	mov	r6, r3
  cfg = cfgtab[mode];
 8001d66:	f8df c050 	ldr.w	ip, [pc, #80]	; 8001db8 <_pal_lld_setgroupmode+0x68>
 8001d6a:	f81c 2002 	ldrb.w	r2, [ip, r2]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 8001d6e:	f011 0f80 	tst.w	r1, #128	; 0x80
    ml <<= 4;
 8001d72:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
 8001d76:	ea4f 1303 	mov.w	r3, r3, lsl #4
    mh <<= 4;
 8001d7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    crh <<= 4;
 8001d7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
      ml |= 0xf;
 8001d82:	bf0c      	ite	eq
 8001d84:	f044 040f 	orreq.w	r4, r4, #15
    else
      crl |= cfg;
 8001d88:	4313      	orrne	r3, r2
    if ((mask & 0x8000) == 0)
 8001d8a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 8001d8e:	bf0c      	ite	eq
 8001d90:	f046 060f 	orreq.w	r6, r6, #15
    else
      crh |= cfg;
 8001d94:	4315      	orrne	r5, r2
  for (i = 0; i < 8; i++) {
 8001d96:	3f01      	subs	r7, #1
    mask <<= 1;
 8001d98:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 8001d9c:	d1e7      	bne.n	8001d6e <_pal_lld_setgroupmode+0x1e>
  }
  port->CRH = (port->CRH & mh) | crh;
 8001d9e:	6842      	ldr	r2, [r0, #4]
 8001da0:	4016      	ands	r6, r2
 8001da2:	4335      	orrs	r5, r6
 8001da4:	6045      	str	r5, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 8001da6:	6802      	ldr	r2, [r0, #0]
 8001da8:	4014      	ands	r4, r2
 8001daa:	4323      	orrs	r3, r4
 8001dac:	6003      	str	r3, [r0, #0]
}
 8001dae:	bcf0      	pop	{r4, r5, r6, r7}
 8001db0:	4770      	bx	lr
    port->BSRR = mask;
 8001db2:	6101      	str	r1, [r0, #16]
 8001db4:	e7d2      	b.n	8001d5c <_pal_lld_setgroupmode+0xc>
 8001db6:	bf00      	nop
 8001db8:	080072cc 	.word	0x080072cc
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <dmaServeInterrupt>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
 8001dc0:	b430      	push	{r4, r5}
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001dc2:	6802      	ldr	r2, [r0, #0]
 8001dc4:	7b43      	ldrb	r3, [r0, #13]
 8001dc6:	6811      	ldr	r1, [r2, #0]
  if (flags & dmastp->channel->CCR) {
 8001dc8:	6844      	ldr	r4, [r0, #4]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001dca:	40d9      	lsrs	r1, r3
  if (flags & dmastp->channel->CCR) {
 8001dcc:	6824      	ldr	r4, [r4, #0]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001dce:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001dd2:	420c      	tst	r4, r1
 8001dd4:	d00e      	beq.n	8001df4 <dmaServeInterrupt+0x34>
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8001dd6:	7b80      	ldrb	r0, [r0, #14]
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8001dd8:	4c07      	ldr	r4, [pc, #28]	; (8001df8 <dmaServeInterrupt+0x38>)
 8001dda:	3001      	adds	r0, #1
 8001ddc:	f854 5030 	ldr.w	r5, [r4, r0, lsl #3]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	6053      	str	r3, [r2, #4]
    if (dma.streams[selfindex].func) {
 8001de6:	b12d      	cbz	r5, 8001df4 <dmaServeInterrupt+0x34>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001de8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001dec:	462b      	mov	r3, r5
    }
  }
}
 8001dee:	bc30      	pop	{r4, r5}
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001df0:	6840      	ldr	r0, [r0, #4]
 8001df2:	4718      	bx	r3
}
 8001df4:	bc30      	pop	{r4, r5}
 8001df6:	4770      	bx	lr
 8001df8:	20000ff0 	.word	0x20000ff0
 8001dfc:	00000000 	.word	0x00000000

08001e00 <eepfs_get>:

msg_t eepfs_get(void *ip) {

  (void)ip;
  return 0;
}
 8001e00:	2000      	movs	r0, #0
 8001e02:	4770      	bx	lr
	...

08001e10 <eepfs_put>:
}
 8001e10:	2000      	movs	r0, #0
 8001e12:	4770      	bx	lr
	...

08001e20 <eepfs_geterror>:
}
 8001e20:	6840      	ldr	r0, [r0, #4]
 8001e22:	4770      	bx	lr
	...

08001e30 <eepfs_close>:
  ((EepromFileStream *)ip)->errors   = FILE_OK;
 8001e30:	2200      	movs	r2, #0
msg_t eepfs_close(void *ip) {
 8001e32:	4603      	mov	r3, r0
}
 8001e34:	4610      	mov	r0, r2
  ((EepromFileStream *)ip)->position = 0;
 8001e36:	e9c3 2201 	strd	r2, r2, [r3, #4]
  ((EepromFileStream *)ip)->vmt      = NULL;
 8001e3a:	601a      	str	r2, [r3, #0]
  ((EepromFileStream *)ip)->cfg      = NULL;
 8001e3c:	60da      	str	r2, [r3, #12]
}
 8001e3e:	4770      	bx	lr

08001e40 <eepfs_lseek>:
msg_t eepfs_lseek(void *ip, fileoffset_t offset) {
 8001e40:	b410      	push	{r4}
  h = ((EepromFileStream *)ip)->cfg->barrier_hi;
 8001e42:	68c4      	ldr	r4, [r0, #12]
msg_t eepfs_lseek(void *ip, fileoffset_t offset) {
 8001e44:	4602      	mov	r2, r0
  return  h - l;
 8001e46:	e9d4 0300 	ldrd	r0, r3, [r4]
 8001e4a:	1a18      	subs	r0, r3, r0
 8001e4c:	4288      	cmp	r0, r1
 8001e4e:	bf28      	it	cs
 8001e50:	4608      	movcs	r0, r1
}
 8001e52:	bc10      	pop	{r4}
  ((EepromFileStream *)ip)->position = offset;
 8001e54:	6090      	str	r0, [r2, #8]
}
 8001e56:	4770      	bx	lr
	...

08001e60 <eepfs_getsize>:
  h = ((EepromFileStream *)ip)->cfg->barrier_hi;
 8001e60:	68c3      	ldr	r3, [r0, #12]
  return  h - l;
 8001e62:	6858      	ldr	r0, [r3, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
}
 8001e66:	1ac0      	subs	r0, r0, r3
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	0000      	movs	r0, r0
	...

08001e70 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001e70:	2000      	movs	r0, #0
 8001e72:	4770      	bx	lr
	...

08001e80 <chSchWakeupS.constprop.0>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001e80:	b470      	push	{r4, r5, r6}
  ntp->u.rdymsg = msg;
 8001e82:	2600      	movs	r6, #0
  thread_t *otp = currp;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <chSchWakeupS.constprop.0+0x54>)
  if (ntp->prio <= otp->prio) {
 8001e86:	6884      	ldr	r4, [r0, #8]
  thread_t *otp = currp;
 8001e88:	6959      	ldr	r1, [r3, #20]
  ntp->u.rdymsg = msg;
 8001e8a:	6246      	str	r6, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8001e8c:	688d      	ldr	r5, [r1, #8]
 8001e8e:	42ac      	cmp	r4, r5
 8001e90:	d80c      	bhi.n	8001eac <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 8001e92:	f880 6020 	strb.w	r6, [r0, #32]
    cp = cp->queue.next;
 8001e96:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	4294      	cmp	r4, r2
 8001e9c:	d9fb      	bls.n	8001e96 <chSchWakeupS.constprop.0+0x16>
}
 8001e9e:	bc70      	pop	{r4, r5, r6}
  tp->queue.prev             = cp->queue.prev;
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001ea6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001ea8:	6058      	str	r0, [r3, #4]
}
 8001eaa:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
 8001eac:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8001eae:	f881 6020 	strb.w	r6, [r1, #32]
    cp = cp->queue.next;
 8001eb2:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8001eb4:	6894      	ldr	r4, [r2, #8]
 8001eb6:	42a5      	cmp	r5, r4
 8001eb8:	d3fb      	bcc.n	8001eb2 <chSchWakeupS.constprop.0+0x32>
    ntp->state = CH_STATE_CURRENT;
 8001eba:	2501      	movs	r5, #1
  tp->queue.prev             = cp->queue.prev;
 8001ebc:	6854      	ldr	r4, [r2, #4]
 8001ebe:	e9c1 2400 	strd	r2, r4, [r1]
  tp->queue.prev->queue.next = tp;
 8001ec2:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8001ec4:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8001ec6:	f880 5020 	strb.w	r5, [r0, #32]
}
 8001eca:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 8001ecc:	6158      	str	r0, [r3, #20]
    chSysSwitch(ntp, otp);
 8001ece:	f7fe b9b7 	b.w	8000240 <_port_switch>
 8001ed2:	bf00      	nop
 8001ed4:	20000e30 	.word	0x20000e30
	...

08001ee0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001ee0:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 8001ee2:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <chSchGoSleepS+0x24>)
 8001ee6:	6959      	ldr	r1, [r3, #20]
  thread_t *tp = tqp->next;
 8001ee8:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 8001eea:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8001eee:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8001ef0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8001ef2:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 8001ef4:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 8001ef8:	601c      	str	r4, [r3, #0]
}
 8001efa:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001efc:	615a      	str	r2, [r3, #20]
  chSysSwitch(currp, otp);
 8001efe:	f7fe b99f 	b.w	8000240 <_port_switch>
 8001f02:	bf00      	nop
 8001f04:	20000e30 	.word	0x20000e30
	...

08001f10 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001f12:	2320      	movs	r3, #32
 8001f14:	4605      	mov	r5, r0
 8001f16:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <chMtxLock+0xcc>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8001f1c:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8001f1e:	695c      	ldr	r4, [r3, #20]
  if (mp->owner != NULL) {
 8001f20:	b340      	cbz	r0, 8001f74 <chMtxLock+0x64>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8001f22:	68a2      	ldr	r2, [r4, #8]
 8001f24:	6883      	ldr	r3, [r0, #8]
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d207      	bcs.n	8001f3a <chMtxLock+0x2a>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001f2a:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8001f2e:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	d03a      	beq.n	8001faa <chMtxLock+0x9a>
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	d025      	beq.n	8001f84 <chMtxLock+0x74>
 8001f38:	b1ab      	cbz	r3, 8001f66 <chMtxLock+0x56>
  thread_t *cp = (thread_t *)tqp;
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	e003      	b.n	8001f46 <chMtxLock+0x36>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001f3e:	6899      	ldr	r1, [r3, #8]
 8001f40:	68a2      	ldr	r2, [r4, #8]
 8001f42:	4291      	cmp	r1, r2
 8001f44:	d302      	bcc.n	8001f4c <chMtxLock+0x3c>
    cp = cp->queue.next;
 8001f46:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001f48:	429d      	cmp	r5, r3
 8001f4a:	d1f8      	bne.n	8001f3e <chMtxLock+0x2e>
  tp->queue.prev             = cp->queue.prev;
 8001f4c:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001f4e:	2006      	movs	r0, #6
 8001f50:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8001f54:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001f56:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 8001f58:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8001f5a:	f7ff ffc1 	bl	8001ee0 <chSchGoSleepS>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f383 8811 	msr	BASEPRI, r3
}
 8001f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8001f66:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001f6a:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001f6c:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8001f6e:	f7ff fdff 	bl	8001b70 <chSchReadyI>
          break;
 8001f72:	e7e2      	b.n	8001f3a <chMtxLock+0x2a>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 8001f74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f76:	e9c5 4302 	strd	r4, r3, [r5, #8]
 8001f7a:	2300      	movs	r3, #0
    ctp->mtxlist = mp;
 8001f7c:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f7e:	f383 8811 	msr	BASEPRI, r3
}
 8001f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001f84:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.prev->queue.next = tp->queue.next;
 8001f86:	6847      	ldr	r7, [r0, #4]
 8001f88:	6801      	ldr	r1, [r0, #0]
  thread_t *cp = (thread_t *)tqp;
 8001f8a:	4633      	mov	r3, r6
  tp->queue.prev->queue.next = tp->queue.next;
 8001f8c:	6039      	str	r1, [r7, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001f8e:	604f      	str	r7, [r1, #4]
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 8001f90:	e002      	b.n	8001f98 <chMtxLock+0x88>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001f92:	6899      	ldr	r1, [r3, #8]
 8001f94:	4291      	cmp	r1, r2
 8001f96:	d302      	bcc.n	8001f9e <chMtxLock+0x8e>
    cp = cp->queue.next;
 8001f98:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001f9a:	429e      	cmp	r6, r3
 8001f9c:	d1f9      	bne.n	8001f92 <chMtxLock+0x82>
  tp->queue.prev             = cp->queue.prev;
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001fa4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001fa6:	6058      	str	r0, [r3, #4]
 8001fa8:	e7c7      	b.n	8001f3a <chMtxLock+0x2a>
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8001faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.prev->queue.next = tp->queue.next;
 8001fac:	6847      	ldr	r7, [r0, #4]
 8001fae:	6801      	ldr	r1, [r0, #0]
  thread_t *cp = (thread_t *)tqp;
 8001fb0:	4633      	mov	r3, r6
  tp->queue.prev->queue.next = tp->queue.next;
 8001fb2:	6039      	str	r1, [r7, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001fb4:	604f      	str	r7, [r1, #4]
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 8001fb6:	e002      	b.n	8001fbe <chMtxLock+0xae>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	4291      	cmp	r1, r2
 8001fbc:	d302      	bcc.n	8001fc4 <chMtxLock+0xb4>
    cp = cp->queue.next;
 8001fbe:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8001fc0:	429e      	cmp	r6, r3
 8001fc2:	d1f9      	bne.n	8001fb8 <chMtxLock+0xa8>
  tp->queue.prev             = cp->queue.prev;
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001fca:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001fcc:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8001fce:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8001fd0:	68a2      	ldr	r2, [r4, #8]
 8001fd2:	6883      	ldr	r3, [r0, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8a8      	bhi.n	8001f2a <chMtxLock+0x1a>
 8001fd8:	e7af      	b.n	8001f3a <chMtxLock+0x2a>
 8001fda:	bf00      	nop
 8001fdc:	20000e30 	.word	0x20000e30

08001fe0 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	4603      	mov	r3, r0
  thread_t *tp = currp;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <chThdExitS+0x44>)
 8001fe6:	6954      	ldr	r4, [r2, #20]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001fe8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001fea:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001fee:	42a8      	cmp	r0, r5
  tp->u.exitcode = msg;
 8001ff0:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001ff2:	d006      	beq.n	8002002 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8001ff4:	6803      	ldr	r3, [r0, #0]
 8001ff6:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001ff8:	f7ff fdba 	bl	8001b70 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001ffc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001ffe:	42a8      	cmp	r0, r5
 8002000:	d1f8      	bne.n	8001ff4 <chThdExitS+0x14>
  if ((tp->refs == (trefs_t)0) &&
 8002002:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002006:	b93b      	cbnz	r3, 8002018 <chThdExitS+0x38>
 8002008:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800200c:	079b      	lsls	r3, r3, #30
 800200e:	d103      	bne.n	8002018 <chThdExitS+0x38>
    REG_REMOVE(tp);
 8002010:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8002014:	60d3      	str	r3, [r2, #12]
 8002016:	611a      	str	r2, [r3, #16]
  chSchGoSleepS(CH_STATE_FINAL);
 8002018:	200f      	movs	r0, #15
}
 800201a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800201e:	f7ff bf5f 	b.w	8001ee0 <chSchGoSleepS>
 8002022:	bf00      	nop
 8002024:	20000e30 	.word	0x20000e30
	...

08002030 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (TIME_INFINITE != timeout) {
 8002034:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002036:	b086      	sub	sp, #24
  if (TIME_INFINITE != timeout) {
 8002038:	d053      	beq.n	80020e2 <chSchGoSleepTimeoutS+0xb2>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800203a:	4d4b      	ldr	r5, [pc, #300]	; (8002168 <chSchGoSleepTimeoutS+0x138>)
 800203c:	4607      	mov	r7, r0
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800203e:	462e      	mov	r6, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002040:	484a      	ldr	r0, [pc, #296]	; (800216c <chSchGoSleepTimeoutS+0x13c>)
 8002042:	f856 4f18 	ldr.w	r4, [r6, #24]!
 8002046:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002048:	2902      	cmp	r1, #2
  vtp->func = vtfunc;
 800204a:	f8df c124 	ldr.w	ip, [pc, #292]	; 8002170 <chSchGoSleepTimeoutS+0x140>
  vtp->par = par;
 800204e:	696b      	ldr	r3, [r5, #20]
 8002050:	bf38      	it	cc
 8002052:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002054:	42b4      	cmp	r4, r6
  vtp->par = par;
 8002056:	9305      	str	r3, [sp, #20]
 8002058:	b292      	uxth	r2, r2
  vtp->func = vtfunc;
 800205a:	f8cd c010 	str.w	ip, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800205e:	d067      	beq.n	8002130 <chSchGoSleepTimeoutS+0x100>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8002060:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002064:	eba2 020c 	sub.w	r2, r2, ip
 8002068:	b293      	uxth	r3, r2
 800206a:	18c9      	adds	r1, r1, r3

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 800206c:	68a3      	ldr	r3, [r4, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800206e:	d32c      	bcc.n	80020ca <chSchGoSleepTimeoutS+0x9a>
      p = p->next;
 8002070:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 8002072:	1ac9      	subs	r1, r1, r3
 8002074:	68a3      	ldr	r3, [r4, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8002076:	428b      	cmp	r3, r1
 8002078:	d3fa      	bcc.n	8002070 <chSchGoSleepTimeoutS+0x40>
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800207a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
 800207e:	6863      	ldr	r3, [r4, #4]
  vtp->prev->next = vtp;
 8002080:	f10d 0804 	add.w	r8, sp, #4
  vtp->prev = vtp->next->prev;
 8002084:	e9cd 4301 	strd	r4, r3, [sp, #4]
  vtp->prev->next = vtp;
 8002088:	f8c3 8000 	str.w	r8, [r3]
  p->prev = vtp;
 800208c:	f8c4 8004 	str.w	r8, [r4, #4]
  vtp->delta = delta;
 8002090:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
 8002092:	68a3      	ldr	r3, [r4, #8]
 8002094:	1a59      	subs	r1, r3, r1
 8002096:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002098:	622a      	str	r2, [r5, #32]
    chSchGoSleepS(newstate);
 800209a:	4638      	mov	r0, r7
 800209c:	f7ff ff20 	bl	8001ee0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80020a0:	9b04      	ldr	r3, [sp, #16]
 80020a2:	b16b      	cbz	r3, 80020c0 <chSchGoSleepTimeoutS+0x90>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80020a4:	69ab      	ldr	r3, [r5, #24]
 80020a6:	4543      	cmp	r3, r8
 80020a8:	d023      	beq.n	80020f2 <chSchGoSleepTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80020aa:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80020ae:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80020b0:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80020b2:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 80020b4:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80020b6:	d003      	beq.n	80020c0 <chSchGoSleepTimeoutS+0x90>
      vtp->next->delta += vtp->delta;
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	9903      	ldr	r1, [sp, #12]
 80020bc:	440a      	add	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 80020c0:	696b      	ldr	r3, [r5, #20]
}
 80020c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80020c4:	b006      	add	sp, #24
 80020c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (delta < p->delta) {
 80020ca:	4299      	cmp	r1, r3
 80020cc:	d2d3      	bcs.n	8002076 <chSchGoSleepTimeoutS+0x46>
  return systime + (systime_t)interval;
 80020ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d2:	4291      	cmp	r1, r2
 80020d4:	bf94      	ite	ls
 80020d6:	448c      	addls	ip, r1
 80020d8:	4494      	addhi	ip, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80020da:	fa1f f28c 	uxth.w	r2, ip
 80020de:	6342      	str	r2, [r0, #52]	; 0x34
 80020e0:	e7c9      	b.n	8002076 <chSchGoSleepTimeoutS+0x46>
    chSchGoSleepS(newstate);
 80020e2:	f7ff fefd 	bl	8001ee0 <chSchGoSleepS>
 80020e6:	4d20      	ldr	r5, [pc, #128]	; (8002168 <chSchGoSleepTimeoutS+0x138>)
  return currp->u.rdymsg;
 80020e8:	696b      	ldr	r3, [r5, #20]
}
 80020ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80020ec:	b006      	add	sp, #24
 80020ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80020f2:	2300      	movs	r3, #0
  ch.vtlist.next = vtp->next;
 80020f4:	9a01      	ldr	r2, [sp, #4]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80020f6:	42b2      	cmp	r2, r6
  ch.vtlist.next = vtp->next;
 80020f8:	61aa      	str	r2, [r5, #24]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80020fa:	6056      	str	r6, [r2, #4]
  vtp->func = NULL;
 80020fc:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80020fe:	d030      	beq.n	8002162 <chSchGoSleepTimeoutS+0x132>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8002100:	6893      	ldr	r3, [r2, #8]
 8002102:	9803      	ldr	r0, [sp, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8002104:	4919      	ldr	r1, [pc, #100]	; (800216c <chSchGoSleepTimeoutS+0x13c>)
 8002106:	4403      	add	r3, r0
 8002108:	6093      	str	r3, [r2, #8]
 800210a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800210c:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8002112:	4293      	cmp	r3, r2
 8002114:	d9d4      	bls.n	80020c0 <chSchGoSleepTimeoutS+0x90>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8002116:	1a98      	subs	r0, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002118:	2801      	cmp	r0, #1
 800211a:	d920      	bls.n	800215e <chSchGoSleepTimeoutS+0x12e>
  }
  else {
    delta = nowdelta + delta;
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
    /* The delta could be too large for the physical timer to handle.*/
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	4293      	cmp	r3, r2
 8002122:	bf28      	it	cs
 8002124:	4613      	movcs	r3, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002126:	4a11      	ldr	r2, [pc, #68]	; (800216c <chSchGoSleepTimeoutS+0x13c>)
  return systime + (systime_t)interval;
 8002128:	440b      	add	r3, r1
 800212a:	b29b      	uxth	r3, r3
 800212c:	6353      	str	r3, [r2, #52]	; 0x34
 800212e:	e7c7      	b.n	80020c0 <chSchGoSleepTimeoutS+0x90>
 8002130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002134:	4299      	cmp	r1, r3
 8002136:	bf94      	ite	ls
 8002138:	1853      	addls	r3, r2, r1
 800213a:	18d3      	addhi	r3, r2, r3
  STM32_ST_TIM->SR     = 0;
 800213c:	f04f 0c00 	mov.w	ip, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002140:	2402      	movs	r4, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002142:	b29b      	uxth	r3, r3
      ch.vtlist.next = vtp;
 8002144:	f10d 0804 	add.w	r8, sp, #4
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8002148:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 800214c:	e9c5 8806 	strd	r8, r8, [r5, #24]
      ch.vtlist.lasttime = now;
 8002150:	84aa      	strh	r2, [r5, #36]	; 0x24
      vtp->delta = delay;
 8002152:	9103      	str	r1, [sp, #12]
 8002154:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8002156:	f8c0 c010 	str.w	ip, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800215a:	60c4      	str	r4, [r0, #12]
 800215c:	e79d      	b.n	800209a <chSchGoSleepTimeoutS+0x6a>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800215e:	1c93      	adds	r3, r2, #2
 8002160:	e7e1      	b.n	8002126 <chSchGoSleepTimeoutS+0xf6>
  STM32_ST_TIM->DIER = 0U;
 8002162:	4a02      	ldr	r2, [pc, #8]	; (800216c <chSchGoSleepTimeoutS+0x13c>)
 8002164:	60d3      	str	r3, [r2, #12]
    return;
 8002166:	e7ab      	b.n	80020c0 <chSchGoSleepTimeoutS+0x90>
 8002168:	20000e30 	.word	0x20000e30
 800216c:	40000400 	.word	0x40000400
 8002170:	08001b01 	.word	0x08001b01
	...

08002180 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8002180:	b161      	cbz	r1, 800219c <chThdEnqueueTimeoutS+0x1c>
 8002182:	4603      	mov	r3, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002186:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8002188:	6952      	ldr	r2, [r2, #20]
  tp->queue.prev             = tqp->prev;
 800218a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800218c:	2004      	movs	r0, #4
 800218e:	e9c2 3400 	strd	r3, r4, [r2]
  tp->queue.prev->queue.next = tp;
 8002192:	6022      	str	r2, [r4, #0]
}
 8002194:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8002196:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002198:	f7ff bf4a 	b.w	8002030 <chSchGoSleepTimeoutS>
}
 800219c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000e30 	.word	0x20000e30
	...

080021b0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	4604      	mov	r4, r0
 80021b4:	460f      	mov	r7, r1
 80021b6:	4616      	mov	r6, r2
 80021b8:	2320      	movs	r3, #32
 80021ba:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80021be:	e005      	b.n	80021cc <oqPutTimeout+0x1c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80021c0:	4631      	mov	r1, r6
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ffdc 	bl	8002180 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80021c8:	2800      	cmp	r0, #0
 80021ca:	db17      	blt.n	80021fc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 80021cc:	68a5      	ldr	r5, [r4, #8]
 80021ce:	2d00      	cmp	r5, #0
 80021d0:	d0f6      	beq.n	80021c0 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80021d2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80021d4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80021d6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80021d8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80021da:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80021dc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80021de:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80021e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80021e4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80021e6:	bf24      	itt	cs
 80021e8:	68e3      	ldrcs	r3, [r4, #12]
 80021ea:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80021ec:	69e3      	ldr	r3, [r4, #28]
 80021ee:	b10b      	cbz	r3, 80021f4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 80021f0:	4620      	mov	r0, r4
 80021f2:	4798      	blx	r3
 80021f4:	2000      	movs	r0, #0
 80021f6:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80021fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fc:	f385 8811 	msr	BASEPRI, r5
 8002200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002202:	bf00      	nop
	...

08002210 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002210:	3030      	adds	r0, #48	; 0x30
 8002212:	f7ff bfcd 	b.w	80021b0 <oqPutTimeout>
 8002216:	bf00      	nop
	...

08002220 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002224:	3030      	adds	r0, #48	; 0x30
 8002226:	f7ff bfc3 	b.w	80021b0 <oqPutTimeout>
 800222a:	bf00      	nop
 800222c:	0000      	movs	r0, r0
	...

08002230 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	2320      	movs	r3, #32
 8002234:	4605      	mov	r5, r0
 8002236:	460e      	mov	r6, r1
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	e005      	b.n	800224a <iqGetTimeout+0x1a>
 800223e:	4631      	mov	r1, r6
 8002240:	4628      	mov	r0, r5
 8002242:	f7ff ff9d 	bl	8002180 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002246:	2800      	cmp	r0, #0
 8002248:	db18      	blt.n	800227c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 800224a:	68ac      	ldr	r4, [r5, #8]
 800224c:	2c00      	cmp	r4, #0
 800224e:	d0f6      	beq.n	800223e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8002250:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8002252:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002254:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8002256:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8002258:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800225a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800225c:	60ab      	str	r3, [r5, #8]
    iqp->q_rdptr = iqp->q_buffer;
 800225e:	bf28      	it	cs
 8002260:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8002262:	61aa      	str	r2, [r5, #24]
 8002264:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002266:	bf28      	it	cs
 8002268:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 800226a:	69eb      	ldr	r3, [r5, #28]
 800226c:	b10b      	cbz	r3, 8002272 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800226e:	4628      	mov	r0, r5
 8002270:	4798      	blx	r3
 8002272:	2300      	movs	r3, #0
 8002274:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002278:	4620      	mov	r0, r4
}
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	f384 8811 	msr	BASEPRI, r4
 8002280:	bd70      	pop	{r4, r5, r6, pc}
 8002282:	bf00      	nop
	...

08002290 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002290:	300c      	adds	r0, #12
 8002292:	f7ff bfcd 	b.w	8002230 <iqGetTimeout>
 8002296:	bf00      	nop
	...

080022a0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022a4:	300c      	adds	r0, #12
 80022a6:	f7ff bfc3 	b.w	8002230 <iqGetTimeout>
 80022aa:	bf00      	nop
 80022ac:	0000      	movs	r0, r0
	...

080022b0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80022b0:	b508      	push	{r3, lr}
 80022b2:	4601      	mov	r1, r0
 80022b4:	2320      	movs	r3, #32
 80022b6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80022ba:	2008      	movs	r0, #8
 80022bc:	f7ff feb8 	bl	8002030 <chSchGoSleepTimeoutS>
 80022c0:	2300      	movs	r3, #0
 80022c2:	f383 8811 	msr	BASEPRI, r3
}
 80022c6:	bd08      	pop	{r3, pc}
	...

080022d0 <Thread1>:
    speed_in = 0;
 80022d0:	f04f 0a00 	mov.w	sl, #0
static THD_FUNCTION(Thread1, arg) {
 80022d4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <Thread1+0x78>)
 80022da:	4a1c      	ldr	r2, [pc, #112]	; (800234c <Thread1+0x7c>)
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	4c1c      	ldr	r4, [pc, #112]	; (8002350 <Thread1+0x80>)
 80022e0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002364 <Thread1+0x94>
 80022e4:	4e1b      	ldr	r6, [pc, #108]	; (8002354 <Thread1+0x84>)
 80022e6:	4d1c      	ldr	r5, [pc, #112]	; (8002358 <Thread1+0x88>)
 80022e8:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8002368 <Thread1+0x98>
          palTogglePad(GPIOB, GPIOB_LED);
 80022ec:	4f1b      	ldr	r7, [pc, #108]	; (800235c <Thread1+0x8c>)
    temp = 2*ICPCLKFREQ / temp;
 80022ee:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800236c <Thread1+0x9c>
 80022f2:	619a      	str	r2, [r3, #24]
      cnt++;
 80022f4:	8823      	ldrh	r3, [r4, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b29b      	uxth	r3, r3
      if (cnt >= 5){
 80022fa:	2b04      	cmp	r3, #4
      cnt++;
 80022fc:	8023      	strh	r3, [r4, #0]
      if (cnt >= 5){
 80022fe:	d905      	bls.n	800230c <Thread1+0x3c>
          cnt = 0;
 8002300:	2200      	movs	r2, #0
          palTogglePad(GPIOB, GPIOB_LED);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f083 0302 	eor.w	r3, r3, #2
 8002308:	60fb      	str	r3, [r7, #12]
          cnt = 0;
 800230a:	8022      	strh	r2, [r4, #0]
      if (f_enable > 0){
 800230c:	f8b8 3000 	ldrh.w	r3, [r8]
 8002310:	b1b3      	cbz	r3, 8002340 <Thread1+0x70>
    temp = speed_in / cnt; //averaging
 8002312:	8828      	ldrh	r0, [r5, #0]
 8002314:	f7fe fdf6 	bl	8000f04 <__aeabi_i2f>
 8002318:	4601      	mov	r1, r0
 800231a:	6830      	ldr	r0, [r6, #0]
 800231c:	f7fe fefa 	bl	8001114 <__aeabi_fdiv>
    cnt = 0;
 8002320:	2300      	movs	r3, #0
    temp *= cudata.configstruct.fs_corr;  //conversion from frequency to real speed
 8002322:	f8db 1084 	ldr.w	r1, [fp, #132]	; 0x84
    cnt = 0;
 8002326:	802b      	strh	r3, [r5, #0]
    speed_in = 0;
 8002328:	f8c6 a000 	str.w	sl, [r6]
    temp *= cudata.configstruct.fs_corr;  //conversion from frequency to real speed
 800232c:	f7fe fe3e 	bl	8000fac <__aeabi_fmul>
 8002330:	4601      	mov	r1, r0
    temp = 2*ICPCLKFREQ / temp;
 8002332:	4648      	mov	r0, r9
 8002334:	f7fe feee 	bl	8001114 <__aeabi_fdiv>
    real_freq = (uint16_t)temp;
 8002338:	f7fe fffe 	bl	8001338 <__aeabi_f2uiz>
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <Thread1+0x90>)
 800233e:	8018      	strh	r0, [r3, #0]
      chThdSleepMilliseconds(100);
 8002340:	20c8      	movs	r0, #200	; 0xc8
 8002342:	f7ff ffb5 	bl	80022b0 <chThdSleep>
  while (true) {
 8002346:	e7d5      	b.n	80022f4 <Thread1+0x24>
 8002348:	20000e30 	.word	0x20000e30
 800234c:	08006224 	.word	0x08006224
 8002350:	20000fd2 	.word	0x20000fd2
 8002354:	20001278 	.word	0x20001278
 8002358:	20000fd0 	.word	0x20000fd0
 800235c:	40010c00 	.word	0x40010c00
 8002360:	2000126c 	.word	0x2000126c
 8002364:	2000089c 	.word	0x2000089c
 8002368:	20000800 	.word	0x20000800
 800236c:	4c095440 	.word	0x4c095440

08002370 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
 8002370:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8002374:	2400      	movs	r4, #0

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8002376:	0049      	lsls	r1, r1, #1
 8002378:	8401      	strh	r1, [r0, #32]
                                      sysinterval_t timeout) {
 800237a:	4605      	mov	r5, r0
 800237c:	4691      	mov	r9, r2
 800237e:	461f      	mov	r7, r3
  I2C_TypeDef *dp = i2cp->i2c;
 8002380:	6b41      	ldr	r1, [r0, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 8002382:	6084      	str	r4, [r0, #8]
 8002384:	f384 8811 	msr	BASEPRI, r4

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002388:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800238a:	e9d5 2e0a 	ldrd	r2, lr, [r5, #40]	; 0x28
 800238e:	685b      	ldr	r3, [r3, #4]
  return (systime_t)STM32_ST_TIM->CNT;
 8002390:	4e33      	ldr	r6, [pc, #204]	; (8002460 <i2c_lld_master_transmit_timeout+0xf0>)
 8002392:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002394:	f8de 2004 	ldr.w	r2, [lr, #4]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8002398:	f8c3 900c 	str.w	r9, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 800239c:	605f      	str	r7, [r3, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800239e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023a0:	46b4      	mov	ip, r6
 80023a2:	6013      	str	r3, [r2, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80023a4:	9b06      	ldr	r3, [sp, #24]
 80023a6:	2020      	movs	r0, #32
 80023a8:	60d3      	str	r3, [r2, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80023aa:	9b07      	ldr	r3, [sp, #28]
 80023ac:	6053      	str	r3, [r2, #4]
 80023ae:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80023b0:	b292      	uxth	r2, r2
 80023b2:	e001      	b.n	80023b8 <i2c_lld_master_transmit_timeout+0x48>
 80023b4:	f384 8811 	msr	BASEPRI, r4
 80023b8:	f380 8811 	msr	BASEPRI, r0
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80023bc:	698b      	ldr	r3, [r1, #24]
 80023be:	079e      	lsls	r6, r3, #30
 80023c0:	d402      	bmi.n	80023c8 <i2c_lld_master_transmit_timeout+0x58>
 80023c2:	680b      	ldr	r3, [r1, #0]
 80023c4:	059b      	lsls	r3, r3, #22
 80023c6:	d51f      	bpl.n	8002408 <i2c_lld_master_transmit_timeout+0x98>
 80023c8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80023cc:	1a9b      	subs	r3, r3, r2
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b63      	cmp	r3, #99	; 0x63
 80023d2:	d9ef      	bls.n	80023b4 <i2c_lld_master_transmit_timeout+0x44>
      dmaStreamDisable(i2cp->dmatx);
 80023d4:	230e      	movs	r3, #14
      dmaStreamDisable(i2cp->dmarx);
 80023d6:	e9d5 210b 	ldrd	r2, r1, [r5, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 80023da:	e9d1 5400 	ldrd	r5, r4, [r1]
 80023de:	6820      	ldr	r0, [r4, #0]
 80023e0:	f020 000f 	bic.w	r0, r0, #15
 80023e4:	6020      	str	r0, [r4, #0]
 80023e6:	7b49      	ldrb	r1, [r1, #13]
      dmaStreamDisable(i2cp->dmarx);
 80023e8:	6850      	ldr	r0, [r2, #4]
      dmaStreamDisable(i2cp->dmatx);
 80023ea:	fa03 f101 	lsl.w	r1, r3, r1
 80023ee:	6069      	str	r1, [r5, #4]
      dmaStreamDisable(i2cp->dmarx);
 80023f0:	6801      	ldr	r1, [r0, #0]
 80023f2:	6814      	ldr	r4, [r2, #0]
 80023f4:	f021 010f 	bic.w	r1, r1, #15
 80023f8:	6001      	str	r1, [r0, #0]
      return MSG_TIMEOUT;
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      dmaStreamDisable(i2cp->dmarx);
 80023fe:	7b52      	ldrb	r2, [r2, #13]
 8002400:	4093      	lsls	r3, r2
 8002402:	6063      	str	r3, [r4, #4]
    dmaStreamDisable(i2cp->dmatx);
    dmaStreamDisable(i2cp->dmarx);
  }

  return msg;
}
 8002404:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  *trp = tp;
 8002408:	462b      	mov	r3, r5
  dp->CR2 |= I2C_CR2_ITEVTEN;
 800240a:	684a      	ldr	r2, [r1, #4]
  return ch.rlist.current;
 800240c:	4815      	ldr	r0, [pc, #84]	; (8002464 <i2c_lld_master_transmit_timeout+0xf4>)
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	604a      	str	r2, [r1, #4]
  dp->CR1 |= I2C_CR1_START;
 8002414:	680a      	ldr	r2, [r1, #0]
 8002416:	6940      	ldr	r0, [r0, #20]
 8002418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241c:	600a      	str	r2, [r1, #0]
 800241e:	f843 0f1c 	str.w	r0, [r3, #28]!
  tp->u.wttrp = trp;
 8002422:	6243      	str	r3, [r0, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002424:	9908      	ldr	r1, [sp, #32]
 8002426:	2003      	movs	r0, #3
 8002428:	f7ff fe02 	bl	8002030 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800242c:	2800      	cmp	r0, #0
 800242e:	d0e9      	beq.n	8002404 <i2c_lld_master_transmit_timeout+0x94>
    dmaStreamDisable(i2cp->dmarx);
 8002430:	e9d5 240b 	ldrd	r2, r4, [r5, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 8002434:	230e      	movs	r3, #14
 8002436:	6865      	ldr	r5, [r4, #4]
 8002438:	6829      	ldr	r1, [r5, #0]
 800243a:	f021 010f 	bic.w	r1, r1, #15
 800243e:	6029      	str	r1, [r5, #0]
 8002440:	7b61      	ldrb	r1, [r4, #13]
 8002442:	6825      	ldr	r5, [r4, #0]
 8002444:	fa03 f101 	lsl.w	r1, r3, r1
    dmaStreamDisable(i2cp->dmarx);
 8002448:	6854      	ldr	r4, [r2, #4]
    dmaStreamDisable(i2cp->dmatx);
 800244a:	6069      	str	r1, [r5, #4]
    dmaStreamDisable(i2cp->dmarx);
 800244c:	6821      	ldr	r1, [r4, #0]
 800244e:	6815      	ldr	r5, [r2, #0]
 8002450:	f021 010f 	bic.w	r1, r1, #15
 8002454:	6021      	str	r1, [r4, #0]
 8002456:	7b52      	ldrb	r2, [r2, #13]
 8002458:	4093      	lsls	r3, r2
 800245a:	606b      	str	r3, [r5, #4]
}
 800245c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8002460:	40000400 	.word	0x40000400
 8002464:	20000e30 	.word	0x20000e30
	...

08002470 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 8002470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 8002474:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 8002478:	42b4      	cmp	r4, r6
static int get_history(ShellHistory *shp, char *line, int dir) {
 800247a:	4607      	mov	r7, r0
 800247c:	4688      	mov	r8, r1
  while (idx != shp->sh_end) {
 800247e:	d051      	beq.n	8002524 <get_history+0xb4>
    idx += *(shp->sh_buffer + idx) + 1;
    if (idx >= shp->sh_size)
 8002480:	e9d0 c000 	ldrd	ip, r0, [r0]
 8002484:	4623      	mov	r3, r4
  int count=0;
 8002486:	2100      	movs	r1, #0
    idx += *(shp->sh_buffer + idx) + 1;
 8002488:	f81c 5003 	ldrb.w	r5, [ip, r3]
      idx -= shp->sh_size;
    count++;
 800248c:	3101      	adds	r1, #1
    idx += *(shp->sh_buffer + idx) + 1;
 800248e:	3501      	adds	r5, #1
 8002490:	442b      	add	r3, r5
    if (idx >= shp->sh_size)
 8002492:	4298      	cmp	r0, r3
      idx -= shp->sh_size;
 8002494:	bfd8      	it	le
 8002496:	1a1b      	suble	r3, r3, r0
  while (idx != shp->sh_end) {
 8002498:	42b3      	cmp	r3, r6
 800249a:	d1f5      	bne.n	8002488 <get_history+0x18>
  }

  if (dir == SHELL_HIST_DIR_FW) {
 800249c:	2a01      	cmp	r2, #1
    if (shp->sh_cur > 0)
 800249e:	693d      	ldr	r5, [r7, #16]
  if (dir == SHELL_HIST_DIR_FW) {
 80024a0:	d03b      	beq.n	800251a <get_history+0xaa>
      shp->sh_cur -= 2;
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 80024a2:	42a9      	cmp	r1, r5
 80024a4:	db52      	blt.n	800254c <get_history+0xdc>
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80024a6:	42b4      	cmp	r4, r6
 80024a8:	d053      	beq.n	8002552 <get_history+0xe2>
 80024aa:	1e4b      	subs	r3, r1, #1
 80024ac:	429d      	cmp	r5, r3
 80024ae:	d053      	beq.n	8002558 <get_history+0xe8>
      idx += *(shp->sh_buffer + idx) + 1;
      if (idx >= shp->sh_size)
 80024b0:	e9d7 ec00 	ldrd	lr, ip, [r7]
    int i = 0;
 80024b4:	2000      	movs	r0, #0
 80024b6:	e003      	b.n	80024c0 <get_history+0x50>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80024b8:	43c3      	mvns	r3, r0
 80024ba:	440b      	add	r3, r1
 80024bc:	429d      	cmp	r5, r3
 80024be:	d014      	beq.n	80024ea <get_history+0x7a>
      idx += *(shp->sh_buffer + idx) + 1;
 80024c0:	f81e 3004 	ldrb.w	r3, [lr, r4]
        idx -= shp->sh_size;
      i++;
 80024c4:	3001      	adds	r0, #1
      idx += *(shp->sh_buffer + idx) + 1;
 80024c6:	3301      	adds	r3, #1
 80024c8:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 80024ca:	45a4      	cmp	ip, r4
        idx -= shp->sh_size;
 80024cc:	bfd8      	it	le
 80024ce:	eba4 040c 	suble.w	r4, r4, ip
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80024d2:	42b4      	cmp	r4, r6
 80024d4:	d1f0      	bne.n	80024b8 <get_history+0x48>
    }

    int length = *(shp->sh_buffer + idx);
 80024d6:	f81e 4006 	ldrb.w	r4, [lr, r6]

    if (length > 0) {
 80024da:	b95c      	cbnz	r4, 80024f4 <get_history+0x84>
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
      }
      return length;
    }
    else if (dir == SHELL_HIST_DIR_FW) {
 80024dc:	2a01      	cmp	r2, #1
 80024de:	d135      	bne.n	800254c <get_history+0xdc>
      shp->sh_cur++;
 80024e0:	3501      	adds	r5, #1
 80024e2:	613d      	str	r5, [r7, #16]
      return 0;
    }
  }
  return -1;
}
 80024e4:	4620      	mov	r0, r4
 80024e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80024ea:	4626      	mov	r6, r4
    int length = *(shp->sh_buffer + idx);
 80024ec:	f81e 4006 	ldrb.w	r4, [lr, r6]
    if (length > 0) {
 80024f0:	2c00      	cmp	r4, #0
 80024f2:	d0f3      	beq.n	80024dc <get_history+0x6c>
      shp->sh_cur++;
 80024f4:	3501      	adds	r5, #1
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 80024f6:	2240      	movs	r2, #64	; 0x40
 80024f8:	2100      	movs	r1, #0
 80024fa:	4640      	mov	r0, r8
      shp->sh_cur++;
 80024fc:	613d      	str	r5, [r7, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 80024fe:	f003 fd61 	bl	8005fc4 <memset>
      if ((idx + length) < shp->sh_size) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	19a2      	adds	r2, r4, r6
 8002506:	429a      	cmp	r2, r3
 8002508:	da10      	bge.n	800252c <get_history+0xbc>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	3601      	adds	r6, #1
 800250e:	4640      	mov	r0, r8
 8002510:	4622      	mov	r2, r4
 8002512:	4431      	add	r1, r6
 8002514:	f7fd feaa 	bl	800026c <memcpy>
 8002518:	e7e4      	b.n	80024e4 <get_history+0x74>
    if (shp->sh_cur > 0)
 800251a:	2d00      	cmp	r5, #0
 800251c:	dd04      	ble.n	8002528 <get_history+0xb8>
      shp->sh_cur -= 2;
 800251e:	3d02      	subs	r5, #2
 8002520:	613d      	str	r5, [r7, #16]
 8002522:	e7be      	b.n	80024a2 <get_history+0x32>
  int count=0;
 8002524:	2100      	movs	r1, #0
 8002526:	e7b9      	b.n	800249c <get_history+0x2c>
      return 0;
 8002528:	2400      	movs	r4, #0
 800252a:	e7db      	b.n	80024e4 <get_history+0x74>
        int part_len = shp->sh_size - idx - 1;
 800252c:	1b9b      	subs	r3, r3, r6
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 800252e:	6839      	ldr	r1, [r7, #0]
        int part_len = shp->sh_size - idx - 1;
 8002530:	1e5d      	subs	r5, r3, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8002532:	3601      	adds	r6, #1
 8002534:	462a      	mov	r2, r5
 8002536:	4431      	add	r1, r6
 8002538:	4640      	mov	r0, r8
 800253a:	f7fd fe97 	bl	800026c <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	eb08 0005 	add.w	r0, r8, r5
 8002544:	1b62      	subs	r2, r4, r5
 8002546:	f7fd fe91 	bl	800026c <memcpy>
 800254a:	e7cb      	b.n	80024e4 <get_history+0x74>
  return -1;
 800254c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002550:	e7c8      	b.n	80024e4 <get_history+0x74>
 8002552:	f8d7 e000 	ldr.w	lr, [r7]
 8002556:	e7be      	b.n	80024d6 <get_history+0x66>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8002558:	4626      	mov	r6, r4
 800255a:	f8d7 e000 	ldr.w	lr, [r7]
 800255e:	e7ba      	b.n	80024d6 <get_history+0x66>

08002560 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	b085      	sub	sp, #20
 8002566:	f04f 0920 	mov.w	r9, #32
 800256a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800256e:	69c7      	ldr	r7, [r0, #28]
 8002570:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002574:	b3aa      	cbz	r2, 80025e2 <oqWriteTimeout+0x82>
 8002576:	4604      	mov	r4, r0
 8002578:	460e      	mov	r6, r1
 800257a:	f04f 0a00 	mov.w	sl, #0
 800257e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > oqGetEmptyI(oqp)) {
 8002582:	68a2      	ldr	r2, [r4, #8]
 8002584:	4593      	cmp	fp, r2
 8002586:	bf98      	it	ls
 8002588:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800258a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800258e:	bf88      	it	hi
 8002590:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002592:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002596:	45a8      	cmp	r8, r5
 8002598:	d844      	bhi.n	8002624 <oqWriteTimeout+0xc4>
  else if (n > s1) {
 800259a:	d229      	bcs.n	80025f0 <oqWriteTimeout+0x90>
    s2 = n - s1;
 800259c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80025a0:	4642      	mov	r2, r8
 80025a2:	4631      	mov	r1, r6
    s2 = n - s1;
 80025a4:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80025a6:	f7fd fe61 	bl	800026c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80025aa:	eb06 0108 	add.w	r1, r6, r8
 80025ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80025b2:	68e0      	ldr	r0, [r4, #12]
 80025b4:	4642      	mov	r2, r8
 80025b6:	f7fd fe59 	bl	800026c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80025ba:	4643      	mov	r3, r8
  oqp->q_counter -= n;
 80025bc:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80025be:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 80025c0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80025c2:	18cb      	adds	r3, r1, r3
 80025c4:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80025c6:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80025c8:	b10f      	cbz	r7, 80025ce <oqWriteTimeout+0x6e>
        nfy(oqp);
 80025ca:	4620      	mov	r0, r4
 80025cc:	47b8      	blx	r7
 80025ce:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80025d2:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80025d6:	442e      	add	r6, r5
 80025d8:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80025dc:	f1bb 0f00 	cmp.w	fp, #0
 80025e0:	d1cf      	bne.n	8002582 <oqWriteTimeout+0x22>
 80025e2:	2300      	movs	r3, #0
  if (n > oqGetEmptyI(oqp)) {
 80025e4:	9803      	ldr	r0, [sp, #12]
 80025e6:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80025ea:	b005      	add	sp, #20
 80025ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80025f0:	462a      	mov	r2, r5
 80025f2:	4631      	mov	r1, r6
 80025f4:	f7fd fe3a 	bl	800026c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80025f8:	68e2      	ldr	r2, [r4, #12]
 80025fa:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80025fc:	68a2      	ldr	r2, [r4, #8]
 80025fe:	1b52      	subs	r2, r2, r5
 8002600:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002602:	2d00      	cmp	r5, #0
 8002604:	d1e0      	bne.n	80025c8 <oqWriteTimeout+0x68>
 8002606:	4620      	mov	r0, r4
 8002608:	9902      	ldr	r1, [sp, #8]
 800260a:	f7ff fdb9 	bl	8002180 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800260e:	2800      	cmp	r0, #0
 8002610:	d0b7      	beq.n	8002582 <oqWriteTimeout+0x22>
 8002612:	9b03      	ldr	r3, [sp, #12]
 8002614:	eba3 000b 	sub.w	r0, r3, fp
 8002618:	2300      	movs	r3, #0
 800261a:	f383 8811 	msr	BASEPRI, r3
}
 800261e:	b005      	add	sp, #20
 8002620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002624:	462a      	mov	r2, r5
 8002626:	4631      	mov	r1, r6
 8002628:	f7fd fe20 	bl	800026c <memcpy>
    oqp->q_wrptr += n;
 800262c:	6962      	ldr	r2, [r4, #20]
 800262e:	442a      	add	r2, r5
 8002630:	6162      	str	r2, [r4, #20]
 8002632:	e7e3      	b.n	80025fc <oqWriteTimeout+0x9c>
	...

08002640 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002640:	3030      	adds	r0, #48	; 0x30
 8002642:	f7ff bf8d 	b.w	8002560 <oqWriteTimeout>
 8002646:	bf00      	nop
	...

08002650 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002654:	3030      	adds	r0, #48	; 0x30
 8002656:	f7ff bf83 	b.w	8002560 <oqWriteTimeout>
 800265a:	bf00      	nop
 800265c:	0000      	movs	r0, r0
	...

08002660 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002664:	b085      	sub	sp, #20
 8002666:	f04f 0920 	mov.w	r9, #32
 800266a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800266e:	69c7      	ldr	r7, [r0, #28]
 8002670:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002674:	2a00      	cmp	r2, #0
 8002676:	d035      	beq.n	80026e4 <iqReadTimeout+0x84>
 8002678:	4604      	mov	r4, r0
 800267a:	460e      	mov	r6, r1
 800267c:	f04f 0a00 	mov.w	sl, #0
 8002680:	f8dd b00c 	ldr.w	fp, [sp, #12]
  if (n > iqGetFullI(iqp)) {
 8002684:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002686:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002688:	4593      	cmp	fp, r2
 800268a:	bf98      	it	ls
 800268c:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800268e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8002690:	bf88      	it	hi
 8002692:	68a5      	ldrhi	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002694:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002698:	45a8      	cmp	r8, r5
 800269a:	d844      	bhi.n	8002726 <iqReadTimeout+0xc6>
  else if (n > s1) {
 800269c:	d229      	bcs.n	80026f2 <iqReadTimeout+0x92>
    s2 = n - s1;
 800269e:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80026a2:	4642      	mov	r2, r8
 80026a4:	4630      	mov	r0, r6
    s2 = n - s1;
 80026a6:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80026a8:	f7fd fde0 	bl	800026c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80026ac:	eb06 0008 	add.w	r0, r6, r8
 80026b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80026b4:	68e1      	ldr	r1, [r4, #12]
 80026b6:	4642      	mov	r2, r8
 80026b8:	f7fd fdd8 	bl	800026c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80026bc:	4643      	mov	r3, r8
  iqp->q_counter -= n;
 80026be:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80026c0:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 80026c2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 80026c4:	18cb      	adds	r3, r1, r3
 80026c6:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80026c8:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 80026ca:	b10f      	cbz	r7, 80026d0 <iqReadTimeout+0x70>
        nfy(iqp);
 80026cc:	4620      	mov	r0, r4
 80026ce:	47b8      	blx	r7
 80026d0:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 80026d4:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80026d8:	442e      	add	r6, r5
 80026da:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80026de:	f1bb 0f00 	cmp.w	fp, #0
 80026e2:	d1cf      	bne.n	8002684 <iqReadTimeout+0x24>
 80026e4:	2300      	movs	r3, #0
  if (n > iqGetFullI(iqp)) {
 80026e6:	9803      	ldr	r0, [sp, #12]
 80026e8:	f383 8811 	msr	BASEPRI, r3
}
 80026ec:	b005      	add	sp, #20
 80026ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80026f2:	462a      	mov	r2, r5
 80026f4:	4630      	mov	r0, r6
 80026f6:	f7fd fdb9 	bl	800026c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80026fa:	68e2      	ldr	r2, [r4, #12]
 80026fc:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80026fe:	68a2      	ldr	r2, [r4, #8]
 8002700:	1b52      	subs	r2, r2, r5
 8002702:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002704:	2d00      	cmp	r5, #0
 8002706:	d1e0      	bne.n	80026ca <iqReadTimeout+0x6a>
 8002708:	4620      	mov	r0, r4
 800270a:	9902      	ldr	r1, [sp, #8]
 800270c:	f7ff fd38 	bl	8002180 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002710:	2800      	cmp	r0, #0
 8002712:	d0b7      	beq.n	8002684 <iqReadTimeout+0x24>
 8002714:	9b03      	ldr	r3, [sp, #12]
 8002716:	eba3 000b 	sub.w	r0, r3, fp
 800271a:	2300      	movs	r3, #0
 800271c:	f383 8811 	msr	BASEPRI, r3
}
 8002720:	b005      	add	sp, #20
 8002722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002726:	462a      	mov	r2, r5
 8002728:	4630      	mov	r0, r6
 800272a:	f7fd fd9f 	bl	800026c <memcpy>
    iqp->q_rdptr += n;
 800272e:	69a2      	ldr	r2, [r4, #24]
 8002730:	442a      	add	r2, r5
 8002732:	61a2      	str	r2, [r4, #24]
 8002734:	e7e3      	b.n	80026fe <iqReadTimeout+0x9e>
 8002736:	bf00      	nop
	...

08002740 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002740:	300c      	adds	r0, #12
 8002742:	f7ff bf8d 	b.w	8002660 <iqReadTimeout>
 8002746:	bf00      	nop
	...

08002750 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002754:	300c      	adds	r0, #12
 8002756:	f7ff bf83 	b.w	8002660 <iqReadTimeout>
 800275a:	bf00      	nop
 800275c:	0000      	movs	r0, r0
	...

08002760 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 8002760:	b538      	push	{r3, r4, r5, lr}
 8002762:	460d      	mov	r5, r1
  if (str != NULL)
 8002764:	b1b0      	cbz	r0, 8002794 <parse_arguments+0x34>
 8002766:	4604      	mov	r4, r0
    *saveptr = str;
 8002768:	6028      	str	r0, [r5, #0]
  p += strspn(p, " \t");
 800276a:	4620      	mov	r0, r4
 800276c:	4910      	ldr	r1, [pc, #64]	; (80027b0 <parse_arguments+0x50>)
 800276e:	f003 fcfd 	bl	800616c <strspn>
  if (*p == '"') {
 8002772:	5c21      	ldrb	r1, [r4, r0]
  p += strspn(p, " \t");
 8002774:	4404      	add	r4, r0
  if (*p == '"') {
 8002776:	2922      	cmp	r1, #34	; 0x22
 8002778:	d012      	beq.n	80027a0 <parse_arguments+0x40>
    *saveptr = strpbrk(p, " \t");
 800277a:	4620      	mov	r0, r4
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <parse_arguments+0x50>)
 800277e:	f003 fcd9 	bl	8006134 <strpbrk>
  if (*saveptr != NULL) {
 8002782:	b198      	cbz	r0, 80027ac <parse_arguments+0x4c>
    *(*saveptr)++ = '\0';
 8002784:	2300      	movs	r3, #0
 8002786:	1c42      	adds	r2, r0, #1
 8002788:	602a      	str	r2, [r5, #0]
 800278a:	7003      	strb	r3, [r0, #0]
  return *p != '\0' ? p : NULL;
 800278c:	7823      	ldrb	r3, [r4, #0]
 800278e:	b123      	cbz	r3, 800279a <parse_arguments+0x3a>
}
 8002790:	4620      	mov	r0, r4
 8002792:	bd38      	pop	{r3, r4, r5, pc}
  p = *saveptr;
 8002794:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8002796:	2c00      	cmp	r4, #0
 8002798:	d1e7      	bne.n	800276a <parse_arguments+0xa>
    return NULL;
 800279a:	2400      	movs	r4, #0
}
 800279c:	4620      	mov	r0, r4
 800279e:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 80027a0:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 80027a2:	4620      	mov	r0, r4
 80027a4:	f003 fc5e 	bl	8006064 <strchr>
  if (*saveptr != NULL) {
 80027a8:	2800      	cmp	r0, #0
 80027aa:	d1eb      	bne.n	8002784 <parse_arguments+0x24>
 80027ac:	6028      	str	r0, [r5, #0]
 80027ae:	e7ed      	b.n	800278c <parse_arguments+0x2c>
 80027b0:	0800622c 	.word	0x0800622c
	...

080027c0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80027c0:	b40e      	push	{r1, r2, r3}
 80027c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	ab0f      	add	r3, sp, #60	; 0x3c
 80027ca:	f853 4b04 	ldr.w	r4, [r3], #4
    c = *fmt++;
 80027ce:	4622      	mov	r2, r4
 80027d0:	f812 1b01 	ldrb.w	r1, [r2], #1
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80027d4:	9302      	str	r3, [sp, #8]
    if (c == 0) {
 80027d6:	2900      	cmp	r1, #0
 80027d8:	f000 823e 	beq.w	8002c58 <chprintf+0x498>
 80027dc:	4606      	mov	r6, r0
 80027de:	4698      	mov	r8, r3
  int n = 0;
 80027e0:	2700      	movs	r7, #0
 80027e2:	e00b      	b.n	80027fc <chprintf+0x3c>
      streamPut(chp, (uint8_t)c);
 80027e4:	6833      	ldr	r3, [r6, #0]
 80027e6:	4630      	mov	r0, r6
 80027e8:	68db      	ldr	r3, [r3, #12]
      n++;
 80027ea:	4614      	mov	r4, r2
 80027ec:	3701      	adds	r7, #1
      streamPut(chp, (uint8_t)c);
 80027ee:	4798      	blx	r3
    c = *fmt++;
 80027f0:	4622      	mov	r2, r4
 80027f2:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 80027f6:	2900      	cmp	r1, #0
 80027f8:	f000 80c0 	beq.w	800297c <chprintf+0x1bc>
    if (c != '%') {
 80027fc:	2925      	cmp	r1, #37	; 0x25
 80027fe:	d1f1      	bne.n	80027e4 <chprintf+0x24>
    if (*fmt == '-') {
 8002800:	7863      	ldrb	r3, [r4, #1]
 8002802:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8002804:	bf08      	it	eq
 8002806:	1ca2      	addeq	r2, r4, #2
    if (*fmt == '+') {
 8002808:	7813      	ldrb	r3, [r2, #0]
      left_align = true;
 800280a:	bf0c      	ite	eq
 800280c:	f04f 0c01 	moveq.w	ip, #1
    left_align = false;
 8002810:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '+') {
 8002814:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
 8002816:	bf05      	ittet	eq
 8002818:	2501      	moveq	r5, #1
 800281a:	7853      	ldrbeq	r3, [r2, #1]
    do_sign = false;
 800281c:	2500      	movne	r5, #0
      fmt++;
 800281e:	1952      	addeq	r2, r2, r5
    if (*fmt == '0') {
 8002820:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8002822:	bf05      	ittet	eq
 8002824:	469a      	moveq	sl, r3
      fmt++;
 8002826:	7853      	ldrbeq	r3, [r2, #1]
    filler = ' ';
 8002828:	f04f 0a20 	movne.w	sl, #32
      fmt++;
 800282c:	3201      	addeq	r2, #1
    if ( *fmt == '*') {
 800282e:	2b2a      	cmp	r3, #42	; 0x2a
 8002830:	f040 80ad 	bne.w	800298e <chprintf+0x1ce>
      width = va_arg(ap, int);
 8002834:	f858 1b04 	ldr.w	r1, [r8], #4
      c = *fmt++;
 8002838:	7853      	ldrb	r3, [r2, #1]
 800283a:	1c94      	adds	r4, r2, #2
    if (c == '.') {
 800283c:	2b2e      	cmp	r3, #46	; 0x2e
 800283e:	f000 8131 	beq.w	8002aa4 <chprintf+0x2e4>
    precision = 0;
 8002842:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8002844:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 8002848:	284c      	cmp	r0, #76	; 0x4c
 800284a:	f000 80b3 	beq.w	80029b4 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 800284e:	f1a3 0e44 	sub.w	lr, r3, #68	; 0x44
    switch (c) {
 8002852:	f1be 0f34 	cmp.w	lr, #52	; 0x34
 8002856:	f200 8199 	bhi.w	8002b8c <chprintf+0x3cc>
 800285a:	e8df f01e 	tbh	[pc, lr, lsl #1]
 800285e:	0163      	.short	0x0163
 8002860:	01970197 	.word	0x01970197
 8002864:	01970197 	.word	0x01970197
 8002868:	01970163 	.word	0x01970163
 800286c:	01970197 	.word	0x01970197
 8002870:	01970197 	.word	0x01970197
 8002874:	0035019b 	.word	0x0035019b
 8002878:	01970197 	.word	0x01970197
 800287c:	01970197 	.word	0x01970197
 8002880:	01970095 	.word	0x01970095
 8002884:	00350197 	.word	0x00350197
 8002888:	01970197 	.word	0x01970197
 800288c:	01970197 	.word	0x01970197
 8002890:	01970197 	.word	0x01970197
 8002894:	01970197 	.word	0x01970197
 8002898:	01970197 	.word	0x01970197
 800289c:	0163014f 	.word	0x0163014f
 80028a0:	01970197 	.word	0x01970197
 80028a4:	01970197 	.word	0x01970197
 80028a8:	01970163 	.word	0x01970163
 80028ac:	01970197 	.word	0x01970197
 80028b0:	01970197 	.word	0x01970197
 80028b4:	0035019b 	.word	0x0035019b
 80028b8:	01970197 	.word	0x01970197
 80028bc:	0197012e 	.word	0x0197012e
 80028c0:	01970095 	.word	0x01970095
 80028c4:	00350197 	.word	0x00350197
      if (c == 0) {
 80028c8:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 80028cc:	f858 0b04 	ldr.w	r0, [r8], #4
  q = p + MAX_FILLER;
 80028d0:	f10d 0317 	add.w	r3, sp, #23
 80028d4:	e000      	b.n	80028d8 <chprintf+0x118>
  } while ((ll /= radix) != 0);
 80028d6:	462b      	mov	r3, r5
    i = (int)(l % radix);
 80028d8:	4681      	mov	r9, r0
 80028da:	fbb0 f0fe 	udiv	r0, r0, lr
 80028de:	fb0e 9b10 	mls	fp, lr, r0, r9
    i += '0';
 80028e2:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 80028e6:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 80028e8:	bfc8      	it	gt
 80028ea:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 80028ee:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80028f0:	45f1      	cmp	r9, lr
    *--q = i;
 80028f2:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80028f6:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 80028fa:	d2ec      	bcs.n	80028d6 <chprintf+0x116>
  i = (int)(p + MAX_FILLER - q);
 80028fc:	f10d 0e17 	add.w	lr, sp, #23
 8002900:	469b      	mov	fp, r3
 8002902:	4673      	mov	r3, lr
 8002904:	f10d 090c 	add.w	r9, sp, #12
 8002908:	1b5d      	subs	r5, r3, r5
 800290a:	4648      	mov	r0, r9
 800290c:	465b      	mov	r3, fp
 800290e:	e001      	b.n	8002914 <chprintf+0x154>
 8002910:	f813 2b01 	ldrb.w	r2, [r3], #1
  while (--i);
 8002914:	4573      	cmp	r3, lr
    *p++ = *q++;
 8002916:	f800 2b01 	strb.w	r2, [r0], #1
  while (--i);
 800291a:	d1f9      	bne.n	8002910 <chprintf+0x150>
 800291c:	1b49      	subs	r1, r1, r5
 800291e:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8002920:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002924:	f1bc 0f00 	cmp.w	ip, #0
 8002928:	d104      	bne.n	8002934 <chprintf+0x174>
    if (width < 0) {
 800292a:	2900      	cmp	r1, #0
      width = -width;
 800292c:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002930:	f300 8144 	bgt.w	8002bbc <chprintf+0x3fc>
    while (--i >= 0) {
 8002934:	2d00      	cmp	r5, #0
 8002936:	db0e      	blt.n	8002956 <chprintf+0x196>
 8002938:	1c6b      	adds	r3, r5, #1
 800293a:	444b      	add	r3, r9
 800293c:	9401      	str	r4, [sp, #4]
 800293e:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 8002940:	6832      	ldr	r2, [r6, #0]
 8002942:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002946:	4630      	mov	r0, r6
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	4790      	blx	r2
    while (--i >= 0) {
 800294c:	45a1      	cmp	r9, r4
 800294e:	d1f7      	bne.n	8002940 <chprintf+0x180>
 8002950:	3701      	adds	r7, #1
 8002952:	9c01      	ldr	r4, [sp, #4]
 8002954:	442f      	add	r7, r5
    while (width) {
 8002956:	f1bb 0f00 	cmp.w	fp, #0
 800295a:	f43f af49 	beq.w	80027f0 <chprintf+0x30>
 800295e:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8002960:	6833      	ldr	r3, [r6, #0]
 8002962:	4651      	mov	r1, sl
 8002964:	4630      	mov	r0, r6
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4798      	blx	r3
    while (width) {
 800296a:	3d01      	subs	r5, #1
 800296c:	d1f8      	bne.n	8002960 <chprintf+0x1a0>
    c = *fmt++;
 800296e:	4622      	mov	r2, r4
 8002970:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002974:	445f      	add	r7, fp
    if (c == 0) {
 8002976:	2900      	cmp	r1, #0
 8002978:	f47f af40 	bne.w	80027fc <chprintf+0x3c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 800297c:	4638      	mov	r0, r7
 800297e:	b006      	add	sp, #24
 8002980:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002984:	b003      	add	sp, #12
 8002986:	4770      	bx	lr
      if (c == 0) {
 8002988:	f04f 0e0a 	mov.w	lr, #10
 800298c:	e79e      	b.n	80028cc <chprintf+0x10c>
        c = *fmt++;
 800298e:	1c54      	adds	r4, r2, #1
        if (c == 0) {
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f3      	beq.n	800297c <chprintf+0x1bc>
      width = 0;
 8002994:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8002996:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 800299e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 80029a2:	f63f af4b 	bhi.w	800283c <chprintf+0x7c>
        c = *fmt++;
 80029a6:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 80029aa:	eb02 0140 	add.w	r1, r2, r0, lsl #1
        if (c == 0) {
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f1      	bne.n	8002996 <chprintf+0x1d6>
 80029b2:	e7e3      	b.n	800297c <chprintf+0x1bc>
      c = *fmt++;
 80029b4:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0df      	beq.n	800297c <chprintf+0x1bc>
    switch (c) {
 80029bc:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
 80029c0:	2834      	cmp	r0, #52	; 0x34
 80029c2:	f200 80e3 	bhi.w	8002b8c <chprintf+0x3cc>
 80029c6:	f20f 0e08 	addw	lr, pc, #8
 80029ca:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	08002b25 	.word	0x08002b25
 80029d4:	08002b8d 	.word	0x08002b8d
 80029d8:	08002b8d 	.word	0x08002b8d
 80029dc:	08002b8d 	.word	0x08002b8d
 80029e0:	08002b8d 	.word	0x08002b8d
 80029e4:	08002b25 	.word	0x08002b25
 80029e8:	08002b8d 	.word	0x08002b8d
 80029ec:	08002b8d 	.word	0x08002b8d
 80029f0:	08002b8d 	.word	0x08002b8d
 80029f4:	08002b8d 	.word	0x08002b8d
 80029f8:	08002b8d 	.word	0x08002b8d
 80029fc:	08002b95 	.word	0x08002b95
 8002a00:	080028c9 	.word	0x080028c9
 8002a04:	08002b8d 	.word	0x08002b8d
 8002a08:	08002b8d 	.word	0x08002b8d
 8002a0c:	08002b8d 	.word	0x08002b8d
 8002a10:	08002b8d 	.word	0x08002b8d
 8002a14:	08002989 	.word	0x08002989
 8002a18:	08002b8d 	.word	0x08002b8d
 8002a1c:	08002b8d 	.word	0x08002b8d
 8002a20:	080028c9 	.word	0x080028c9
 8002a24:	08002b8d 	.word	0x08002b8d
 8002a28:	08002b8d 	.word	0x08002b8d
 8002a2c:	08002b8d 	.word	0x08002b8d
 8002a30:	08002b8d 	.word	0x08002b8d
 8002a34:	08002b8d 	.word	0x08002b8d
 8002a38:	08002b8d 	.word	0x08002b8d
 8002a3c:	08002b8d 	.word	0x08002b8d
 8002a40:	08002b8d 	.word	0x08002b8d
 8002a44:	08002b8d 	.word	0x08002b8d
 8002a48:	08002b8d 	.word	0x08002b8d
 8002a4c:	08002afd 	.word	0x08002afd
 8002a50:	08002b25 	.word	0x08002b25
 8002a54:	08002b8d 	.word	0x08002b8d
 8002a58:	08002b8d 	.word	0x08002b8d
 8002a5c:	08002b8d 	.word	0x08002b8d
 8002a60:	08002b8d 	.word	0x08002b8d
 8002a64:	08002b25 	.word	0x08002b25
 8002a68:	08002b8d 	.word	0x08002b8d
 8002a6c:	08002b8d 	.word	0x08002b8d
 8002a70:	08002b8d 	.word	0x08002b8d
 8002a74:	08002b8d 	.word	0x08002b8d
 8002a78:	08002b8d 	.word	0x08002b8d
 8002a7c:	08002b95 	.word	0x08002b95
 8002a80:	080028c9 	.word	0x080028c9
 8002a84:	08002b8d 	.word	0x08002b8d
 8002a88:	08002b8d 	.word	0x08002b8d
 8002a8c:	08002abb 	.word	0x08002abb
 8002a90:	08002b8d 	.word	0x08002b8d
 8002a94:	08002989 	.word	0x08002989
 8002a98:	08002b8d 	.word	0x08002b8d
 8002a9c:	08002b8d 	.word	0x08002b8d
 8002aa0:	080028c9 	.word	0x080028c9
      c = *fmt++;
 8002aa4:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f43f af68 	beq.w	800297c <chprintf+0x1bc>
      if (c == '*') {
 8002aac:	2b2a      	cmp	r3, #42	; 0x2a
 8002aae:	d174      	bne.n	8002b9a <chprintf+0x3da>
        c = *fmt++;
 8002ab0:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8002ab2:	f858 2b04 	ldr.w	r2, [r8], #4
        c = *fmt++;
 8002ab6:	3402      	adds	r4, #2
 8002ab8:	e6c4      	b.n	8002844 <chprintf+0x84>
      if ((s = va_arg(ap, char *)) == 0) {
 8002aba:	f858 9b04 	ldr.w	r9, [r8], #4
 8002abe:	f1b9 0f00 	cmp.w	r9, #0
 8002ac2:	f000 80bf 	beq.w	8002c44 <chprintf+0x484>
 8002ac6:	f899 3000 	ldrb.w	r3, [r9]
      if (precision == 0) {
 8002aca:	2a00      	cmp	r2, #0
 8002acc:	f040 80aa 	bne.w	8002c24 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80ab 	beq.w	8002c2c <chprintf+0x46c>
 8002ad6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002ada:	464d      	mov	r5, r9
 8002adc:	e001      	b.n	8002ae2 <chprintf+0x322>
 8002ade:	42d3      	cmn	r3, r2
 8002ae0:	d405      	bmi.n	8002aee <chprintf+0x32e>
 8002ae2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8002ae6:	eba9 0305 	sub.w	r3, r9, r5
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d1f7      	bne.n	8002ade <chprintf+0x31e>
 8002aee:	eba5 0509 	sub.w	r5, r5, r9
 8002af2:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8002af4:	f04f 0a20 	mov.w	sl, #32
 8002af8:	3d01      	subs	r5, #1
 8002afa:	e711      	b.n	8002920 <chprintf+0x160>
      filler = ' ';
 8002afc:	f04f 0a20 	mov.w	sl, #32
      *p++ = va_arg(ap, int);
 8002b00:	f858 3b04 	ldr.w	r3, [r8], #4
 8002b04:	3901      	subs	r1, #1
 8002b06:	f88d 300c 	strb.w	r3, [sp, #12]
    if ((width -= i) < 0) {
 8002b0a:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002b0e:	f1bc 0f00 	cmp.w	ip, #0
 8002b12:	d103      	bne.n	8002b1c <chprintf+0x35c>
    if (width < 0) {
 8002b14:	2900      	cmp	r1, #0
      width = -width;
 8002b16:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002b1a:	dc6e      	bgt.n	8002bfa <chprintf+0x43a>
    if (left_align == false) {
 8002b1c:	2500      	movs	r5, #0
 8002b1e:	f10d 090c 	add.w	r9, sp, #12
 8002b22:	e709      	b.n	8002938 <chprintf+0x178>
        l = va_arg(ap, int);
 8002b24:	f858 eb04 	ldr.w	lr, [r8], #4
      if (l < 0) {
 8002b28:	f1be 0f00 	cmp.w	lr, #0
 8002b2c:	db5b      	blt.n	8002be6 <chprintf+0x426>
        if (do_sign) {
 8002b2e:	2d00      	cmp	r5, #0
 8002b30:	f000 808e 	beq.w	8002c50 <chprintf+0x490>
          *p++ = '+';
 8002b34:	232b      	movs	r3, #43	; 0x2b
 8002b36:	f10d 050d 	add.w	r5, sp, #13
 8002b3a:	f88d 300c 	strb.w	r3, [sp, #12]
 8002b3e:	f10d 090c 	add.w	r9, sp, #12
  q = p + MAX_FILLER;
 8002b42:	f105 030b 	add.w	r3, r5, #11
 8002b46:	461a      	mov	r2, r3
 8002b48:	9301      	str	r3, [sp, #4]
    i = (int)(l % radix);
 8002b4a:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <chprintf+0x4ac>)
 8002b4c:	46f3      	mov	fp, lr
 8002b4e:	fba3 030e 	umull	r0, r3, r3, lr
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	4618      	mov	r0, r3
 8002b56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b5a:	ebae 0343 	sub.w	r3, lr, r3, lsl #1
    i += '0';
 8002b5e:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002b60:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002b62:	f1bb 0f09 	cmp.w	fp, #9
    l /= radix;
 8002b66:	4686      	mov	lr, r0
    *--q = i;
 8002b68:	f802 3d01 	strb.w	r3, [r2, #-1]!
  } while ((ll /= radix) != 0);
 8002b6c:	dced      	bgt.n	8002b4a <chprintf+0x38a>
  i = (int)(p + MAX_FILLER - q);
 8002b6e:	9801      	ldr	r0, [sp, #4]
 8002b70:	1a80      	subs	r0, r0, r2
 8002b72:	4428      	add	r0, r5
 8002b74:	e001      	b.n	8002b7a <chprintf+0x3ba>
 8002b76:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8002b7a:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 8002b7e:	4285      	cmp	r5, r0
 8002b80:	d1f9      	bne.n	8002b76 <chprintf+0x3b6>
 8002b82:	eba5 0509 	sub.w	r5, r5, r9
 8002b86:	1b49      	subs	r1, r1, r5
 8002b88:	3d01      	subs	r5, #1
 8002b8a:	e6c9      	b.n	8002920 <chprintf+0x160>
      *p++ = c;
 8002b8c:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002b90:	3901      	subs	r1, #1
 8002b92:	e7ba      	b.n	8002b0a <chprintf+0x34a>
      if (c == 0) {
 8002b94:	f04f 0e08 	mov.w	lr, #8
 8002b98:	e698      	b.n	80028cc <chprintf+0x10c>
    precision = 0;
 8002b9a:	2200      	movs	r2, #0
      c = *fmt++;
 8002b9c:	3401      	adds	r4, #1
        while (c >= '0' && c <= '9') {
 8002b9e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002ba2:	b2c0      	uxtb	r0, r0
 8002ba4:	2809      	cmp	r0, #9
          precision = precision * 10 + c;
 8002ba6:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8002baa:	f63f ae4b 	bhi.w	8002844 <chprintf+0x84>
          c = *fmt++;
 8002bae:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8002bb2:	eb00 024e 	add.w	r2, r0, lr, lsl #1
          if (c == 0) {
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f1      	bne.n	8002b9e <chprintf+0x3de>
 8002bba:	e6df      	b.n	800297c <chprintf+0x1bc>
      width = -width;
 8002bbc:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002bc0:	f899 1000 	ldrb.w	r1, [r9]
 8002bc4:	292d      	cmp	r1, #45	; 0x2d
 8002bc6:	d021      	beq.n	8002c0c <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8002bc8:	6833      	ldr	r3, [r6, #0]
 8002bca:	4651      	mov	r1, sl
 8002bcc:	4630      	mov	r0, r6
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4798      	blx	r3
      } while (++width != 0);
 8002bd2:	f11b 0b01 	adds.w	fp, fp, #1
 8002bd6:	d1f7      	bne.n	8002bc8 <chprintf+0x408>
 8002bd8:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8002bda:	2d00      	cmp	r5, #0
 8002bdc:	eba7 0703 	sub.w	r7, r7, r3
 8002be0:	f6bf aeaa 	bge.w	8002938 <chprintf+0x178>
 8002be4:	e604      	b.n	80027f0 <chprintf+0x30>
        *p++ = '-';
 8002be6:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002be8:	f1ce 0e00 	rsb	lr, lr, #0
        *p++ = '-';
 8002bec:	f88d 300c 	strb.w	r3, [sp, #12]
 8002bf0:	f10d 050d 	add.w	r5, sp, #13
 8002bf4:	f10d 090c 	add.w	r9, sp, #12
 8002bf8:	e7a3      	b.n	8002b42 <chprintf+0x382>
      if (*s == '-' && filler == '0') {
 8002bfa:	f89d 100c 	ldrb.w	r1, [sp, #12]
    if (width < 0) {
 8002bfe:	f10d 090c 	add.w	r9, sp, #12
      if (*s == '-' && filler == '0') {
 8002c02:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8002c04:	4665      	mov	r5, ip
      width = -width;
 8002c06:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002c0a:	d1dd      	bne.n	8002bc8 <chprintf+0x408>
 8002c0c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8002c10:	d1da      	bne.n	8002bc8 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8002c12:	6832      	ldr	r2, [r6, #0]
 8002c14:	4630      	mov	r0, r6
 8002c16:	68d2      	ldr	r2, [r2, #12]
 8002c18:	4790      	blx	r2
 8002c1a:	f109 0901 	add.w	r9, r9, #1
        n++;
 8002c1e:	3701      	adds	r7, #1
        i--;
 8002c20:	3d01      	subs	r5, #1
 8002c22:	e7d1      	b.n	8002bc8 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8002c24:	b113      	cbz	r3, 8002c2c <chprintf+0x46c>
 8002c26:	3a01      	subs	r2, #1
 8002c28:	f57f af57 	bpl.w	8002ada <chprintf+0x31a>
    if ((width -= i) < 0) {
 8002c2c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002c30:	f1bc 0f00 	cmp.w	ip, #0
 8002c34:	d103      	bne.n	8002c3e <chprintf+0x47e>
    if (width < 0) {
 8002c36:	2900      	cmp	r1, #0
      width = -width;
 8002c38:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002c3c:	dc0e      	bgt.n	8002c5c <chprintf+0x49c>
    if (left_align == false) {
 8002c3e:	f04f 0a20 	mov.w	sl, #32
 8002c42:	e688      	b.n	8002956 <chprintf+0x196>
        s = "(null)";
 8002c44:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8002c70 <chprintf+0x4b0>
      if (precision == 0) {
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	f43f af44 	beq.w	8002ad6 <chprintf+0x316>
 8002c4e:	e7ea      	b.n	8002c26 <chprintf+0x466>
    p = tmpbuf;
 8002c50:	f10d 090c 	add.w	r9, sp, #12
 8002c54:	464d      	mov	r5, r9
 8002c56:	e774      	b.n	8002b42 <chprintf+0x382>
  int n = 0;
 8002c58:	460f      	mov	r7, r1
  return formatted_bytes;
 8002c5a:	e68f      	b.n	800297c <chprintf+0x1bc>
    if (width < 0) {
 8002c5c:	f04f 0a20 	mov.w	sl, #32
 8002c60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      width = -width;
 8002c64:	f8cd b004 	str.w	fp, [sp, #4]
 8002c68:	e7aa      	b.n	8002bc0 <chprintf+0x400>
 8002c6a:	bf00      	nop
 8002c6c:	cccccccd 	.word	0xcccccccd
 8002c70:	08006230 	.word	0x08006230
	...

08002c80 <cmd_ch_inp_f>:
void cmd_ch_inp_f(BaseSequentialStream *chp, int argc, char *argv[]){
	(void)argv;
	//uint16_t scf;
	float inputf;
	char pps_str[26];
	memset(&pps_str, 0, sizeof(pps_str));
 8002c80:	2300      	movs	r3, #0
void cmd_ch_inp_f(BaseSequentialStream *chp, int argc, char *argv[]){
 8002c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c86:	b0a9      	sub	sp, #164	; 0xa4
	memset(&pps_str, 0, sizeof(pps_str));
 8002c88:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002c8c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002c90:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002c94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

	if (argc == 0){
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	f000 808b 	beq.w	8002db4 <cmd_ch_inp_f+0x134>
	  inputf = cudata.configstruct.fs_corr;
	  myftoap(pps_str, inputf, 9);
	  chprintf(chp, "Factor is now: %s\r\n", pps_str);
	  return;
	}
	cudata.configstruct.fs_corr = patof(argv[0]);
 8002c9e:	6815      	ldr	r5, [r2, #0]
double patof(char s[]) {
  double val, power;
  int sign;
  uint8_t i;

  for (i = 0; isspace((int)s[i]); i++)
 8002ca0:	f8df a33c 	ldr.w	sl, [pc, #828]	; 8002fe0 <cmd_ch_inp_f+0x360>
 8002ca4:	782a      	ldrb	r2, [r5, #0]
 8002ca6:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8002caa:	f014 0408 	ands.w	r4, r4, #8
 8002cae:	d007      	beq.n	8002cc0 <cmd_ch_inp_f+0x40>
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	3401      	adds	r4, #1
 8002cb4:	b2e4      	uxtb	r4, r4
 8002cb6:	5d2a      	ldrb	r2, [r5, r4]
 8002cb8:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8002cbc:	071e      	lsls	r6, r3, #28
 8002cbe:	d4f8      	bmi.n	8002cb2 <cmd_ch_inp_f+0x32>
    /* skip white space */
    ;
  sign = (s[i] == '-') ? -1 : 1;
 8002cc0:	2a2d      	cmp	r2, #45	; 0x2d
 8002cc2:	d072      	beq.n	8002daa <cmd_ch_inp_f+0x12a>
  if (s[i] == '+' || s[i] == '-')
 8002cc4:	2a2b      	cmp	r2, #43	; 0x2b
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	4bbb      	ldr	r3, [pc, #748]	; (8002fb8 <cmd_ch_inp_f+0x338>)
 8002ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8002cd0:	d101      	bne.n	8002cd6 <cmd_ch_inp_f+0x56>
    i++;
 8002cd2:	3401      	adds	r4, #1
 8002cd4:	b2e4      	uxtb	r4, r4
  for (val = 0.0; isdigit((int)s[i]); i++)
 8002cd6:	f815 b004 	ldrb.w	fp, [r5, r4]
 8002cda:	2600      	movs	r6, #0
 8002cdc:	f81a 300b 	ldrb.w	r3, [sl, fp]
 8002ce0:	2700      	movs	r7, #0
 8002ce2:	0758      	lsls	r0, r3, #29
 8002ce4:	d51d      	bpl.n	8002d22 <cmd_ch_inp_f+0xa2>
    val = 10.0 * val + (s[i] - '0');
 8002ce6:	f04f 0800 	mov.w	r8, #0
 8002cea:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8002fbc <cmd_ch_inp_f+0x33c>
 8002cee:	4642      	mov	r2, r8
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	f7fd fdc9 	bl	800088c <__aeabi_dmul>
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	460f      	mov	r7, r1
 8002cfe:	f1ab 0030 	sub.w	r0, fp, #48	; 0x30
 8002d02:	f7fd fd59 	bl	80007b8 <__aeabi_i2d>
 8002d06:	463b      	mov	r3, r7
 8002d08:	4632      	mov	r2, r6
 8002d0a:	f7fd fc09 	bl	8000520 <__adddf3>
  for (val = 0.0; isdigit((int)s[i]); i++)
 8002d0e:	3401      	adds	r4, #1
 8002d10:	b2e4      	uxtb	r4, r4
 8002d12:	f815 b004 	ldrb.w	fp, [r5, r4]
    val = 10.0 * val + (s[i] - '0');
 8002d16:	460f      	mov	r7, r1
  for (val = 0.0; isdigit((int)s[i]); i++)
 8002d18:	f81a 300b 	ldrb.w	r3, [sl, fp]
    val = 10.0 * val + (s[i] - '0');
 8002d1c:	4606      	mov	r6, r0
  for (val = 0.0; isdigit((int)s[i]); i++)
 8002d1e:	0759      	lsls	r1, r3, #29
 8002d20:	d4e5      	bmi.n	8002cee <cmd_ch_inp_f+0x6e>
  if (s[i] == '.')
 8002d22:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 8002d26:	f040 8135 	bne.w	8002f94 <cmd_ch_inp_f+0x314>
    i++;
 8002d2a:	3401      	adds	r4, #1
 8002d2c:	b2e4      	uxtb	r4, r4
  for (power = 1.0; isdigit((int)s[i]); i++) {
 8002d2e:	f815 b004 	ldrb.w	fp, [r5, r4]
 8002d32:	f04f 0800 	mov.w	r8, #0
 8002d36:	f81a 300b 	ldrb.w	r3, [sl, fp]
 8002d3a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8002fb8 <cmd_ch_inp_f+0x338>
 8002d3e:	075a      	lsls	r2, r3, #29
 8002d40:	d521      	bpl.n	8002d86 <cmd_ch_inp_f+0x106>
    val = 10.0 * val + (s[i] - '0');
 8002d42:	2200      	movs	r2, #0
 8002d44:	4b9d      	ldr	r3, [pc, #628]	; (8002fbc <cmd_ch_inp_f+0x33c>)
 8002d46:	4630      	mov	r0, r6
 8002d48:	4639      	mov	r1, r7
 8002d4a:	f7fd fd9f 	bl	800088c <__aeabi_dmul>
 8002d4e:	4606      	mov	r6, r0
 8002d50:	460f      	mov	r7, r1
 8002d52:	f1ab 0030 	sub.w	r0, fp, #48	; 0x30
 8002d56:	f7fd fd2f 	bl	80007b8 <__aeabi_i2d>
 8002d5a:	4632      	mov	r2, r6
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	f7fd fbdf 	bl	8000520 <__adddf3>
    power *= 10;
 8002d62:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <cmd_ch_inp_f+0x33c>)
    val = 10.0 * val + (s[i] - '0');
 8002d64:	4606      	mov	r6, r0
 8002d66:	460f      	mov	r7, r1
    power *= 10;
 8002d68:	4640      	mov	r0, r8
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f7fd fd8d 	bl	800088c <__aeabi_dmul>
  for (power = 1.0; isdigit((int)s[i]); i++) {
 8002d72:	3401      	adds	r4, #1
 8002d74:	b2e4      	uxtb	r4, r4
 8002d76:	f815 b004 	ldrb.w	fp, [r5, r4]
    power *= 10;
 8002d7a:	4680      	mov	r8, r0
  for (power = 1.0; isdigit((int)s[i]); i++) {
 8002d7c:	f81a 300b 	ldrb.w	r3, [sl, fp]
    power *= 10;
 8002d80:	4689      	mov	r9, r1
  for (power = 1.0; isdigit((int)s[i]); i++) {
 8002d82:	075b      	lsls	r3, r3, #29
 8002d84:	d4dd      	bmi.n	8002d42 <cmd_ch_inp_f+0xc2>
  }
  return sign * val / power;
 8002d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	4639      	mov	r1, r7
 8002d8e:	f7fd fd7d 	bl	800088c <__aeabi_dmul>
 8002d92:	464b      	mov	r3, r9
 8002d94:	4642      	mov	r2, r8
 8002d96:	f7fd fea3 	bl	8000ae0 <__aeabi_ddiv>
 8002d9a:	f7fd ffa9 	bl	8000cf0 <__aeabi_d2f>
 8002d9e:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <cmd_ch_inp_f+0x340>)
 8002da0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

}
 8002da4:	b029      	add	sp, #164	; 0xa4
 8002da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sign = (s[i] == '-') ? -1 : 1;
 8002daa:	2200      	movs	r2, #0
 8002dac:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <cmd_ch_inp_f+0x344>)
 8002dae:	e9cd 2300 	strd	r2, r3, [sp]
 8002db2:	e78e      	b.n	8002cd2 <cmd_ch_inp_f+0x52>
	  chprintf(chp, "Set Factor for Input frequency to Speed (float accuracy)\r\n");
 8002db4:	4984      	ldr	r1, [pc, #528]	; (8002fc8 <cmd_ch_inp_f+0x348>)
 8002db6:	4680      	mov	r8, r0
 8002db8:	f7ff fd02 	bl	80027c0 <chprintf>
	  inputf = cudata.configstruct.fs_corr;
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <cmd_ch_inp_f+0x340>)
  const uint32_t sz[MAXSZ] = {1,     //0  10^0
 8002dbe:	4c83      	ldr	r4, [pc, #524]	; (8002fcc <cmd_ch_inp_f+0x34c>)
 8002dc0:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8002dc4:	ae0a      	add	r6, sp, #40	; 0x28
	  myftoap(pps_str, inputf, 9);
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	f7fd fd08 	bl	80007dc <__aeabi_f2d>
 8002dcc:	4681      	mov	r9, r0
 8002dce:	460d      	mov	r5, r1
 8002dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
  const double rounders[MAXSZ] = {
 8002ddc:	2250      	movs	r2, #80	; 0x50
  const uint32_t sz[MAXSZ] = {1,     //0  10^0
 8002dde:	e886 0003 	stmia.w	r6, {r0, r1}
  const double rounders[MAXSZ] = {
 8002de2:	f104 0108 	add.w	r1, r4, #8
 8002de6:	eb0d 0002 	add.w	r0, sp, r2
 8002dea:	f7fd fa3f 	bl	800026c <memcpy>
  if (fltval < 0 ){  // handle negative numbers
 8002dee:	4638      	mov	r0, r7
 8002df0:	2100      	movs	r1, #0
 8002df2:	f7fe fa79 	bl	80012e8 <__aeabi_fcmplt>
 8002df6:	4604      	mov	r4, r0
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	f040 80c3 	bne.w	8002f84 <cmd_ch_inp_f+0x304>
 8002dfe:	2609      	movs	r6, #9
  intval = (uint32_t)fltval;  // truncate the floating point number (intval=99)
 8002e00:	4648      	mov	r0, r9
 8002e02:	4629      	mov	r1, r5
 8002e04:	f7fd ff54 	bl	8000cb0 <__aeabi_d2uiz>
  if (intval >= sz[MAXSZ-1]){ //more than 9 digits is not supported
 8002e08:	4b71      	ldr	r3, [pc, #452]	; (8002fd0 <cmd_ch_inp_f+0x350>)
 8002e0a:	4298      	cmp	r0, r3
 8002e0c:	d82a      	bhi.n	8002e64 <cmd_ch_inp_f+0x1e4>
 8002e0e:	469a      	mov	sl, r3
 8002e10:	2301      	movs	r3, #1
 8002e12:	2700      	movs	r7, #0
 8002e14:	aa0a      	add	r2, sp, #40	; 0x28
    if (intval < sz[len]){
 8002e16:	f852 1b04 	ldr.w	r1, [r2], #4
 8002e1a:	fa5f fb87 	uxtb.w	fp, r7
 8002e1e:	4281      	cmp	r1, r0
 8002e20:	d805      	bhi.n	8002e2e <cmd_ch_inp_f+0x1ae>
 8002e22:	3701      	adds	r7, #1
  for (len=0; len < MAXSZ; len++){  //find out how many digits we need
 8002e24:	2f0a      	cmp	r7, #10
 8002e26:	d1f6      	bne.n	8002e16 <cmd_ch_inp_f+0x196>
    memcpy(buf,OVF,sizeof(OVF));
 8002e28:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <cmd_ch_inp_f+0x354>)
 8002e2a:	9303      	str	r3, [sp, #12]
 8002e2c:	e090      	b.n	8002f50 <cmd_ch_inp_f+0x2d0>
  if (len > fsz){  //we can't handle this number
 8002e2e:	455e      	cmp	r6, fp
 8002e30:	d3fa      	bcc.n	8002e28 <cmd_ch_inp_f+0x1a8>
  if (((fsz - len) > 0) && checkagain){  // we need space for DP and round only once
 8002e32:	1bf2      	subs	r2, r6, r7
 8002e34:	2a00      	cmp	r2, #0
 8002e36:	dd18      	ble.n	8002e6a <cmd_ch_inp_f+0x1ea>
    fltval += rounders[fsz - len - 1];
 8002e38:	4648      	mov	r0, r9
 8002e3a:	4629      	mov	r1, r5
  if (((fsz - len) > 0) && checkagain){  // we need space for DP and round only once
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 808f 	beq.w	8002f60 <cmd_ch_inp_f+0x2e0>
    fltval += rounders[fsz - len - 1];
 8002e42:	ab28      	add	r3, sp, #160	; 0xa0
 8002e44:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002e48:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	f7fd fb66 	bl	8000520 <__adddf3>
 8002e54:	4681      	mov	r9, r0
 8002e56:	460d      	mov	r5, r1
 8002e58:	f7fd ff2a 	bl	8000cb0 <__aeabi_d2uiz>
  if (intval >= sz[MAXSZ-1]){ //more than 9 digits is not supported
 8002e5c:	4550      	cmp	r0, sl
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	d9d6      	bls.n	8002e12 <cmd_ch_inp_f+0x192>
    memcpy(buf,MAX,sizeof(MAX));
 8002e64:	4b5c      	ldr	r3, [pc, #368]	; (8002fd8 <cmd_ch_inp_f+0x358>)
 8002e66:	9303      	str	r3, [sp, #12]
 8002e68:	e072      	b.n	8002f50 <cmd_ch_inp_f+0x2d0>
  intval = (uint32_t)fltval;
 8002e6a:	4648      	mov	r0, r9
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f7fd ff1e 	bl	8000cb0 <__aeabi_d2uiz>
  if (checkagain){
 8002e74:	9b00      	ldr	r3, [sp, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <cmd_ch_inp_f+0x1dc>
    if (len == (fsz - 1)){ // special case we have space for a comma but for no digit
 8002e7a:	2e08      	cmp	r6, #8
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2307      	moveq	r3, #7
 8002e80:	2308      	movne	r3, #8
 8002e82:	429f      	cmp	r7, r3
 8002e84:	d06f      	beq.n	8002f66 <cmd_ch_inp_f+0x2e6>
    for (;len>0;len--){  //handle whole numbers
 8002e86:	f1bb 0f00 	cmp.w	fp, #0
 8002e8a:	f000 808a 	beq.w	8002fa2 <cmd_ch_inp_f+0x322>
      temp = intval / sz[len-1];
 8002e8e:	ab28      	add	r3, sp, #160	; 0xa0
 8002e90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8002e94:	f857 1c7c 	ldr.w	r1, [r7, #-124]
      fsz--;
 8002e98:	1e73      	subs	r3, r6, #1
      temp = intval / sz[len-1];
 8002e9a:	fbb0 f2f1 	udiv	r2, r0, r1
 8002e9e:	fb01 0612 	mls	r6, r1, r2, r0
      buf[pos++] = temp + '0';
 8002ea2:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8002ea6:	aa28      	add	r2, sp, #160	; 0xa0
 8002ea8:	4422      	add	r2, r4
 8002eaa:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8002eae:	b2ff      	uxtb	r7, r7
 8002eb0:	44a3      	add	fp, r4
 8002eb2:	f802 cc94 	strb.w	ip, [r2, #-148]
 8002eb6:	3401      	adds	r4, #1
 8002eb8:	aa0a      	add	r2, sp, #40	; 0x28
      fsz--;
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8002ec0:	fa5f f18b 	uxtb.w	r1, fp
      buf[pos++] = temp + '0';
 8002ec4:	b2e4      	uxtb	r4, r4
 8002ec6:	e00d      	b.n	8002ee4 <cmd_ch_inp_f+0x264>
      temp = intval / sz[len-1];
 8002ec8:	f857 4d04 	ldr.w	r4, [r7, #-4]!
 8002ecc:	fbb6 f3f4 	udiv	r3, r6, r4
      buf[pos++] = temp + '0';
 8002ed0:	f103 0a30 	add.w	sl, r3, #48	; 0x30
 8002ed4:	fb04 6613 	mls	r6, r4, r3, r6
      if (!fsz){
 8002ed8:	f01c 03ff 	ands.w	r3, ip, #255	; 0xff
      buf[pos++] = temp + '0';
 8002edc:	f80e ac94 	strb.w	sl, [lr, #-148]
      if (!fsz){
 8002ee0:	d04b      	beq.n	8002f7a <cmd_ch_inp_f+0x2fa>
      buf[pos++] = temp + '0';
 8002ee2:	4614      	mov	r4, r2
 8002ee4:	f10d 0ca0 	add.w	ip, sp, #160	; 0xa0
 8002ee8:	1c62      	adds	r2, r4, #1
    for (;len>0;len--){  //handle whole numbers
 8002eea:	428c      	cmp	r4, r1
      buf[pos++] = temp + '0';
 8002eec:	eb0c 0e04 	add.w	lr, ip, r4
 8002ef0:	b2d2      	uxtb	r2, r2
      fsz--;
 8002ef2:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    for (;len>0;len--){  //handle whole numbers
 8002ef6:	d1e7      	bne.n	8002ec8 <cmd_ch_inp_f+0x248>
  buf[pos++] = DP;
 8002ef8:	212e      	movs	r1, #46	; 0x2e
 8002efa:	3401      	adds	r4, #1
  while (fsz){
 8002efc:	f01c 03ff 	ands.w	r3, ip, #255	; 0xff
  buf[pos++] = DP;
 8002f00:	f80e 1c94 	strb.w	r1, [lr, #-148]
 8002f04:	b2e4      	uxtb	r4, r4
  while (fsz){
 8002f06:	d04a      	beq.n	8002f9e <cmd_ch_inp_f+0x31e>
    fltval *= 10;  // move next digit over
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4423      	add	r3, r4
 8002f0c:	4f2b      	ldr	r7, [pc, #172]	; (8002fbc <cmd_ch_inp_f+0x33c>)
 8002f0e:	fa5f fa83 	uxtb.w	sl, r3
    fltval = fltval - (double)intval;  // hack off the whole part of the number
 8002f12:	f7fd fc41 	bl	8000798 <__aeabi_ui2d>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4648      	mov	r0, r9
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	f7fd fafd 	bl	800051c <__aeabi_dsub>
    fltval *= 10;  // move next digit over
 8002f22:	4632      	mov	r2, r6
 8002f24:	463b      	mov	r3, r7
 8002f26:	f7fd fcb1 	bl	800088c <__aeabi_dmul>
 8002f2a:	460d      	mov	r5, r1
 8002f2c:	4681      	mov	r9, r0
    intval = (uint32_t)fltval;  // get next digit
 8002f2e:	f7fd febf 	bl	8000cb0 <__aeabi_d2uiz>
    buf[pos++] = intval + '0';
 8002f32:	1c61      	adds	r1, r4, #1
 8002f34:	ab28      	add	r3, sp, #160	; 0xa0
 8002f36:	4423      	add	r3, r4
 8002f38:	b2cc      	uxtb	r4, r1
 8002f3a:	f100 0230 	add.w	r2, r0, #48	; 0x30
  while (fsz){
 8002f3e:	4554      	cmp	r4, sl
    buf[pos++] = intval + '0';
 8002f40:	f803 2c94 	strb.w	r2, [r3, #-148]
  while (fsz){
 8002f44:	d1e5      	bne.n	8002f12 <cmd_ch_inp_f+0x292>
  buf[pos++] = 0; //terminate string
 8002f46:	2300      	movs	r3, #0
 8002f48:	aa28      	add	r2, sp, #160	; 0xa0
 8002f4a:	4492      	add	sl, r2
 8002f4c:	f80a 3c94 	strb.w	r3, [sl, #-148]
	  chprintf(chp, "Factor is now: %s\r\n", pps_str);
 8002f50:	4640      	mov	r0, r8
 8002f52:	4922      	ldr	r1, [pc, #136]	; (8002fdc <cmd_ch_inp_f+0x35c>)
 8002f54:	aa03      	add	r2, sp, #12
 8002f56:	f7ff fc33 	bl	80027c0 <chprintf>
}
 8002f5a:	b029      	add	sp, #164	; 0xa4
 8002f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  intval = (uint32_t)fltval;
 8002f60:	f7fd fea6 	bl	8000cb0 <__aeabi_d2uiz>
 8002f64:	e789      	b.n	8002e7a <cmd_ch_inp_f+0x1fa>
      buf[pos++] = TC;
 8002f66:	2120      	movs	r1, #32
 8002f68:	ab28      	add	r3, sp, #160	; 0xa0
 8002f6a:	191a      	adds	r2, r3, r4
      fsz--;
 8002f6c:	3e01      	subs	r6, #1
      buf[pos++] = TC;
 8002f6e:	3401      	adds	r4, #1
      fsz--;
 8002f70:	b2f6      	uxtb	r6, r6
      buf[pos++] = TC;
 8002f72:	f802 1c94 	strb.w	r1, [r2, #-148]
 8002f76:	b2e4      	uxtb	r4, r4
 8002f78:	e785      	b.n	8002e86 <cmd_ch_inp_f+0x206>
        buf[pos++] = 0; //terminate string
 8002f7a:	a928      	add	r1, sp, #160	; 0xa0
 8002f7c:	440a      	add	r2, r1
 8002f7e:	f802 3c94 	strb.w	r3, [r2, #-148]
 8002f82:	e7e5      	b.n	8002f50 <cmd_ch_inp_f+0x2d0>
    buf[pos++]=NEG;
 8002f84:	232d      	movs	r3, #45	; 0x2d
 8002f86:	2401      	movs	r4, #1
    fsz--;
 8002f88:	2608      	movs	r6, #8
    fltval *= -1;
 8002f8a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    buf[pos++]=NEG;
 8002f8e:	f88d 300c 	strb.w	r3, [sp, #12]
 8002f92:	e735      	b.n	8002e00 <cmd_ch_inp_f+0x180>
  if (s[i] == '.')
 8002f94:	f04f 0800 	mov.w	r8, #0
 8002f98:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8002fb8 <cmd_ch_inp_f+0x338>
 8002f9c:	e6f3      	b.n	8002d86 <cmd_ch_inp_f+0x106>
  buf[pos++] = DP;
 8002f9e:	46a2      	mov	sl, r4
 8002fa0:	e7d1      	b.n	8002f46 <cmd_ch_inp_f+0x2c6>
 8002fa2:	212e      	movs	r1, #46	; 0x2e
 8002fa4:	aa28      	add	r2, sp, #160	; 0xa0
 8002fa6:	4422      	add	r2, r4
  fsz--;
 8002fa8:	1e73      	subs	r3, r6, #1
  buf[pos++] = DP;
 8002faa:	3401      	adds	r4, #1
  fsz--;
 8002fac:	b2db      	uxtb	r3, r3
  buf[pos++] = DP;
 8002fae:	f802 1c94 	strb.w	r1, [r2, #-148]
 8002fb2:	b2e4      	uxtb	r4, r4
 8002fb4:	e7a8      	b.n	8002f08 <cmd_ch_inp_f+0x288>
 8002fb6:	bf00      	nop
 8002fb8:	3ff00000 	.word	0x3ff00000
 8002fbc:	40240000 	.word	0x40240000
 8002fc0:	20000800 	.word	0x20000800
 8002fc4:	bff00000 	.word	0xbff00000
 8002fc8:	08006238 	.word	0x08006238
 8002fcc:	080061a0 	.word	0x080061a0
 8002fd0:	3b9ac9ff 	.word	0x3b9ac9ff
 8002fd4:	0046564f 	.word	0x0046564f
 8002fd8:	005a534d 	.word	0x005a534d
 8002fdc:	08006274 	.word	0x08006274
 8002fe0:	08007529 	.word	0x08007529
	...

08002ff0 <cmd_dir>:
void cmd_dir(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4615      	mov	r5, r2
  chprintf(chp, "Changes direction of Motor\r\n");
 8002ff6:	4910      	ldr	r1, [pc, #64]	; (8003038 <cmd_dir+0x48>)
 8002ff8:	f7ff fbe2 	bl	80027c0 <chprintf>
  chprintf(chp, "Usage: dir[0,1] where 0 == CW and 1 == CW\r\n");
 8002ffc:	490f      	ldr	r1, [pc, #60]	; (800303c <cmd_dir+0x4c>)
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fbde 	bl	80027c0 <chprintf>
  dir = atoi(argv[0]);
 8003004:	6828      	ldr	r0, [r5, #0]
 8003006:	f002 ff45 	bl	8005e94 <atoi>
 800300a:	b283      	uxth	r3, r0
  if (dir == 0){
 800300c:	b113      	cbz	r3, 8003014 <cmd_dir+0x24>
  else if (dir == 1){
 800300e:	2b01      	cmp	r3, #1
 8003010:	d009      	beq.n	8003026 <cmd_dir+0x36>
}
 8003012:	bd38      	pop	{r3, r4, r5, pc}
      chprintf(chp, "Direction changed to: %d\r\n", dir);
 8003014:	461a      	mov	r2, r3
 8003016:	4620      	mov	r0, r4
 8003018:	4909      	ldr	r1, [pc, #36]	; (8003040 <cmd_dir+0x50>)
 800301a:	f7ff fbd1 	bl	80027c0 <chprintf>
      palSetPad(GPIOB, 4);
 800301e:	2210      	movs	r2, #16
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <cmd_dir+0x54>)
 8003022:	611a      	str	r2, [r3, #16]
}
 8003024:	bd38      	pop	{r3, r4, r5, pc}
    chprintf(chp, "Direction changed to: %d\r\n", dir);
 8003026:	b282      	uxth	r2, r0
 8003028:	4905      	ldr	r1, [pc, #20]	; (8003040 <cmd_dir+0x50>)
 800302a:	4620      	mov	r0, r4
 800302c:	f7ff fbc8 	bl	80027c0 <chprintf>
    palClearPad(GPIOB, 4);
 8003030:	2210      	movs	r2, #16
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <cmd_dir+0x54>)
 8003034:	615a      	str	r2, [r3, #20]
}
 8003036:	bd38      	pop	{r3, r4, r5, pc}
 8003038:	08006288 	.word	0x08006288
 800303c:	080062a8 	.word	0x080062a8
 8003040:	080062d4 	.word	0x080062d4
 8003044:	40010c00 	.word	0x40010c00
	...

08003050 <cmd_dis>:
void cmd_dis(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4604      	mov	r4, r0
 8003054:	4615      	mov	r5, r2
  chprintf(chp, "Disables or Enables update of Output frequency\r\n");
 8003056:	490b      	ldr	r1, [pc, #44]	; (8003084 <cmd_dis+0x34>)
 8003058:	f7ff fbb2 	bl	80027c0 <chprintf>
  chprintf(chp, "Usage: dis[0,1] where 0 == Disable and 1 == Enable\r\n");
 800305c:	490a      	ldr	r1, [pc, #40]	; (8003088 <cmd_dis+0x38>)
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff fbae 	bl	80027c0 <chprintf>
  dis = atoi(argv[0]);
 8003064:	6828      	ldr	r0, [r5, #0]
 8003066:	f002 ff15 	bl	8005e94 <atoi>
 800306a:	b285      	uxth	r5, r0
  if (dis < 2){
 800306c:	2d01      	cmp	r5, #1
 800306e:	d900      	bls.n	8003072 <cmd_dis+0x22>
}
 8003070:	bd38      	pop	{r3, r4, r5, pc}
	  chprintf(chp, "Updated Enable Flag. Data was: %d\r\n", dis);
 8003072:	462a      	mov	r2, r5
 8003074:	4620      	mov	r0, r4
 8003076:	4905      	ldr	r1, [pc, #20]	; (800308c <cmd_dis+0x3c>)
 8003078:	f7ff fba2 	bl	80027c0 <chprintf>
	  f_enable = dis;
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <cmd_dis+0x40>)
 800307e:	801d      	strh	r5, [r3, #0]
}
 8003080:	bd38      	pop	{r3, r4, r5, pc}
 8003082:	bf00      	nop
 8003084:	080062f0 	.word	0x080062f0
 8003088:	08006324 	.word	0x08006324
 800308c:	0800635c 	.word	0x0800635c
 8003090:	2000089c 	.word	0x2000089c
	...

080030a0 <cmd_per>:
void cmd_per(BaseSequentialStream *chp, int argc, char *argv[]) {
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0
  chprintf(chp, "Gets Period\r\n");
 80030a4:	4906      	ldr	r1, [pc, #24]	; (80030c0 <cmd_per+0x20>)
 80030a6:	f7ff fb8b 	bl	80027c0 <chprintf>
  chprintf(chp, "Period is now: %d, Speed: %d\r\n", last_period, real_freq);
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <cmd_per+0x24>)
 80030ac:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <cmd_per+0x28>)
 80030ae:	4620      	mov	r0, r4
}
 80030b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chprintf(chp, "Period is now: %d, Speed: %d\r\n", last_period, real_freq);
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <cmd_per+0x2c>)
 80030ba:	f7ff bb81 	b.w	80027c0 <chprintf>
 80030be:	bf00      	nop
 80030c0:	08006380 	.word	0x08006380
 80030c4:	2000126c 	.word	0x2000126c
 80030c8:	20001268 	.word	0x20001268
 80030cc:	08006390 	.word	0x08006390

080030d0 <cmd_confwrt>:
void cmd_confwrt(BaseSequentialStream *chp, int argc, char *argv[]) {
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4604      	mov	r4, r0
	}
}

void configParameterWrite(void) {

  fileStreamSetPosition(eeFS, EEPROM_SETTINGS_START);
 80030d4:	4d0d      	ldr	r5, [pc, #52]	; (800310c <cmd_confwrt+0x3c>)
  chprintf(chp, "Writes config data to EEPROM\r\n");
 80030d6:	490e      	ldr	r1, [pc, #56]	; (8003110 <cmd_confwrt+0x40>)
 80030d8:	f7ff fb72 	bl	80027c0 <chprintf>
  chprintf(chp, "Usage: confwrt\r\n");
 80030dc:	4620      	mov	r0, r4
 80030de:	490d      	ldr	r1, [pc, #52]	; (8003114 <cmd_confwrt+0x44>)
 80030e0:	f7ff fb6e 	bl	80027c0 <chprintf>
 80030e4:	6828      	ldr	r0, [r5, #0]
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	6803      	ldr	r3, [r0, #0]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	4798      	blx	r3
	if (EEPROM_SETTINGS_END > (EEPROM_SIZE -1)){
		chprintf((BaseSequentialStream *)&SD2, "Size of config is too big for EEPROM! Size is: %d\r\n", EEPROM_SETTINGS_SIZE);
		return;
	}
	chprintf((BaseSequentialStream *)&SD2, "config fits. Size is: %d, End of config: %d\r\n", EEPROM_SETTINGS_SIZE, EEPROM_SETTINGS_END);
 80030ee:	f240 1313 	movw	r3, #275	; 0x113
 80030f2:	2294      	movs	r2, #148	; 0x94
 80030f4:	4908      	ldr	r1, [pc, #32]	; (8003118 <cmd_confwrt+0x48>)
 80030f6:	4809      	ldr	r0, [pc, #36]	; (800311c <cmd_confwrt+0x4c>)
 80030f8:	f7ff fb62 	bl	80027c0 <chprintf>
    fileStreamWrite(eeFS, &(cudata.configarray[0]), EEPROM_SETTINGS_SIZE);
 80030fc:	6828      	ldr	r0, [r5, #0]
 80030fe:	2294      	movs	r2, #148	; 0x94
}
 8003100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003104:	6803      	ldr	r3, [r0, #0]
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <cmd_confwrt+0x50>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4718      	bx	r3
 800310c:	20001030 	.word	0x20001030
 8003110:	080063b0 	.word	0x080063b0
 8003114:	080063d0 	.word	0x080063d0
 8003118:	080063e4 	.word	0x080063e4
 800311c:	20000db4 	.word	0x20000db4
 8003120:	20000800 	.word	0x20000800
	...

08003130 <cmd_fillee>:
void cmd_fillee(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003134:	4605      	mov	r5, r0
 8003136:	460c      	mov	r4, r1
 8003138:	b085      	sub	sp, #20
  chprintf(chp, "Fills EEPROM from ADDR with COUNT * DATA with val\r\n");
 800313a:	492e      	ldr	r1, [pc, #184]	; (80031f4 <cmd_fillee+0xc4>)
void cmd_fillee(BaseSequentialStream *chp, int argc, char *argv[]) {
 800313c:	4617      	mov	r7, r2
  chprintf(chp, "Fills EEPROM from ADDR with COUNT * DATA with val\r\n");
 800313e:	f7ff fb3f 	bl	80027c0 <chprintf>
  chprintf(chp, "Usage: fillee ADDRESS[0..4095] COUNT DATA[0..0xff]\r\n");
 8003142:	4628      	mov	r0, r5
 8003144:	492c      	ldr	r1, [pc, #176]	; (80031f8 <cmd_fillee+0xc8>)
 8003146:	f7ff fb3b 	bl	80027c0 <chprintf>
  if (argc != 3)
 800314a:	2c03      	cmp	r4, #3
 800314c:	d002      	beq.n	8003154 <cmd_fillee+0x24>
}
 800314e:	b005      	add	sp, #20
 8003150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pos = eepfs_lseek(&eeFile, atoi(argv[0]));
 8003154:	6838      	ldr	r0, [r7, #0]
 8003156:	f002 fe9d 	bl	8005e94 <atoi>
 800315a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003208 <cmd_fillee+0xd8>
 800315e:	4601      	mov	r1, r0
 8003160:	4658      	mov	r0, fp
 8003162:	f7fe fe6d 	bl	8001e40 <eepfs_lseek>
  cnt = (uint16_t)strtol(argv[1], NULL, 0);
 8003166:	2200      	movs	r2, #0
  pos = eepfs_lseek(&eeFile, atoi(argv[0]));
 8003168:	4682      	mov	sl, r0
  cnt = (uint16_t)strtol(argv[1], NULL, 0);
 800316a:	4611      	mov	r1, r2
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f002 ff1d 	bl	8005fac <strtol>
  data = (uint8_t)strtol(argv[2], NULL, 0);
 8003172:	2200      	movs	r2, #0
  cnt = (uint16_t)strtol(argv[1], NULL, 0);
 8003174:	4681      	mov	r9, r0
  data = (uint8_t)strtol(argv[2], NULL, 0);
 8003176:	4611      	mov	r1, r2
 8003178:	68b8      	ldr	r0, [r7, #8]
 800317a:	f002 ff17 	bl	8005fac <strtol>
  pos = eepfs_lseek(&eeFile, atoi(argv[0]));
 800317e:	fa0f f48a 	sxth.w	r4, sl
  chprintf(chp, "Start writing %d at Pos: %d for cnt: %d\r\n", data, pos, cnt);
 8003182:	fa5f f880 	uxtb.w	r8, r0
 8003186:	fa1f f289 	uxth.w	r2, r9
 800318a:	4623      	mov	r3, r4
 800318c:	9200      	str	r2, [sp, #0]
 800318e:	4628      	mov	r0, r5
 8003190:	4642      	mov	r2, r8
 8003192:	491a      	ldr	r1, [pc, #104]	; (80031fc <cmd_fillee+0xcc>)
 8003194:	f7ff fb14 	bl	80027c0 <chprintf>
  if (pos != eepfs_getposition(&eeFile)){
 8003198:	f8db 3008 	ldr.w	r3, [fp, #8]
 800319c:	429c      	cmp	r4, r3
 800319e:	d121      	bne.n	80031e4 <cmd_fillee+0xb4>
  cnt = (uint16_t)strtol(argv[1], NULL, 0);
 80031a0:	fa1f f689 	uxth.w	r6, r9
  for (i=0; i<cnt; i++){
 80031a4:	b1be      	cbz	r6, 80031d6 <cmd_fillee+0xa6>
 80031a6:	4456      	add	r6, sl
 80031a8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800320c <cmd_fillee+0xdc>
 80031ac:	b2b6      	uxth	r6, r6
    eepfs_lseek(&eeFile, pos++);
 80031ae:	4621      	mov	r1, r4
 80031b0:	4658      	mov	r0, fp
 80031b2:	f7fe fe45 	bl	8001e40 <eepfs_lseek>
    EepromWriteByte(eeFS, data);
 80031b6:	f8d9 0000 	ldr.w	r0, [r9]
 80031ba:	f88d 800f 	strb.w	r8, [sp, #15]
  return fileStreamWrite(efs, &data, sizeof(data));
 80031be:	6803      	ldr	r3, [r0, #0]
 80031c0:	3401      	adds	r4, #1
 80031c2:	fa1f fa84 	uxth.w	sl, r4
 80031c6:	2201      	movs	r2, #1
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f10d 010f 	add.w	r1, sp, #15
 80031ce:	4798      	blx	r3
  for (i=0; i<cnt; i++){
 80031d0:	45b2      	cmp	sl, r6
 80031d2:	b224      	sxth	r4, r4
 80031d4:	d1eb      	bne.n	80031ae <cmd_fillee+0x7e>
  chprintf(chp, "Written to EEPROM\r\n");
 80031d6:	4628      	mov	r0, r5
 80031d8:	4909      	ldr	r1, [pc, #36]	; (8003200 <cmd_fillee+0xd0>)
 80031da:	f7ff faf1 	bl	80027c0 <chprintf>
}
 80031de:	b005      	add	sp, #20
 80031e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chprintf(chp, "EEPROM fseek Error\r\n");
 80031e4:	4628      	mov	r0, r5
 80031e6:	4907      	ldr	r1, [pc, #28]	; (8003204 <cmd_fillee+0xd4>)
 80031e8:	f7ff faea 	bl	80027c0 <chprintf>
}
 80031ec:	b005      	add	sp, #20
 80031ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	08006414 	.word	0x08006414
 80031f8:	08006448 	.word	0x08006448
 80031fc:	08006480 	.word	0x08006480
 8003200:	080064c4 	.word	0x080064c4
 8003204:	080064ac 	.word	0x080064ac
 8003208:	20001034 	.word	0x20001034
 800320c:	20001030 	.word	0x20001030

08003210 <cmd_dumpvar>:
void cmd_dumpvar(BaseSequentialStream *chp, int argc, char *argv[]){
 8003210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  chprintf(chp, "Dumps Struct Variables\r\n");
 8003214:	4919      	ldr	r1, [pc, #100]	; (800327c <cmd_dumpvar+0x6c>)
void cmd_dumpvar(BaseSequentialStream *chp, int argc, char *argv[]){
 8003216:	4680      	mov	r8, r0
  chprintf(chp, "Dumps Struct Variables\r\n");
 8003218:	f7ff fad2 	bl	80027c0 <chprintf>
  chprintf((BaseSequentialStream *)&SD2, "size complete: %d\r\n", szc);
 800321c:	2294      	movs	r2, #148	; 0x94
 800321e:	4918      	ldr	r1, [pc, #96]	; (8003280 <cmd_dumpvar+0x70>)
 8003220:	4818      	ldr	r0, [pc, #96]	; (8003284 <cmd_dumpvar+0x74>)
 8003222:	f7ff facd 	bl	80027c0 <chprintf>
  chprintf((BaseSequentialStream *)&SD2, "%d pages\r\n", szc/EEPROM_PAGE_SIZE);
 8003226:	2204      	movs	r2, #4
 8003228:	4917      	ldr	r1, [pc, #92]	; (8003288 <cmd_dumpvar+0x78>)
 800322a:	4816      	ldr	r0, [pc, #88]	; (8003284 <cmd_dumpvar+0x74>)
 800322c:	f7ff fac8 	bl	80027c0 <chprintf>
  chprintf((BaseSequentialStream *)&SD2, "%d rest\r\n", szc%EEPROM_PAGE_SIZE);
 8003230:	2214      	movs	r2, #20
 8003232:	4916      	ldr	r1, [pc, #88]	; (800328c <cmd_dumpvar+0x7c>)
 8003234:	4813      	ldr	r0, [pc, #76]	; (8003284 <cmd_dumpvar+0x74>)
 8003236:	f7ff fac3 	bl	80027c0 <chprintf>
 800323a:	2400      	movs	r4, #0
 800323c:	4f14      	ldr	r7, [pc, #80]	; (8003290 <cmd_dumpvar+0x80>)
	    chprintf(chp, " pos = %u\r\n", i);
 800323e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800329c <cmd_dumpvar+0x8c>
	  chprintf((BaseSequentialStream *)&SD2, "%02x ", cudata.configarray[i]);
 8003242:	4e14      	ldr	r6, [pc, #80]	; (8003294 <cmd_dumpvar+0x84>)
 8003244:	4d0f      	ldr	r5, [pc, #60]	; (8003284 <cmd_dumpvar+0x74>)
 8003246:	e007      	b.n	8003258 <cmd_dumpvar+0x48>
 8003248:	5d3a      	ldrb	r2, [r7, r4]
 800324a:	4631      	mov	r1, r6
 800324c:	4628      	mov	r0, r5
 800324e:	3401      	adds	r4, #1
 8003250:	f7ff fab6 	bl	80027c0 <chprintf>
  for (i = 0; i<szc; i++){
 8003254:	2c94      	cmp	r4, #148	; 0x94
 8003256:	d007      	beq.n	8003268 <cmd_dumpvar+0x58>
	  if (i%16 == 0){
 8003258:	0723      	lsls	r3, r4, #28
 800325a:	d1f5      	bne.n	8003248 <cmd_dumpvar+0x38>
	    chprintf(chp, " pos = %u\r\n", i);
 800325c:	4622      	mov	r2, r4
 800325e:	4649      	mov	r1, r9
 8003260:	4640      	mov	r0, r8
 8003262:	f7ff faad 	bl	80027c0 <chprintf>
 8003266:	e7ef      	b.n	8003248 <cmd_dumpvar+0x38>
  cli_println("");
 8003268:	490b      	ldr	r1, [pc, #44]	; (8003298 <cmd_dumpvar+0x88>)
 800326a:	4806      	ldr	r0, [pc, #24]	; (8003284 <cmd_dumpvar+0x74>)
 800326c:	f7ff faa8 	bl	80027c0 <chprintf>
}
 8003270:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  chThdSleepMilliseconds(100);
 8003274:	20c8      	movs	r0, #200	; 0xc8
 8003276:	f7ff b81b 	b.w	80022b0 <chThdSleep>
 800327a:	bf00      	nop
 800327c:	080064d8 	.word	0x080064d8
 8003280:	080064f4 	.word	0x080064f4
 8003284:	20000db4 	.word	0x20000db4
 8003288:	08006508 	.word	0x08006508
 800328c:	08006514 	.word	0x08006514
 8003290:	20000800 	.word	0x20000800
 8003294:	0800652c 	.word	0x0800652c
 8003298:	08006894 	.word	0x08006894
 800329c:	08006520 	.word	0x08006520

080032a0 <cmd_writee>:
void cmd_writee(BaseSequentialStream *chp, int argc, char *argv[]) {
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4604      	mov	r4, r0
 80032a4:	460d      	mov	r5, r1
 80032a6:	b082      	sub	sp, #8
  chprintf(chp, "Writes to EEPROM\r\n");
 80032a8:	491b      	ldr	r1, [pc, #108]	; (8003318 <cmd_writee+0x78>)
void cmd_writee(BaseSequentialStream *chp, int argc, char *argv[]) {
 80032aa:	4616      	mov	r6, r2
  chprintf(chp, "Writes to EEPROM\r\n");
 80032ac:	f7ff fa88 	bl	80027c0 <chprintf>
  chprintf(chp, "Usage: writee ADDRESS[0..4095] DATA[0..0xff]\r\n");
 80032b0:	4620      	mov	r0, r4
 80032b2:	491a      	ldr	r1, [pc, #104]	; (800331c <cmd_writee+0x7c>)
 80032b4:	f7ff fa84 	bl	80027c0 <chprintf>
  if (argc != 2)
 80032b8:	2d02      	cmp	r5, #2
 80032ba:	d001      	beq.n	80032c0 <cmd_writee+0x20>
}
 80032bc:	b002      	add	sp, #8
 80032be:	bd70      	pop	{r4, r5, r6, pc}
  pos = eepfs_lseek(&eeFile, atoi(argv[0]));
 80032c0:	6830      	ldr	r0, [r6, #0]
 80032c2:	f002 fde7 	bl	8005e94 <atoi>
 80032c6:	4d16      	ldr	r5, [pc, #88]	; (8003320 <cmd_writee+0x80>)
 80032c8:	4601      	mov	r1, r0
 80032ca:	4628      	mov	r0, r5
 80032cc:	f7fe fdb8 	bl	8001e40 <eepfs_lseek>
  if (pos != eepfs_getposition(&eeFile)){
 80032d0:	68ab      	ldr	r3, [r5, #8]
 80032d2:	b202      	sxth	r2, r0
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d005      	beq.n	80032e4 <cmd_writee+0x44>
    chprintf(chp, "EEPROM fseek Error\r\n");
 80032d8:	4620      	mov	r0, r4
 80032da:	4912      	ldr	r1, [pc, #72]	; (8003324 <cmd_writee+0x84>)
 80032dc:	f7ff fa70 	bl	80027c0 <chprintf>
}
 80032e0:	b002      	add	sp, #8
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
  chprintf(chp, "Pos: %d\r\n", pos);
 80032e4:	4620      	mov	r0, r4
 80032e6:	4910      	ldr	r1, [pc, #64]	; (8003328 <cmd_writee+0x88>)
 80032e8:	f7ff fa6a 	bl	80027c0 <chprintf>
  EepromWriteByte(eeFS, (uint8_t)strtol(argv[1], NULL, 16));
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <cmd_writee+0x8c>)
 80032ee:	2210      	movs	r2, #16
 80032f0:	2100      	movs	r1, #0
 80032f2:	6870      	ldr	r0, [r6, #4]
 80032f4:	681d      	ldr	r5, [r3, #0]
 80032f6:	f002 fe59 	bl	8005fac <strtol>
 80032fa:	f88d 0007 	strb.w	r0, [sp, #7]
 80032fe:	682b      	ldr	r3, [r5, #0]
 8003300:	2201      	movs	r2, #1
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f10d 0107 	add.w	r1, sp, #7
 8003308:	4628      	mov	r0, r5
 800330a:	4798      	blx	r3
  chprintf(chp, "Written to EEPROM\r\n");
 800330c:	4620      	mov	r0, r4
 800330e:	4908      	ldr	r1, [pc, #32]	; (8003330 <cmd_writee+0x90>)
 8003310:	f7ff fa56 	bl	80027c0 <chprintf>
}
 8003314:	b002      	add	sp, #8
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	08006534 	.word	0x08006534
 800331c:	08006548 	.word	0x08006548
 8003320:	20001034 	.word	0x20001034
 8003324:	080064ac 	.word	0x080064ac
 8003328:	08006578 	.word	0x08006578
 800332c:	20001030 	.word	0x20001030
 8003330:	080064c4 	.word	0x080064c4
	...

08003340 <cmd_dumpee>:
void cmd_dumpee(BaseSequentialStream *chp, int argc, char *argv[]){
 8003340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003344:	4614      	mov	r4, r2
 8003346:	b0a2      	sub	sp, #136	; 0x88
  chprintf(chp, "Dumps 128 Byte of EEPROM at Address. Usage: dumpee [addr]\r\n");
 8003348:	4932      	ldr	r1, [pc, #200]	; (8003414 <cmd_dumpee+0xd4>)
void cmd_dumpee(BaseSequentialStream *chp, int argc, char *argv[]){
 800334a:	4605      	mov	r5, r0
  chprintf(chp, "Dumps 128 Byte of EEPROM at Address. Usage: dumpee [addr]\r\n");
 800334c:	f7ff fa38 	bl	80027c0 <chprintf>
  adr = atoi(argv[0]);
 8003350:	6820      	ldr	r0, [r4, #0]
 8003352:	f002 fd9f 	bl	8005e94 <atoi>
  fileStreamSetPosition(eeFS, adr);
 8003356:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800342c <cmd_dumpee+0xec>
 800335a:	b287      	uxth	r7, r0
  chprintf(chp, "Starting at Address: %d\r\n", adr);
 800335c:	463a      	mov	r2, r7
 800335e:	492e      	ldr	r1, [pc, #184]	; (8003418 <cmd_dumpee+0xd8>)
 8003360:	4628      	mov	r0, r5
 8003362:	f7ff fa2d 	bl	80027c0 <chprintf>
  fileStreamSetPosition(eeFS, adr);
 8003366:	f8d9 0000 	ldr.w	r0, [r9]
 800336a:	4639      	mov	r1, r7
 800336c:	6803      	ldr	r3, [r0, #0]
          eeFile.cfg->barrier_low,
 800336e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8003430 <cmd_dumpee+0xf0>
  fileStreamSetPosition(eeFS, adr);
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	4798      	blx	r3
  memset(buf, 0, 128);
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	2100      	movs	r1, #0
 800337a:	a802      	add	r0, sp, #8
 800337c:	f002 fe22 	bl	8005fc4 <memset>
          eeFile.cfg->barrier_low,
 8003380:	f8da 200c 	ldr.w	r2, [sl, #12]
  return ((EepromFileStream *)ip)->position;
 8003384:	f8d9 3000 	ldr.w	r3, [r9]
  chprintf(chp, "size = %u, position = %u, barrier_low = %u, barrier_hi = %u",
 8003388:	6851      	ldr	r1, [r2, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	9101      	str	r1, [sp, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	4922      	ldr	r1, [pc, #136]	; (800341c <cmd_dumpee+0xdc>)
 8003392:	9200      	str	r2, [sp, #0]
 8003394:	4628      	mov	r0, r5
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	f7ff fa12 	bl	80027c0 <chprintf>
  cli_println("");
 800339c:	4920      	ldr	r1, [pc, #128]	; (8003420 <cmd_dumpee+0xe0>)
 800339e:	4821      	ldr	r0, [pc, #132]	; (8003424 <cmd_dumpee+0xe4>)
 80033a0:	f7ff fa0e 	bl	80027c0 <chprintf>
  fileStreamRead(eeFS, buf, 128);
 80033a4:	f8d9 0000 	ldr.w	r0, [r9]
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	6803      	ldr	r3, [r0, #0]
 80033ac:	a902      	add	r1, sp, #8
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4798      	blx	r3
 80033b2:	2400      	movs	r4, #0
    	chprintf(chp, " pos = %u\r\n", adr+i);
 80033b4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003434 <cmd_dumpee+0xf4>
    chprintf(chp, "%02x ", buf[i]);
 80033b8:	4e1b      	ldr	r6, [pc, #108]	; (8003428 <cmd_dumpee+0xe8>)
 80033ba:	e00a      	b.n	80033d2 <cmd_dumpee+0x92>
 80033bc:	ab22      	add	r3, sp, #136	; 0x88
 80033be:	4423      	add	r3, r4
 80033c0:	4631      	mov	r1, r6
 80033c2:	4628      	mov	r0, r5
 80033c4:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 80033c8:	3401      	adds	r4, #1
 80033ca:	f7ff f9f9 	bl	80027c0 <chprintf>
  for (i=0; i<sz; i++){
 80033ce:	2c80      	cmp	r4, #128	; 0x80
 80033d0:	d007      	beq.n	80033e2 <cmd_dumpee+0xa2>
    if (i%16 == 0){
 80033d2:	0723      	lsls	r3, r4, #28
 80033d4:	d1f2      	bne.n	80033bc <cmd_dumpee+0x7c>
    	chprintf(chp, " pos = %u\r\n", adr+i);
 80033d6:	4641      	mov	r1, r8
 80033d8:	4628      	mov	r0, r5
 80033da:	193a      	adds	r2, r7, r4
 80033dc:	f7ff f9f0 	bl	80027c0 <chprintf>
 80033e0:	e7ec      	b.n	80033bc <cmd_dumpee+0x7c>
  cli_println("");
 80033e2:	490f      	ldr	r1, [pc, #60]	; (8003420 <cmd_dumpee+0xe0>)
 80033e4:	480f      	ldr	r0, [pc, #60]	; (8003424 <cmd_dumpee+0xe4>)
 80033e6:	f7ff f9eb 	bl	80027c0 <chprintf>
          eeFile.cfg->barrier_low,
 80033ea:	f8da 200c 	ldr.w	r2, [sl, #12]
 80033ee:	f8d9 3000 	ldr.w	r3, [r9]
  chprintf(chp, "size = %u, position = %u, barrier_low = %u, barrier_hi = %u",
 80033f2:	6851      	ldr	r1, [r2, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	9101      	str	r1, [sp, #4]
 80033f8:	6811      	ldr	r1, [r2, #0]
 80033fa:	4628      	mov	r0, r5
 80033fc:	4622      	mov	r2, r4
 80033fe:	9100      	str	r1, [sp, #0]
 8003400:	4906      	ldr	r1, [pc, #24]	; (800341c <cmd_dumpee+0xdc>)
 8003402:	f7ff f9dd 	bl	80027c0 <chprintf>
    cli_println("");
 8003406:	4906      	ldr	r1, [pc, #24]	; (8003420 <cmd_dumpee+0xe0>)
 8003408:	4806      	ldr	r0, [pc, #24]	; (8003424 <cmd_dumpee+0xe4>)
 800340a:	f7ff f9d9 	bl	80027c0 <chprintf>
}
 800340e:	b022      	add	sp, #136	; 0x88
 8003410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003414:	08006584 	.word	0x08006584
 8003418:	080065c0 	.word	0x080065c0
 800341c:	080065dc 	.word	0x080065dc
 8003420:	08006894 	.word	0x08006894
 8003424:	20000db4 	.word	0x20000db4
 8003428:	0800652c 	.word	0x0800652c
 800342c:	20001030 	.word	0x20001030
 8003430:	20001034 	.word	0x20001034
 8003434:	08006520 	.word	0x08006520
	...

08003440 <cmd_ch_speed_cf>:
void cmd_ch_speed_cf(BaseSequentialStream *chp, int argc, char *argv[]){
 8003440:	b510      	push	{r4, lr}
	if (argc == 0){
 8003442:	b131      	cbz	r1, 8003452 <cmd_ch_speed_cf+0x12>
	cudata.configstruct.corr = atoi(argv[0]);
 8003444:	6810      	ldr	r0, [r2, #0]
 8003446:	f002 fd25 	bl	8005e94 <atoi>
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <cmd_ch_speed_cf+0x34>)
 800344c:	f8a3 0082 	strh.w	r0, [r3, #130]	; 0x82
}
 8003450:	bd10      	pop	{r4, pc}
 8003452:	4604      	mov	r4, r0
	  chprintf(chp, "Set Corr. Factor for Speed (0 <= cf < 65535)\r\n");
 8003454:	4908      	ldr	r1, [pc, #32]	; (8003478 <cmd_ch_speed_cf+0x38>)
 8003456:	f7ff f9b3 	bl	80027c0 <chprintf>
	  chprintf(chp, "1000 equals 100 Percent\r\n");
 800345a:	4620      	mov	r0, r4
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <cmd_ch_speed_cf+0x3c>)
 800345e:	f7ff f9af 	bl	80027c0 <chprintf>
	  chprintf(chp, "Factor is now: %2d\r\n", cudata.configstruct.corr);
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <cmd_ch_speed_cf+0x34>)
 8003464:	4620      	mov	r0, r4
}
 8003466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  chprintf(chp, "Factor is now: %2d\r\n", cudata.configstruct.corr);
 800346a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800346e:	4904      	ldr	r1, [pc, #16]	; (8003480 <cmd_ch_speed_cf+0x40>)
 8003470:	f7ff b9a6 	b.w	80027c0 <chprintf>
 8003474:	20000800 	.word	0x20000800
 8003478:	08006618 	.word	0x08006618
 800347c:	08006648 	.word	0x08006648
 8003480:	08006664 	.word	0x08006664
	...

08003490 <cmd_ch_fspeed>:
	  if (argc != 1) {
 8003490:	2901      	cmp	r1, #1
 8003492:	d002      	beq.n	800349a <cmd_ch_fspeed+0xa>
	    chprintf(chp, "Changes Fake Speed on Speedometer (Speed with 'speed correction factor') \r\n");
 8003494:	490a      	ldr	r1, [pc, #40]	; (80034c0 <cmd_ch_fspeed+0x30>)
 8003496:	f7ff b993 	b.w	80027c0 <chprintf>
void cmd_ch_fspeed(BaseSequentialStream *chp, int argc, char *argv[]){
 800349a:	b508      	push	{r3, lr}
	  ch_fSpeed(atoi(argv[0]));
 800349c:	6810      	ldr	r0, [r2, #0]
 800349e:	f002 fcf9 	bl	8005e94 <atoi>
void ch_fSpeed(uint16_t speed){ // fspeed is Fake speed. It uses a correction factor (corr)
                                // to show (usually) more speed as in reality.
    uint32_t fspeed;
    fspeed = (uint32_t)(speed)*cudata.configstruct.corr;
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <cmd_ch_fspeed+0x34>)
 80034a4:	b283      	uxth	r3, r0
 80034a6:	f8b2 0082 	ldrh.w	r0, [r2, #130]	; 0x82
    ch_Speed((uint16_t)(fspeed / 1000));
 80034aa:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <cmd_ch_fspeed+0x38>)
    fspeed = (uint32_t)(speed)*cudata.configstruct.corr;
 80034ac:	fb00 f003 	mul.w	r0, r0, r3
    ch_Speed((uint16_t)(fspeed / 1000));
 80034b0:	fba2 3000 	umull	r3, r0, r2, r0
}
 80034b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80034b8:	f3c0 108f 	ubfx	r0, r0, #6, #16
 80034bc:	f7fe b9a8 	b.w	8001810 <ch_Speed>
 80034c0:	0800667c 	.word	0x0800667c
 80034c4:	20000800 	.word	0x20000800
 80034c8:	10624dd3 	.word	0x10624dd3
 80034cc:	00000000 	.word	0x00000000

080034d0 <cmd_ch_speed>:
	  if (argc != 1) {
 80034d0:	2901      	cmp	r1, #1
void cmd_ch_speed(BaseSequentialStream *chp, int argc, char *argv[]){
 80034d2:	b510      	push	{r4, lr}
	  if (argc != 1) {
 80034d4:	d00b      	beq.n	80034ee <cmd_ch_speed+0x1e>
 80034d6:	4604      	mov	r4, r0
	    chprintf(chp, "Changes Speed on Speedometer \r\n");
 80034d8:	490a      	ldr	r1, [pc, #40]	; (8003504 <cmd_ch_speed+0x34>)
 80034da:	f7ff f971 	bl	80027c0 <chprintf>
	    chprintf(chp, "Speed is now: %d", speed);
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <cmd_ch_speed+0x38>)
 80034e0:	4620      	mov	r0, r4
}
 80034e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    chprintf(chp, "Speed is now: %d", speed);
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	4908      	ldr	r1, [pc, #32]	; (800350c <cmd_ch_speed+0x3c>)
 80034ea:	f7ff b969 	b.w	80027c0 <chprintf>
	  speed = atoi(argv[0]);
 80034ee:	6810      	ldr	r0, [r2, #0]
 80034f0:	f002 fcd0 	bl	8005e94 <atoi>
}
 80034f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  speed = atoi(argv[0]);
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <cmd_ch_speed+0x38>)
 80034fa:	b280      	uxth	r0, r0
 80034fc:	8018      	strh	r0, [r3, #0]
	  ch_Speed(speed);
 80034fe:	f7fe b987 	b.w	8001810 <ch_Speed>
 8003502:	bf00      	nop
 8003504:	080066c8 	.word	0x080066c8
 8003508:	20001274 	.word	0x20001274
 800350c:	080066e8 	.word	0x080066e8

08003510 <cmd_ch_pwm>:
	  if (argc != 1) {
 8003510:	2901      	cmp	r1, #1
 8003512:	d002      	beq.n	800351a <cmd_ch_pwm+0xa>
	    chprintf(chp, "Changes Freq. of PWM Output to Speedometer \r\n");
 8003514:	4912      	ldr	r1, [pc, #72]	; (8003560 <cmd_ch_pwm+0x50>)
 8003516:	f7ff b953 	b.w	80027c0 <chprintf>
void cmd_ch_pwm(BaseSequentialStream *chp, int argc, char *argv[]){
 800351a:	b538      	push	{r3, r4, r5, lr}
	  ch_PWM_Freq(atoi(argv[0]));
 800351c:	6810      	ldr	r0, [r2, #0]
 800351e:	f002 fcb9 	bl	8005e94 <atoi>
 8003522:	2120      	movs	r1, #32
 8003524:	f381 8811 	msr	BASEPRI, r1
  pwmChangePeriodI(pwmp, period);
 8003528:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <cmd_ch_pwm+0x54>)
 800352a:	1e44      	subs	r4, r0, #1
 800352c:	6993      	ldr	r3, [r2, #24]
 800352e:	6090      	str	r0, [r2, #8]
 8003530:	62dc      	str	r4, [r3, #44]	; 0x2c
 8003532:	2000      	movs	r0, #0
 8003534:	f380 8811 	msr	BASEPRI, r0
    pwmEnableChannel(&PWMD4, 3, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, 5000));
 8003538:	f241 3388 	movw	r3, #5000	; 0x1388
 800353c:	6895      	ldr	r5, [r2, #8]
 800353e:	4c0a      	ldr	r4, [pc, #40]	; (8003568 <cmd_ch_pwm+0x58>)
 8003540:	fb03 f305 	mul.w	r3, r3, r5
 8003544:	fba4 4303 	umull	r4, r3, r4, r3
 8003548:	0b5b      	lsrs	r3, r3, #13
 800354a:	f381 8811 	msr	BASEPRI, r1
  pwmEnableChannelI(pwmp, channel, width);
 800354e:	68d1      	ldr	r1, [r2, #12]
  pwmp->tim->CCR[channel] = width;
 8003550:	6994      	ldr	r4, [r2, #24]
 8003552:	f041 0108 	orr.w	r1, r1, #8
 8003556:	60d1      	str	r1, [r2, #12]
 8003558:	6423      	str	r3, [r4, #64]	; 0x40
 800355a:	f380 8811 	msr	BASEPRI, r0
}
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	080066fc 	.word	0x080066fc
 8003564:	20000d98 	.word	0x20000d98
 8003568:	d1b71759 	.word	0xd1b71759
 800356c:	00000000 	.word	0x00000000

08003570 <cmd_scf>:
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <cmd_scf+0x124>)
void cmd_scf(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003576:	460c      	mov	r4, r1
 8003578:	4605      	mov	r5, r0
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 800357a:	8818      	ldrh	r0, [r3, #0]
void cmd_scf(BaseSequentialStream *chp, int argc, char *argv[]) {
 800357c:	4617      	mov	r7, r2
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 800357e:	f7fe f8d7 	bl	8001730 <get_pos_u16.constprop.0>
  if ((argc != 2) && (argc != 1)) {
 8003582:	1e63      	subs	r3, r4, #1
 8003584:	2b01      	cmp	r3, #1
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 8003586:	4606      	mov	r6, r0
  if ((argc != 2) && (argc != 1)) {
 8003588:	d84e      	bhi.n	8003628 <cmd_scf+0xb8>
  else if (argc == 1){
 800358a:	2c01      	cmp	r4, #1
    cf = atoi(argv[0]);
 800358c:	6838      	ldr	r0, [r7, #0]
   length = cudata.configstruct.table0.t_length;
 800358e:	4c42      	ldr	r4, [pc, #264]	; (8003698 <cmd_scf+0x128>)
  else if (argc == 1){
 8003590:	d027      	beq.n	80035e2 <cmd_scf+0x72>
    length = cudata.configstruct.table0.t_length;
 8003592:	7826      	ldrb	r6, [r4, #0]
    pos = atoi(argv[0]);
 8003594:	f002 fc7e 	bl	8005e94 <atoi>
 8003598:	4680      	mov	r8, r0
    cf = atoi(argv[1]);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f002 fc7a 	bl	8005e94 <atoi>

void set_table_cf_float(table_1d_float_t * corr_tab, uint16_t pos, float cf){
  corr_tab->out[pos] = cf;
}
void set_table_cf_u16(table_1d_u16_t * corr_tab, uint16_t pos, uint16_t cf){
  corr_tab->out[pos] = cf;
 80035a0:	fa1f f888 	uxth.w	r8, r8
 80035a4:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80035a8:	f8a8 0042 	strh.w	r0, [r8, #66]	; 0x42
    chprintf(chp, "Corr. Factor is: ");
 80035ac:	493b      	ldr	r1, [pc, #236]	; (800369c <cmd_scf+0x12c>)
 80035ae:	4628      	mov	r0, r5
 80035b0:	f7ff f906 	bl	80027c0 <chprintf>
    for (i = 0; i < length; i++){
 80035b4:	b17e      	cbz	r6, 80035d6 <cmd_scf+0x66>
 80035b6:	3e01      	subs	r6, #1
 80035b8:	b2f3      	uxtb	r3, r6
      chprintf(chp, "%3d ", (uint32_t)((cudata.configstruct.table0.out[i])*1));
 80035ba:	4f39      	ldr	r7, [pc, #228]	; (80036a0 <cmd_scf+0x130>)
 80035bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035c0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80035c4:	3440      	adds	r4, #64	; 0x40
 80035c6:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 80035ca:	4639      	mov	r1, r7
 80035cc:	4628      	mov	r0, r5
 80035ce:	f7ff f8f7 	bl	80027c0 <chprintf>
    for (i = 0; i < length; i++){
 80035d2:	42b4      	cmp	r4, r6
 80035d4:	d1f7      	bne.n	80035c6 <cmd_scf+0x56>
    chprintf(chp, "\r\n");
 80035d6:	4628      	mov	r0, r5
}
 80035d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chprintf(chp, "\r\n");
 80035dc:	4931      	ldr	r1, [pc, #196]	; (80036a4 <cmd_scf+0x134>)
 80035de:	f7ff b8ef 	b.w	80027c0 <chprintf>
   length = cudata.configstruct.table0.t_length;
 80035e2:	7827      	ldrb	r7, [r4, #0]
    cf = atoi(argv[0]);
 80035e4:	f002 fc56 	bl	8005e94 <atoi>
 80035e8:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 80035ec:	f8a6 0042 	strh.w	r0, [r6, #66]	; 0x42
    chprintf(chp, "Corr. Factor is: ");
 80035f0:	492a      	ldr	r1, [pc, #168]	; (800369c <cmd_scf+0x12c>)
 80035f2:	4628      	mov	r0, r5
 80035f4:	f7ff f8e4 	bl	80027c0 <chprintf>
    for (i = 0; i < length; i++){
 80035f8:	2f00      	cmp	r7, #0
 80035fa:	d0ec      	beq.n	80035d6 <cmd_scf+0x66>
 80035fc:	1e7e      	subs	r6, r7, #1
 80035fe:	b2f3      	uxtb	r3, r6
      chprintf(chp, "%3d ", (uint32_t)((cudata.configstruct.table0.out[i])*1));
 8003600:	4f27      	ldr	r7, [pc, #156]	; (80036a0 <cmd_scf+0x130>)
 8003602:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003606:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800360a:	3440      	adds	r4, #64	; 0x40
 800360c:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 8003610:	4639      	mov	r1, r7
 8003612:	4628      	mov	r0, r5
 8003614:	f7ff f8d4 	bl	80027c0 <chprintf>
    for (i = 0; i < length; i++){
 8003618:	42b4      	cmp	r4, r6
 800361a:	d1f7      	bne.n	800360c <cmd_scf+0x9c>
    chprintf(chp, "\r\n");
 800361c:	4628      	mov	r0, r5
}
 800361e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chprintf(chp, "\r\n");
 8003622:	4920      	ldr	r1, [pc, #128]	; (80036a4 <cmd_scf+0x134>)
 8003624:	f7ff b8cc 	b.w	80027c0 <chprintf>
    chprintf(chp, "Set Corr. Factor at pos: scf POS CORR (0 <= cf < 65535)\r\n");
 8003628:	491f      	ldr	r1, [pc, #124]	; (80036a8 <cmd_scf+0x138>)
 800362a:	4628      	mov	r0, r5
 800362c:	f7ff f8c8 	bl	80027c0 <chprintf>
    length = cudata.configstruct.table0.t_length;
 8003630:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8003698 <cmd_scf+0x128>
    chprintf(chp, "OR Set Corr. Factor at current pos: scf CORR (0 <= cf < 65535)\r\n");
 8003634:	491d      	ldr	r1, [pc, #116]	; (80036ac <cmd_scf+0x13c>)
 8003636:	4628      	mov	r0, r5
 8003638:	f7ff f8c2 	bl	80027c0 <chprintf>
    chprintf(chp, "Change pos with 'cspd' or 'tspd' \r\n");
 800363c:	491c      	ldr	r1, [pc, #112]	; (80036b0 <cmd_scf+0x140>)
 800363e:	4628      	mov	r0, r5
 8003640:	f7ff f8be 	bl	80027c0 <chprintf>
    length = cudata.configstruct.table0.t_length;
 8003644:	f899 4000 	ldrb.w	r4, [r9]
    chprintf(chp, "Corr. Factors are now: ");
 8003648:	4628      	mov	r0, r5
 800364a:	491a      	ldr	r1, [pc, #104]	; (80036b4 <cmd_scf+0x144>)
 800364c:	f7ff f8b8 	bl	80027c0 <chprintf>
    for (i = 0; i < length; i++){
 8003650:	b18c      	cbz	r4, 8003676 <cmd_scf+0x106>
 8003652:	3c01      	subs	r4, #1
 8003654:	b2e4      	uxtb	r4, r4
 8003656:	f109 0742 	add.w	r7, r9, #66	; 0x42
      chprintf(chp, "%3d ", (uint32_t)((cudata.configstruct.table0.out[i])*1));
 800365a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80036a0 <cmd_scf+0x130>
 800365e:	eb07 0744 	add.w	r7, r7, r4, lsl #1
 8003662:	f109 0440 	add.w	r4, r9, #64	; 0x40
 8003666:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 800366a:	4641      	mov	r1, r8
 800366c:	4628      	mov	r0, r5
 800366e:	f7ff f8a7 	bl	80027c0 <chprintf>
    for (i = 0; i < length; i++){
 8003672:	42a7      	cmp	r7, r4
 8003674:	d1f7      	bne.n	8003666 <cmd_scf+0xf6>
    chprintf(chp, "\r\n");
 8003676:	4628      	mov	r0, r5
 8003678:	490a      	ldr	r1, [pc, #40]	; (80036a4 <cmd_scf+0x134>)
    chprintf(chp, "Value at pos. %d is now: %d\r\n", pos, cudata.configstruct.table0.out[pos]);
 800367a:	eb09 0946 	add.w	r9, r9, r6, lsl #1
    chprintf(chp, "\r\n");
 800367e:	f7ff f89f 	bl	80027c0 <chprintf>
    chprintf(chp, "Value at pos. %d is now: %d\r\n", pos, cudata.configstruct.table0.out[pos]);
 8003682:	4632      	mov	r2, r6
 8003684:	4628      	mov	r0, r5
 8003686:	f8b9 3042 	ldrh.w	r3, [r9, #66]	; 0x42
 800368a:	490b      	ldr	r1, [pc, #44]	; (80036b8 <cmd_scf+0x148>)
}
 800368c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chprintf(chp, "Value at pos. %d is now: %d\r\n", pos, cudata.configstruct.table0.out[pos]);
 8003690:	f7ff b896 	b.w	80027c0 <chprintf>
 8003694:	20001274 	.word	0x20001274
 8003698:	20000800 	.word	0x20000800
 800369c:	08006810 	.word	0x08006810
 80036a0:	080067e8 	.word	0x080067e8
 80036a4:	08006894 	.word	0x08006894
 80036a8:	0800672c 	.word	0x0800672c
 80036ac:	08006768 	.word	0x08006768
 80036b0:	080067ac 	.word	0x080067ac
 80036b4:	080067d0 	.word	0x080067d0
 80036b8:	080067f0 	.word	0x080067f0
 80036bc:	00000000 	.word	0x00000000

080036c0 <cmd_smm>:
  if (argc != 2) {
 80036c0:	2902      	cmp	r1, #2
void cmd_smm(BaseSequentialStream *chp, int argc, char *argv[]) {
 80036c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036c6:	4606      	mov	r6, r0
  if (argc != 2) {
 80036c8:	d01e      	beq.n	8003708 <cmd_smm+0x48>
      length = cudata.configstruct.table0.t_length;
 80036ca:	4c32      	ldr	r4, [pc, #200]	; (8003794 <cmd_smm+0xd4>)
    chprintf(chp, "Set Table Min and Max Val: smm MIN MAX \r\n");
 80036cc:	4932      	ldr	r1, [pc, #200]	; (8003798 <cmd_smm+0xd8>)
 80036ce:	f7ff f877 	bl	80027c0 <chprintf>
      length = cudata.configstruct.table0.t_length;
 80036d2:	7825      	ldrb	r5, [r4, #0]
      chprintf(chp, "Length is: %d\r\n", length);
 80036d4:	4630      	mov	r0, r6
 80036d6:	462a      	mov	r2, r5
 80036d8:	4930      	ldr	r1, [pc, #192]	; (800379c <cmd_smm+0xdc>)
 80036da:	f7ff f871 	bl	80027c0 <chprintf>
      for (i = 0; i < length; i++){
 80036de:	b16d      	cbz	r5, 80036fc <cmd_smm+0x3c>
 80036e0:	3d01      	subs	r5, #1
 80036e2:	b2ea      	uxtb	r2, r5
        chprintf(chp, "%d ", (uint32_t)(cudata.configstruct.table0.in[i]*1));
 80036e4:	4f2e      	ldr	r7, [pc, #184]	; (80037a0 <cmd_smm+0xe0>)
 80036e6:	1ca5      	adds	r5, r4, #2
 80036e8:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 80036ec:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 80036f0:	4639      	mov	r1, r7
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7ff f864 	bl	80027c0 <chprintf>
      for (i = 0; i < length; i++){
 80036f8:	42a5      	cmp	r5, r4
 80036fa:	d1f7      	bne.n	80036ec <cmd_smm+0x2c>
      chprintf(chp, "\r\n");
 80036fc:	4630      	mov	r0, r6
}
 80036fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      chprintf(chp, "\r\n");
 8003702:	4928      	ldr	r1, [pc, #160]	; (80037a4 <cmd_smm+0xe4>)
 8003704:	f7ff b85c 	b.w	80027c0 <chprintf>
  uint16_t min = atoi(argv[0]);
 8003708:	6810      	ldr	r0, [r2, #0]
 800370a:	4614      	mov	r4, r2
 800370c:	f002 fbc2 	bl	8005e94 <atoi>
 8003710:	4605      	mov	r5, r0
  uint16_t max = atoi(argv[1]);
 8003712:	6860      	ldr	r0, [r4, #4]
 8003714:	f002 fbbe 	bl	8005e94 <atoi>
  float step = (max - min) / (corr_tab->t_length - 1);
 8003718:	4c1e      	ldr	r4, [pc, #120]	; (8003794 <cmd_smm+0xd4>)
 800371a:	b2ad      	uxth	r5, r5
 800371c:	8827      	ldrh	r7, [r4, #0]
 800371e:	b280      	uxth	r0, r0
 8003720:	1e7b      	subs	r3, r7, #1
 8003722:	1b40      	subs	r0, r0, r5
 8003724:	fb90 f0f3 	sdiv	r0, r0, r3
 8003728:	f7fd fbec 	bl	8000f04 <__aeabi_i2f>
 800372c:	4680      	mov	r8, r0
  for (i=0; i < corr_tab->t_length; i++){
 800372e:	b1af      	cbz	r7, 800375c <cmd_smm+0x9c>
 8003730:	4628      	mov	r0, r5
 8003732:	f7fd fbe7 	bl	8000f04 <__aeabi_i2f>
 8003736:	4625      	mov	r5, r4
 8003738:	4681      	mov	r9, r0
 800373a:	2400      	movs	r4, #0
    corr_tab->in[i] = min + i * step;
 800373c:	4620      	mov	r0, r4
 800373e:	f7fd fbe1 	bl	8000f04 <__aeabi_i2f>
 8003742:	4641      	mov	r1, r8
 8003744:	f7fd fc32 	bl	8000fac <__aeabi_fmul>
 8003748:	4649      	mov	r1, r9
 800374a:	f7fd fb27 	bl	8000d9c <__addsf3>
 800374e:	f7fd fdf3 	bl	8001338 <__aeabi_f2uiz>
  for (i=0; i < corr_tab->t_length; i++){
 8003752:	3401      	adds	r4, #1
 8003754:	42a7      	cmp	r7, r4
    corr_tab->in[i] = min + i * step;
 8003756:	f825 0f02 	strh.w	r0, [r5, #2]!
  for (i=0; i < corr_tab->t_length; i++){
 800375a:	d1ef      	bne.n	800373c <cmd_smm+0x7c>
  length = cudata.configstruct.table0.t_length;
 800375c:	b2ff      	uxtb	r7, r7
  chprintf(chp, "Data is: \r\n");
 800375e:	4630      	mov	r0, r6
 8003760:	4911      	ldr	r1, [pc, #68]	; (80037a8 <cmd_smm+0xe8>)
 8003762:	f7ff f82d 	bl	80027c0 <chprintf>
  for (i = 0; i < length; i++){
 8003766:	2f00      	cmp	r7, #0
 8003768:	d0c8      	beq.n	80036fc <cmd_smm+0x3c>
 800376a:	4c0a      	ldr	r4, [pc, #40]	; (8003794 <cmd_smm+0xd4>)
 800376c:	3f01      	subs	r7, #1
 800376e:	b2ff      	uxtb	r7, r7
 8003770:	1ca3      	adds	r3, r4, #2
    chprintf(chp, "%3d ", (uint32_t)(cudata.configstruct.table0.in[i]*1));
 8003772:	4d0e      	ldr	r5, [pc, #56]	; (80037ac <cmd_smm+0xec>)
 8003774:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8003778:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 800377c:	4629      	mov	r1, r5
 800377e:	4630      	mov	r0, r6
 8003780:	f7ff f81e 	bl	80027c0 <chprintf>
  for (i = 0; i < length; i++){
 8003784:	42bc      	cmp	r4, r7
 8003786:	d1f7      	bne.n	8003778 <cmd_smm+0xb8>
      chprintf(chp, "\r\n");
 8003788:	4630      	mov	r0, r6
}
 800378a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      chprintf(chp, "\r\n");
 800378e:	4905      	ldr	r1, [pc, #20]	; (80037a4 <cmd_smm+0xe4>)
 8003790:	f7ff b816 	b.w	80027c0 <chprintf>
 8003794:	20000800 	.word	0x20000800
 8003798:	08006824 	.word	0x08006824
 800379c:	08006850 	.word	0x08006850
 80037a0:	08006860 	.word	0x08006860
 80037a4:	08006894 	.word	0x08006894
 80037a8:	08006864 	.word	0x08006864
 80037ac:	080067e8 	.word	0x080067e8

080037b0 <cmd_stl>:
  if (argc != 1) {
 80037b0:	2901      	cmp	r1, #1
void cmd_stl(BaseSequentialStream *chp, int argc, char *argv[]) {
 80037b2:	b510      	push	{r4, lr}
 80037b4:	4604      	mov	r4, r0
  if (argc != 1) {
 80037b6:	d113      	bne.n	80037e0 <cmd_stl+0x30>
  uint8_t tl = atoi(argv[0]);
 80037b8:	6810      	ldr	r0, [r2, #0]
 80037ba:	f002 fb6b 	bl	8005e94 <atoi>
 80037be:	b2c2      	uxtb	r2, r0
  if (tl > TABLE_LENGTH){
 80037c0:	2a20      	cmp	r2, #32
 80037c2:	d807      	bhi.n	80037d4 <cmd_stl+0x24>
  corr_tab->t_length = tl;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <cmd_stl+0x48>)
  chprintf(chp, "Length is changed to: %2d\r\n", cudata.configstruct.table0.t_length);
 80037c6:	4620      	mov	r0, r4
}
 80037c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chprintf(chp, "Length is changed to: %2d\r\n", cudata.configstruct.table0.t_length);
 80037cc:	490b      	ldr	r1, [pc, #44]	; (80037fc <cmd_stl+0x4c>)
  set_table_length(&cudata.configstruct.table0, tl);
 80037ce:	801a      	strh	r2, [r3, #0]
  chprintf(chp, "Length is changed to: %2d\r\n", cudata.configstruct.table0.t_length);
 80037d0:	f7fe bff6 	b.w	80027c0 <chprintf>
	  chprintf(chp, "Table Lentgh too big! Max. LENGTH = 32\r\n");
 80037d4:	4620      	mov	r0, r4
}
 80037d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  chprintf(chp, "Table Lentgh too big! Max. LENGTH = 32\r\n");
 80037da:	4909      	ldr	r1, [pc, #36]	; (8003800 <cmd_stl+0x50>)
 80037dc:	f7fe bff0 	b.w	80027c0 <chprintf>
    chprintf(chp, "Set Table Lentgh: stl LENGTH(1..32) \r\n");
 80037e0:	4908      	ldr	r1, [pc, #32]	; (8003804 <cmd_stl+0x54>)
 80037e2:	f7fe ffed 	bl	80027c0 <chprintf>
      chprintf(chp, "Table Length is now: %2d\r\n", cudata.configstruct.table0.t_length);
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <cmd_stl+0x48>)
 80037e8:	4620      	mov	r0, r4
}
 80037ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      chprintf(chp, "Table Length is now: %2d\r\n", cudata.configstruct.table0.t_length);
 80037ee:	881a      	ldrh	r2, [r3, #0]
 80037f0:	4905      	ldr	r1, [pc, #20]	; (8003808 <cmd_stl+0x58>)
 80037f2:	f7fe bfe5 	b.w	80027c0 <chprintf>
 80037f6:	bf00      	nop
 80037f8:	20000800 	.word	0x20000800
 80037fc:	080068e0 	.word	0x080068e0
 8003800:	080068b4 	.word	0x080068b4
 8003804:	08006870 	.word	0x08006870
 8003808:	08006898 	.word	0x08006898
 800380c:	00000000 	.word	0x00000000

08003810 <cmd_status>:
void cmd_status(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003810:	b510      	push	{r4, lr}
  chprintf(chp, "Status of Variables is: %u %d %u %d\r\n", one, two, three, four);
 8003812:	4a08      	ldr	r2, [pc, #32]	; (8003834 <cmd_status+0x24>)
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <cmd_status+0x28>)
 8003816:	6814      	ldr	r4, [r2, #0]
 8003818:	6819      	ldr	r1, [r3, #0]
void cmd_status(BaseSequentialStream *chp, int argc, char *argv[]) {
 800381a:	b082      	sub	sp, #8
  chprintf(chp, "Status of Variables is: %u %d %u %d\r\n", one, two, three, four);
 800381c:	e9cd 1400 	strd	r1, r4, [sp]
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <cmd_status+0x2c>)
 8003822:	4a07      	ldr	r2, [pc, #28]	; (8003840 <cmd_status+0x30>)
 8003824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003828:	8812      	ldrh	r2, [r2, #0]
 800382a:	4906      	ldr	r1, [pc, #24]	; (8003844 <cmd_status+0x34>)
 800382c:	f7fe ffc8 	bl	80027c0 <chprintf>
}
 8003830:	b002      	add	sp, #8
 8003832:	bd10      	pop	{r4, pc}
 8003834:	200008a0 	.word	0x200008a0
 8003838:	200008fc 	.word	0x200008fc
 800383c:	20000900 	.word	0x20000900
 8003840:	200008c4 	.word	0x200008c4
 8003844:	080068fc 	.word	0x080068fc
	...

08003850 <shellModifyu16>:
 void shellModifyu16(BaseSequentialStream *chp, uint16_t * modify_p) {
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	4605      	mov	r5, r0
 8003854:	460c      	mov	r4, r1
 8003856:	b083      	sub	sp, #12
  chprintf(chp, "Welcome to modify u16\r\n");
 8003858:	4943      	ldr	r1, [pc, #268]	; (8003968 <shellModifyu16+0x118>)
 800385a:	f7fe ffb1 	bl	80027c0 <chprintf>
  chprintf(chp, "press '+' to increase one, '-' to decrease one \r\n");
 800385e:	4943      	ldr	r1, [pc, #268]	; (800396c <shellModifyu16+0x11c>)
 8003860:	4628      	mov	r0, r5
 8003862:	f7fe ffad 	bl	80027c0 <chprintf>
  chprintf(chp, "'D' to increase 10, 'd' to decrease 10 \r\n");
 8003866:	4942      	ldr	r1, [pc, #264]	; (8003970 <shellModifyu16+0x120>)
 8003868:	4628      	mov	r0, r5
 800386a:	f7fe ffa9 	bl	80027c0 <chprintf>
  chprintf(chp, "'C' to increase 100, 'c' to decrease 100 \r\n");
 800386e:	4941      	ldr	r1, [pc, #260]	; (8003974 <shellModifyu16+0x124>)
 8003870:	4628      	mov	r0, r5
 8003872:	f7fe ffa5 	bl	80027c0 <chprintf>
  chprintf(chp, "'M' to increase 1000, 'm' to decrease 1000 \r\n");
 8003876:	4940      	ldr	r1, [pc, #256]	; (8003978 <shellModifyu16+0x128>)
 8003878:	4628      	mov	r0, r5
 800387a:	f7fe ffa1 	bl	80027c0 <chprintf>
  chprintf(chp, "'*' to multiply with 10, '/' to divide by 10 \r\n");
 800387e:	493f      	ldr	r1, [pc, #252]	; (800397c <shellModifyu16+0x12c>)
 8003880:	4628      	mov	r0, r5
 8003882:	f7fe ff9d 	bl	80027c0 <chprintf>
  chprintf(chp, "press 'x' to exit \r\n");
 8003886:	493e      	ldr	r1, [pc, #248]	; (8003980 <shellModifyu16+0x130>)
 8003888:	4628      	mov	r0, r5
 800388a:	f7fe ff99 	bl	80027c0 <chprintf>
  chprintf(chp, "Status of var is: %u\r\n", *modify_p);
 800388e:	4628      	mov	r0, r5
 8003890:	8822      	ldrh	r2, [r4, #0]
 8003892:	493c      	ldr	r1, [pc, #240]	; (8003984 <shellModifyu16+0x134>)
 8003894:	f7fe ff94 	bl	80027c0 <chprintf>
    chprintf(chp, "%u\r\n", *modify_p);
 8003898:	4e3b      	ldr	r6, [pc, #236]	; (8003988 <shellModifyu16+0x138>)
      *modify_p /= 10;
 800389a:	4f3c      	ldr	r7, [pc, #240]	; (800398c <shellModifyu16+0x13c>)
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	4628      	mov	r0, r5
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f10d 0107 	add.w	r1, sp, #7
 80038a8:	4798      	blx	r3
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d04b      	beq.n	8003946 <shellModifyu16+0xf6>
    if (c == '+') {
 80038ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80038b2:	2b2b      	cmp	r3, #43	; 0x2b
 80038b4:	d00f      	beq.n	80038d6 <shellModifyu16+0x86>
    if (c == '-') {
 80038b6:	2b2d      	cmp	r3, #45	; 0x2d
 80038b8:	d017      	beq.n	80038ea <shellModifyu16+0x9a>
    if (c == 'D') {
 80038ba:	2b44      	cmp	r3, #68	; 0x44
 80038bc:	d10f      	bne.n	80038de <shellModifyu16+0x8e>
      *modify_p += 10;
 80038be:	8823      	ldrh	r3, [r4, #0]
 80038c0:	330a      	adds	r3, #10
 80038c2:	8023      	strh	r3, [r4, #0]
    if (c == 'c') {
 80038c4:	8822      	ldrh	r2, [r4, #0]
    chprintf(chp, "%u\r\n", *modify_p);
 80038c6:	4631      	mov	r1, r6
 80038c8:	4628      	mov	r0, r5
 80038ca:	f7fe ff79 	bl	80027c0 <chprintf>
  ch_Speed(*v);
 80038ce:	8820      	ldrh	r0, [r4, #0]
 80038d0:	f7fd ff9e 	bl	8001810 <ch_Speed>
 80038d4:	e7e2      	b.n	800389c <shellModifyu16+0x4c>
      (*modify_p)++;
 80038d6:	8823      	ldrh	r3, [r4, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	8023      	strh	r3, [r4, #0]
    if (c == 'C') {
 80038dc:	e7f2      	b.n	80038c4 <shellModifyu16+0x74>
    if (c == 'd') {
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d107      	bne.n	80038f2 <shellModifyu16+0xa2>
      *modify_p -= 10;
 80038e2:	8823      	ldrh	r3, [r4, #0]
 80038e4:	3b0a      	subs	r3, #10
 80038e6:	8023      	strh	r3, [r4, #0]
    if (c == 'M') {
 80038e8:	e7ec      	b.n	80038c4 <shellModifyu16+0x74>
      (*modify_p)--;
 80038ea:	8823      	ldrh	r3, [r4, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	8023      	strh	r3, [r4, #0]
    if (c == 'C') {
 80038f0:	e7e8      	b.n	80038c4 <shellModifyu16+0x74>
 80038f2:	2b43      	cmp	r3, #67	; 0x43
 80038f4:	d103      	bne.n	80038fe <shellModifyu16+0xae>
      *modify_p += 100;
 80038f6:	8823      	ldrh	r3, [r4, #0]
 80038f8:	3364      	adds	r3, #100	; 0x64
 80038fa:	8023      	strh	r3, [r4, #0]
    if (c == '*') {
 80038fc:	e7e2      	b.n	80038c4 <shellModifyu16+0x74>
    if (c == 'c') {
 80038fe:	2b63      	cmp	r3, #99	; 0x63
 8003900:	d103      	bne.n	800390a <shellModifyu16+0xba>
      *modify_p -= 100;
 8003902:	8823      	ldrh	r3, [r4, #0]
 8003904:	3b64      	subs	r3, #100	; 0x64
 8003906:	8023      	strh	r3, [r4, #0]
    if (c == '/') {
 8003908:	e7dc      	b.n	80038c4 <shellModifyu16+0x74>
    if (c == 'M') {
 800390a:	2b4d      	cmp	r3, #77	; 0x4d
 800390c:	d104      	bne.n	8003918 <shellModifyu16+0xc8>
       *modify_p += 1000;
 800390e:	8823      	ldrh	r3, [r4, #0]
 8003910:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003914:	8023      	strh	r3, [r4, #0]
    if (c == 'x') {
 8003916:	e7d5      	b.n	80038c4 <shellModifyu16+0x74>
     if (c == 'm') {
 8003918:	2b6d      	cmp	r3, #109	; 0x6d
 800391a:	d104      	bne.n	8003926 <shellModifyu16+0xd6>
       *modify_p -= 1000;
 800391c:	8823      	ldrh	r3, [r4, #0]
 800391e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003922:	8023      	strh	r3, [r4, #0]
    if (c < 0x20)
 8003924:	e7ce      	b.n	80038c4 <shellModifyu16+0x74>
    if (c == '*') {
 8003926:	2b2a      	cmp	r3, #42	; 0x2a
 8003928:	d105      	bne.n	8003936 <shellModifyu16+0xe6>
      *modify_p *= 10;
 800392a:	8823      	ldrh	r3, [r4, #0]
 800392c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	8023      	strh	r3, [r4, #0]
    if (c < 0x20)
 8003934:	e7c6      	b.n	80038c4 <shellModifyu16+0x74>
    if (c == '/') {
 8003936:	2b2f      	cmp	r3, #47	; 0x2f
 8003938:	d10a      	bne.n	8003950 <shellModifyu16+0x100>
      *modify_p /= 10;
 800393a:	8822      	ldrh	r2, [r4, #0]
 800393c:	fba7 3202 	umull	r3, r2, r7, r2
 8003940:	08d2      	lsrs	r2, r2, #3
 8003942:	8022      	strh	r2, [r4, #0]
    if (c < 0x20)
 8003944:	e7bf      	b.n	80038c6 <shellModifyu16+0x76>
      chThdSleepMilliseconds(250);
 8003946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800394a:	f7fe fcb1 	bl	80022b0 <chThdSleep>
 800394e:	e7ae      	b.n	80038ae <shellModifyu16+0x5e>
    if (c == 'x') {
 8003950:	2b78      	cmp	r3, #120	; 0x78
 8003952:	d105      	bne.n	8003960 <shellModifyu16+0x110>
      chprintf(chp, "EXIT\r\n");
 8003954:	4628      	mov	r0, r5
 8003956:	490e      	ldr	r1, [pc, #56]	; (8003990 <shellModifyu16+0x140>)
 8003958:	f7fe ff32 	bl	80027c0 <chprintf>
}
 800395c:	b003      	add	sp, #12
 800395e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c < 0x20)
 8003960:	2b1f      	cmp	r3, #31
 8003962:	d99b      	bls.n	800389c <shellModifyu16+0x4c>
 8003964:	e7ae      	b.n	80038c4 <shellModifyu16+0x74>
 8003966:	bf00      	nop
 8003968:	08006924 	.word	0x08006924
 800396c:	0800693c 	.word	0x0800693c
 8003970:	08006970 	.word	0x08006970
 8003974:	0800699c 	.word	0x0800699c
 8003978:	080069c8 	.word	0x080069c8
 800397c:	080069f8 	.word	0x080069f8
 8003980:	08006a28 	.word	0x08006a28
 8003984:	08006a40 	.word	0x08006a40
 8003988:	08006a60 	.word	0x08006a60
 800398c:	cccccccd 	.word	0xcccccccd
 8003990:	08006a58 	.word	0x08006a58
	...

080039a0 <cmd_tune_speed>:
void cmd_tune_speed(BaseSequentialStream *chp, int argc, char *argv[]) {
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a4:	460c      	mov	r4, r1
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 80039a6:	4e4e      	ldr	r6, [pc, #312]	; (8003ae0 <cmd_tune_speed+0x140>)
void cmd_tune_speed(BaseSequentialStream *chp, int argc, char *argv[]) {
 80039a8:	4682      	mov	sl, r0
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 80039aa:	8837      	ldrh	r7, [r6, #0]
void cmd_tune_speed(BaseSequentialStream *chp, int argc, char *argv[]) {
 80039ac:	b083      	sub	sp, #12
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 80039ae:	4638      	mov	r0, r7
void cmd_tune_speed(BaseSequentialStream *chp, int argc, char *argv[]) {
 80039b0:	4615      	mov	r5, r2
  uint16_t pos = get_pos_u16(&cudata.configstruct.table0, speed);
 80039b2:	f7fd febd 	bl	8001730 <get_pos_u16.constprop.0>
  if (argc == 1){
 80039b6:	2c01      	cmp	r4, #1
 80039b8:	d076      	beq.n	8003aa8 <cmd_tune_speed+0x108>
	  chprintf(chp, "Speed is now: %d\r\n", speed);
 80039ba:	463a      	mov	r2, r7
 80039bc:	4650      	mov	r0, sl
 80039be:	4949      	ldr	r1, [pc, #292]	; (8003ae4 <cmd_tune_speed+0x144>)
 80039c0:	f7fe fefe 	bl	80027c0 <chprintf>
  if (speed == 0){
 80039c4:	8830      	ldrh	r0, [r6, #0]
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d07b      	beq.n	8003ac2 <cmd_tune_speed+0x122>
  pos = get_pos_u16(&cudata.configstruct.table0, speed);
 80039ca:	f7fd feb1 	bl	8001730 <get_pos_u16.constprop.0>
 80039ce:	4604      	mov	r4, r0
 80039d0:	4d45      	ldr	r5, [pc, #276]	; (8003ae8 <cmd_tune_speed+0x148>)
  chprintf(chp, "Pos. is now: %2d\r\n", pos);
 80039d2:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8003b10 <cmd_tune_speed+0x170>
  chprintf(chp, "Speed at pos. is now: %d\r\n", cudata.configstruct.table0.in[pos]);
 80039d6:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003b14 <cmd_tune_speed+0x174>
  chprintf(chp, "Value at pos. is now: %d\r\n", cf);
 80039da:	4f44      	ldr	r7, [pc, #272]	; (8003aec <cmd_tune_speed+0x14c>)
  cf = cudata.configstruct.table0.out[pos];
 80039dc:	f104 0b20 	add.w	fp, r4, #32
  chprintf(chp, "Pos. is now: %2d\r\n", pos);
 80039e0:	4622      	mov	r2, r4
 80039e2:	4649      	mov	r1, r9
  cf = cudata.configstruct.table0.out[pos];
 80039e4:	eb05 0b4b 	add.w	fp, r5, fp, lsl #1
  chprintf(chp, "Pos. is now: %2d\r\n", pos);
 80039e8:	4650      	mov	r0, sl
 80039ea:	f7fe fee9 	bl	80027c0 <chprintf>
  cf = cudata.configstruct.table0.out[pos];
 80039ee:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  chprintf(chp, "Speed at pos. is now: %d\r\n", cudata.configstruct.table0.in[pos]);
 80039f2:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 80039f6:	4641      	mov	r1, r8
 80039f8:	8852      	ldrh	r2, [r2, #2]
 80039fa:	4650      	mov	r0, sl
  cf = cudata.configstruct.table0.out[pos];
 80039fc:	f8ad 3006 	strh.w	r3, [sp, #6]
  chprintf(chp, "Speed at pos. is now: %d\r\n", cudata.configstruct.table0.in[pos]);
 8003a00:	f7fe fede 	bl	80027c0 <chprintf>
  chprintf(chp, "Value at pos. is now: %d\r\n", cf);
 8003a04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003a08:	4639      	mov	r1, r7
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	f7fe fed8 	bl	80027c0 <chprintf>
  ch_Speed(*v);
 8003a10:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003a14:	f7fd fefc 	bl	8001810 <ch_Speed>
  shellModifyu16(chp, &cf);
 8003a18:	4650      	mov	r0, sl
 8003a1a:	f10d 0106 	add.w	r1, sp, #6
 8003a1e:	f7ff ff17 	bl	8003850 <shellModifyu16>
  set_table_cf_u16(&cudata.configstruct.table0, pos, cf);
 8003a22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  chprintf(chp, "Corr. Factor is: %d\r\n", cf);
 8003a26:	4650      	mov	r0, sl
 8003a28:	4931      	ldr	r1, [pc, #196]	; (8003af0 <cmd_tune_speed+0x150>)
  corr_tab->out[pos] = cf;
 8003a2a:	f8ab 2002 	strh.w	r2, [fp, #2]
 8003a2e:	f7fe fec7 	bl	80027c0 <chprintf>
  if (pos < cudata.configstruct.table0.t_length - 1){
 8003a32:	882b      	ldrh	r3, [r5, #0]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	429c      	cmp	r4, r3
 8003a38:	da2d      	bge.n	8003a96 <cmd_tune_speed+0xf6>
	  chprintf(chp, "Value at next pos. is: %d\r\n", cudata.configstruct.table0.out[pos+1]);
 8003a3a:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8003a3e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003a42:	492c      	ldr	r1, [pc, #176]	; (8003af4 <cmd_tune_speed+0x154>)
 8003a44:	4650      	mov	r0, sl
 8003a46:	f7fe febb 	bl	80027c0 <chprintf>
	  chprintf(chp, "Would you like to tune the next value? [y,n] \r\n");
 8003a4a:	4650      	mov	r0, sl
 8003a4c:	492a      	ldr	r1, [pc, #168]	; (8003af8 <cmd_tune_speed+0x158>)
 8003a4e:	f7fe feb7 	bl	80027c0 <chprintf>
	  chprintf(chp, "Value at next pos. is: %d\r\n", cudata.configstruct.table0.out[pos+1]);
 8003a52:	3401      	adds	r4, #1
 8003a54:	e007      	b.n	8003a66 <cmd_tune_speed+0xc6>
		  if ((c == 'n') || (c == 'N')) {
 8003a56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003a5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003a5e:	2b4e      	cmp	r3, #78	; 0x4e
 8003a60:	d015      	beq.n	8003a8e <cmd_tune_speed+0xee>
		  if ((c == 'y') || (c == 'Y')) {
 8003a62:	2b59      	cmp	r3, #89	; 0x59
 8003a64:	d01a      	beq.n	8003a9c <cmd_tune_speed+0xfc>
		  if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8003a66:	f8da 3000 	ldr.w	r3, [sl]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4650      	mov	r0, sl
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f10d 0105 	add.w	r1, sp, #5
 8003a74:	4798      	blx	r3
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d1ed      	bne.n	8003a56 <cmd_tune_speed+0xb6>
		  	  chThdSleepMilliseconds(250);
 8003a7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a7e:	f7fe fc17 	bl	80022b0 <chThdSleep>
		  if ((c == 'n') || (c == 'N')) {
 8003a82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003a86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003a8a:	2b4e      	cmp	r3, #78	; 0x4e
 8003a8c:	d1e9      	bne.n	8003a62 <cmd_tune_speed+0xc2>
		      chprintf(chp, "EXIT\r\n");
 8003a8e:	4650      	mov	r0, sl
 8003a90:	491a      	ldr	r1, [pc, #104]	; (8003afc <cmd_tune_speed+0x15c>)
 8003a92:	f7fe fe95 	bl	80027c0 <chprintf>
}
 8003a96:	b003      	add	sp, #12
 8003a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              speed = cudata.configstruct.table0.in[pos];
 8003a9c:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8003aa0:	885b      	ldrh	r3, [r3, #2]
              pos ++;
 8003aa2:	b2a4      	uxth	r4, r4
              speed = cudata.configstruct.table0.in[pos];
 8003aa4:	8033      	strh	r3, [r6, #0]
              goto new_loop;
 8003aa6:	e799      	b.n	80039dc <cmd_tune_speed+0x3c>
    speed = atoi(argv[0]);
 8003aa8:	6828      	ldr	r0, [r5, #0]
 8003aaa:	f002 f9f3 	bl	8005e94 <atoi>
 8003aae:	4603      	mov	r3, r0
    chprintf(chp, "Changed speed to: %d\r\n", speed);
 8003ab0:	b282      	uxth	r2, r0
 8003ab2:	4913      	ldr	r1, [pc, #76]	; (8003b00 <cmd_tune_speed+0x160>)
 8003ab4:	4650      	mov	r0, sl
    speed = atoi(argv[0]);
 8003ab6:	8033      	strh	r3, [r6, #0]
    chprintf(chp, "Changed speed to: %d\r\n", speed);
 8003ab8:	f7fe fe82 	bl	80027c0 <chprintf>
  if (speed == 0){
 8003abc:	8830      	ldrh	r0, [r6, #0]
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d183      	bne.n	80039ca <cmd_tune_speed+0x2a>
    chprintf(chp, "Set PWM Output in table at current pos: tspd \r\n");
 8003ac2:	4650      	mov	r0, sl
 8003ac4:	490f      	ldr	r1, [pc, #60]	; (8003b04 <cmd_tune_speed+0x164>)
 8003ac6:	f7fe fe7b 	bl	80027c0 <chprintf>
    chprintf(chp, "Speed seems to be zero. Please enter desired speed with 'cspd XXX' or 'tspd XXX' \r\n");
 8003aca:	4650      	mov	r0, sl
 8003acc:	490e      	ldr	r1, [pc, #56]	; (8003b08 <cmd_tune_speed+0x168>)
 8003ace:	f7fe fe77 	bl	80027c0 <chprintf>
    chprintf(chp, "Please enter desired SPEED Output (should be a Value in the Table! - Check with 'smm 0')\r\n");
 8003ad2:	4650      	mov	r0, sl
 8003ad4:	490d      	ldr	r1, [pc, #52]	; (8003b0c <cmd_tune_speed+0x16c>)
 8003ad6:	f7fe fe73 	bl	80027c0 <chprintf>
}
 8003ada:	b003      	add	sp, #12
 8003adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae0:	20001274 	.word	0x20001274
 8003ae4:	08006a80 	.word	0x08006a80
 8003ae8:	20000800 	.word	0x20000800
 8003aec:	08006ba4 	.word	0x08006ba4
 8003af0:	08006bc0 	.word	0x08006bc0
 8003af4:	08006bd8 	.word	0x08006bd8
 8003af8:	08006bf4 	.word	0x08006bf4
 8003afc:	08006a58 	.word	0x08006a58
 8003b00:	08006a68 	.word	0x08006a68
 8003b04:	08006a94 	.word	0x08006a94
 8003b08:	08006ac4 	.word	0x08006ac4
 8003b0c:	08006b18 	.word	0x08006b18
 8003b10:	08006b74 	.word	0x08006b74
 8003b14:	08006b88 	.word	0x08006b88
	...

08003b20 <cmd_modify>:
void cmd_modify(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (argc != 1) {
 8003b24:	2901      	cmp	r1, #1
void cmd_modify(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003b26:	b082      	sub	sp, #8
  if (argc != 1) {
 8003b28:	d005      	beq.n	8003b36 <cmd_modify+0x16>
    chprintf(chp, usage);
 8003b2a:	49b1      	ldr	r1, [pc, #708]	; (8003df0 <cmd_modify+0x2d0>)
 8003b2c:	f7fe fe48 	bl	80027c0 <chprintf>
}
 8003b30:	b002      	add	sp, #8
 8003b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b36:	4604      	mov	r4, r0
  switch (atoi(argv[0])){
 8003b38:	6810      	ldr	r0, [r2, #0]
 8003b3a:	f002 f9ab 	bl	8005e94 <atoi>
 8003b3e:	2803      	cmp	r0, #3
 8003b40:	f200 819a 	bhi.w	8003e78 <cmd_modify+0x358>
 8003b44:	e8df f000 	tbb	[pc, r0]
 8003b48:	02427fbe 	.word	0x02427fbe
  chprintf(chp, "Welcome to modify s32\r\n");
 8003b4c:	49a9      	ldr	r1, [pc, #676]	; (8003df4 <cmd_modify+0x2d4>)
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7fe fe36 	bl	80027c0 <chprintf>
  chprintf(chp, "press '+' to increase one, '-' to decrease one \r\n");
 8003b54:	49a8      	ldr	r1, [pc, #672]	; (8003df8 <cmd_modify+0x2d8>)
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fe fe32 	bl	80027c0 <chprintf>
  chprintf(chp, "'u' to increase 10, 'd' to decrease 10 \r\n");
 8003b5c:	49a7      	ldr	r1, [pc, #668]	; (8003dfc <cmd_modify+0x2dc>)
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7fe fe2e 	bl	80027c0 <chprintf>
  chprintf(chp, "'U' to increase 100, 'D' to decrease 100 \r\n");
 8003b64:	49a6      	ldr	r1, [pc, #664]	; (8003e00 <cmd_modify+0x2e0>)
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7fe fe2a 	bl	80027c0 <chprintf>
  chprintf(chp, "Status of var is: %d\r\n", *modify_p);
 8003b6c:	4da5      	ldr	r5, [pc, #660]	; (8003e04 <cmd_modify+0x2e4>)
  chprintf(chp, "'*' to multiply with 10, '/' to divide by 10 \r\n");
 8003b6e:	49a6      	ldr	r1, [pc, #664]	; (8003e08 <cmd_modify+0x2e8>)
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7fe fe25 	bl	80027c0 <chprintf>
  chprintf(chp, "press 'x' to exit \r\n");
 8003b76:	49a5      	ldr	r1, [pc, #660]	; (8003e0c <cmd_modify+0x2ec>)
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7fe fe21 	bl	80027c0 <chprintf>
  chprintf(chp, "Status of var is: %d\r\n", *modify_p);
 8003b7e:	4620      	mov	r0, r4
 8003b80:	682a      	ldr	r2, [r5, #0]
 8003b82:	49a3      	ldr	r1, [pc, #652]	; (8003e10 <cmd_modify+0x2f0>)
 8003b84:	f7fe fe1c 	bl	80027c0 <chprintf>
    chprintf(chp, "%d\r\n", *modify_p);
 8003b88:	4fa2      	ldr	r7, [pc, #648]	; (8003e14 <cmd_modify+0x2f4>)
      *modify_p /= 10;
 8003b8a:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8003e34 <cmd_modify+0x314>
 8003b8e:	f10d 0607 	add.w	r6, sp, #7
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	2201      	movs	r2, #1
 8003b96:	4631      	mov	r1, r6
 8003b98:	4620      	mov	r0, r4
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4798      	blx	r3
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	f000 814c 	beq.w	8003e3c <cmd_modify+0x31c>
    if (c == '+') {
 8003ba4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ba8:	2b2b      	cmp	r3, #43	; 0x2b
 8003baa:	f000 80b2 	beq.w	8003d12 <cmd_modify+0x1f2>
    if (c == '-') {
 8003bae:	2b2d      	cmp	r3, #45	; 0x2d
 8003bb0:	f000 80c1 	beq.w	8003d36 <cmd_modify+0x216>
    if (c == 'u') {
 8003bb4:	2b75      	cmp	r3, #117	; 0x75
 8003bb6:	f040 80a0 	bne.w	8003cfa <cmd_modify+0x1da>
      *modify_p += 10;
 8003bba:	682b      	ldr	r3, [r5, #0]
 8003bbc:	330a      	adds	r3, #10
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	682a      	ldr	r2, [r5, #0]
    chprintf(chp, "%d\r\n", *modify_p);
 8003bc2:	4639      	mov	r1, r7
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f7fe fdfb 	bl	80027c0 <chprintf>
 8003bca:	e7e2      	b.n	8003b92 <cmd_modify+0x72>
  chprintf(chp, "Welcome to modify u32\r\n");
 8003bcc:	4992      	ldr	r1, [pc, #584]	; (8003e18 <cmd_modify+0x2f8>)
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7fe fdf6 	bl	80027c0 <chprintf>
  chprintf(chp, "press '+' to increase one, '-' to decrease one \r\n");
 8003bd4:	4988      	ldr	r1, [pc, #544]	; (8003df8 <cmd_modify+0x2d8>)
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7fe fdf2 	bl	80027c0 <chprintf>
  chprintf(chp, "'u' to increase 10, 'd' to decrease 10 \r\n");
 8003bdc:	4987      	ldr	r1, [pc, #540]	; (8003dfc <cmd_modify+0x2dc>)
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7fe fdee 	bl	80027c0 <chprintf>
  chprintf(chp, "'U' to increase 100, 'D' to decrease 100 \r\n");
 8003be4:	4986      	ldr	r1, [pc, #536]	; (8003e00 <cmd_modify+0x2e0>)
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7fe fdea 	bl	80027c0 <chprintf>
  chprintf(chp, "Status of var is: %u\r\n", *modify_p);
 8003bec:	4d8b      	ldr	r5, [pc, #556]	; (8003e1c <cmd_modify+0x2fc>)
  chprintf(chp, "'*' to multiply with 10, '/' to divide by 10 \r\n");
 8003bee:	4986      	ldr	r1, [pc, #536]	; (8003e08 <cmd_modify+0x2e8>)
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7fe fde5 	bl	80027c0 <chprintf>
  chprintf(chp, "press 'x' to exit \r\n");
 8003bf6:	4985      	ldr	r1, [pc, #532]	; (8003e0c <cmd_modify+0x2ec>)
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7fe fde1 	bl	80027c0 <chprintf>
  chprintf(chp, "Status of var is: %u\r\n", *modify_p);
 8003bfe:	4620      	mov	r0, r4
 8003c00:	682a      	ldr	r2, [r5, #0]
 8003c02:	4987      	ldr	r1, [pc, #540]	; (8003e20 <cmd_modify+0x300>)
 8003c04:	f7fe fddc 	bl	80027c0 <chprintf>
    chprintf(chp, "%u\r\n", *modify_p);
 8003c08:	4f86      	ldr	r7, [pc, #536]	; (8003e24 <cmd_modify+0x304>)
      *modify_p /= 10;
 8003c0a:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8003e38 <cmd_modify+0x318>
 8003c0e:	f10d 0607 	add.w	r6, sp, #7
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	2201      	movs	r2, #1
 8003c16:	4631      	mov	r1, r6
 8003c18:	4620      	mov	r0, r4
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4798      	blx	r3
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	f000 80db 	beq.w	8003dda <cmd_modify+0x2ba>
    if (c == '+') {
 8003c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c28:	2b2b      	cmp	r3, #43	; 0x2b
 8003c2a:	d05c      	beq.n	8003ce6 <cmd_modify+0x1c6>
    if (c == '-') {
 8003c2c:	2b2d      	cmp	r3, #45	; 0x2d
 8003c2e:	d056      	beq.n	8003cde <cmd_modify+0x1be>
    if (c == 'u') {
 8003c30:	2b75      	cmp	r3, #117	; 0x75
 8003c32:	d14e      	bne.n	8003cd2 <cmd_modify+0x1b2>
      *modify_p += 10;
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	330a      	adds	r3, #10
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	682a      	ldr	r2, [r5, #0]
    chprintf(chp, "%u\r\n", *modify_p);
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7fe fdbe 	bl	80027c0 <chprintf>
 8003c44:	e7e5      	b.n	8003c12 <cmd_modify+0xf2>
  chprintf(chp, "Welcome to modify s16\r\n");
 8003c46:	4978      	ldr	r1, [pc, #480]	; (8003e28 <cmd_modify+0x308>)
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f7fe fdb9 	bl	80027c0 <chprintf>
  chprintf(chp, "press '+' to increase one, '-' to decrease one \r\n");
 8003c4e:	496a      	ldr	r1, [pc, #424]	; (8003df8 <cmd_modify+0x2d8>)
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7fe fdb5 	bl	80027c0 <chprintf>
  chprintf(chp, "'u' to increase 10, 'd' to decrease 10 \r\n");
 8003c56:	4969      	ldr	r1, [pc, #420]	; (8003dfc <cmd_modify+0x2dc>)
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f7fe fdb1 	bl	80027c0 <chprintf>
  chprintf(chp, "'U' to increase 100, 'D' to decrease 100 \r\n");
 8003c5e:	4968      	ldr	r1, [pc, #416]	; (8003e00 <cmd_modify+0x2e0>)
 8003c60:	4620      	mov	r0, r4
 8003c62:	f7fe fdad 	bl	80027c0 <chprintf>
  chprintf(chp, "Status of var is: %d\r\n", *modify_p);
 8003c66:	4d71      	ldr	r5, [pc, #452]	; (8003e2c <cmd_modify+0x30c>)
  chprintf(chp, "'*' to multiply with 10, '/' to divide by 10 \r\n");
 8003c68:	4967      	ldr	r1, [pc, #412]	; (8003e08 <cmd_modify+0x2e8>)
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7fe fda8 	bl	80027c0 <chprintf>
  chprintf(chp, "press 'x' to exit \r\n");
 8003c70:	4966      	ldr	r1, [pc, #408]	; (8003e0c <cmd_modify+0x2ec>)
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7fe fda4 	bl	80027c0 <chprintf>
  chprintf(chp, "Status of var is: %d\r\n", *modify_p);
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f9b5 2000 	ldrsh.w	r2, [r5]
 8003c7e:	4964      	ldr	r1, [pc, #400]	; (8003e10 <cmd_modify+0x2f0>)
 8003c80:	f7fe fd9e 	bl	80027c0 <chprintf>
    chprintf(chp, "%d\r\n", *modify_p);
 8003c84:	4f63      	ldr	r7, [pc, #396]	; (8003e14 <cmd_modify+0x2f4>)
      *modify_p /= 10;
 8003c86:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003e34 <cmd_modify+0x314>
 8003c8a:	f10d 0607 	add.w	r6, sp, #7
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	4631      	mov	r1, r6
 8003c94:	4620      	mov	r0, r4
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4798      	blx	r3
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	f000 80a2 	beq.w	8003de4 <cmd_modify+0x2c4>
    if (c == '+') {
 8003ca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ca4:	2b2b      	cmp	r3, #43	; 0x2b
 8003ca6:	d038      	beq.n	8003d1a <cmd_modify+0x1fa>
    if (c == '-') {
 8003ca8:	2b2d      	cmp	r3, #45	; 0x2d
 8003caa:	d03a      	beq.n	8003d22 <cmd_modify+0x202>
    if (c == 'u') {
 8003cac:	2b75      	cmp	r3, #117	; 0x75
 8003cae:	d12a      	bne.n	8003d06 <cmd_modify+0x1e6>
      *modify_p += 10;
 8003cb0:	882b      	ldrh	r3, [r5, #0]
 8003cb2:	330a      	adds	r3, #10
 8003cb4:	802b      	strh	r3, [r5, #0]
 8003cb6:	f9b5 2000 	ldrsh.w	r2, [r5]
    chprintf(chp, "%d\r\n", *modify_p);
 8003cba:	4639      	mov	r1, r7
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7fe fd7f 	bl	80027c0 <chprintf>
 8003cc2:	e7e4      	b.n	8003c8e <cmd_modify+0x16e>
    shellModifyu16(chp, &one);
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	495a      	ldr	r1, [pc, #360]	; (8003e30 <cmd_modify+0x310>)
 8003cc8:	f7ff fdc2 	bl	8003850 <shellModifyu16>
}
 8003ccc:	b002      	add	sp, #8
 8003cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (c == 'd') {
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d10b      	bne.n	8003cee <cmd_modify+0x1ce>
      *modify_p -= 10;
 8003cd6:	682b      	ldr	r3, [r5, #0]
 8003cd8:	3b0a      	subs	r3, #10
 8003cda:	602b      	str	r3, [r5, #0]
 8003cdc:	e7ad      	b.n	8003c3a <cmd_modify+0x11a>
      (*modify_p)--;
 8003cde:	682b      	ldr	r3, [r5, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	e7a9      	b.n	8003c3a <cmd_modify+0x11a>
      (*modify_p)++;
 8003ce6:	682b      	ldr	r3, [r5, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	602b      	str	r3, [r5, #0]
 8003cec:	e7a5      	b.n	8003c3a <cmd_modify+0x11a>
    if (c == 'U') {
 8003cee:	2b55      	cmp	r3, #85	; 0x55
 8003cf0:	d12b      	bne.n	8003d4a <cmd_modify+0x22a>
      *modify_p += 100;
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	3364      	adds	r3, #100	; 0x64
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	e79f      	b.n	8003c3a <cmd_modify+0x11a>
    if (c == 'd') {
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d115      	bne.n	8003d2a <cmd_modify+0x20a>
      *modify_p -= 10;
 8003cfe:	682b      	ldr	r3, [r5, #0]
 8003d00:	3b0a      	subs	r3, #10
 8003d02:	602b      	str	r3, [r5, #0]
 8003d04:	e75c      	b.n	8003bc0 <cmd_modify+0xa0>
    if (c == 'd') {
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d119      	bne.n	8003d3e <cmd_modify+0x21e>
      *modify_p -= 10;
 8003d0a:	882b      	ldrh	r3, [r5, #0]
 8003d0c:	3b0a      	subs	r3, #10
 8003d0e:	802b      	strh	r3, [r5, #0]
 8003d10:	e7d1      	b.n	8003cb6 <cmd_modify+0x196>
      (*modify_p)++;
 8003d12:	682b      	ldr	r3, [r5, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	e752      	b.n	8003bc0 <cmd_modify+0xa0>
      (*modify_p)++;
 8003d1a:	882b      	ldrh	r3, [r5, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	802b      	strh	r3, [r5, #0]
 8003d20:	e7c9      	b.n	8003cb6 <cmd_modify+0x196>
      (*modify_p)--;
 8003d22:	882b      	ldrh	r3, [r5, #0]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	802b      	strh	r3, [r5, #0]
 8003d28:	e7c5      	b.n	8003cb6 <cmd_modify+0x196>
    if (c == 'U') {
 8003d2a:	2b55      	cmp	r3, #85	; 0x55
 8003d2c:	d113      	bne.n	8003d56 <cmd_modify+0x236>
      *modify_p += 100;
 8003d2e:	682b      	ldr	r3, [r5, #0]
 8003d30:	3364      	adds	r3, #100	; 0x64
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	e744      	b.n	8003bc0 <cmd_modify+0xa0>
      (*modify_p)--;
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	602b      	str	r3, [r5, #0]
 8003d3c:	e740      	b.n	8003bc0 <cmd_modify+0xa0>
    if (c == 'U') {
 8003d3e:	2b55      	cmp	r3, #85	; 0x55
 8003d40:	d10f      	bne.n	8003d62 <cmd_modify+0x242>
      *modify_p += 100;
 8003d42:	882b      	ldrh	r3, [r5, #0]
 8003d44:	3364      	adds	r3, #100	; 0x64
 8003d46:	802b      	strh	r3, [r5, #0]
 8003d48:	e7b5      	b.n	8003cb6 <cmd_modify+0x196>
    if (c == 'D') {
 8003d4a:	2b44      	cmp	r3, #68	; 0x44
 8003d4c:	d10f      	bne.n	8003d6e <cmd_modify+0x24e>
      *modify_p -= 100;
 8003d4e:	682b      	ldr	r3, [r5, #0]
 8003d50:	3b64      	subs	r3, #100	; 0x64
 8003d52:	602b      	str	r3, [r5, #0]
 8003d54:	e771      	b.n	8003c3a <cmd_modify+0x11a>
    if (c == 'D') {
 8003d56:	2b44      	cmp	r3, #68	; 0x44
 8003d58:	d111      	bne.n	8003d7e <cmd_modify+0x25e>
      *modify_p -= 100;
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	3b64      	subs	r3, #100	; 0x64
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	e72e      	b.n	8003bc0 <cmd_modify+0xa0>
    if (c == 'D') {
 8003d62:	2b44      	cmp	r3, #68	; 0x44
 8003d64:	d113      	bne.n	8003d8e <cmd_modify+0x26e>
      *modify_p -= 100;
 8003d66:	882b      	ldrh	r3, [r5, #0]
 8003d68:	3b64      	subs	r3, #100	; 0x64
 8003d6a:	802b      	strh	r3, [r5, #0]
 8003d6c:	e7a3      	b.n	8003cb6 <cmd_modify+0x196>
    if (c == '*') {
 8003d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d70:	d115      	bne.n	8003d9e <cmd_modify+0x27e>
      *modify_p *= 10;
 8003d72:	682b      	ldr	r3, [r5, #0]
 8003d74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	e75d      	b.n	8003c3a <cmd_modify+0x11a>
    if (c == '*') {
 8003d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d80:	d115      	bne.n	8003dae <cmd_modify+0x28e>
      *modify_p *= 10;
 8003d82:	682b      	ldr	r3, [r5, #0]
 8003d84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	e718      	b.n	8003bc0 <cmd_modify+0xa0>
    if (c == '*') {
 8003d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d90:	d117      	bne.n	8003dc2 <cmd_modify+0x2a2>
      *modify_p *= 10;
 8003d92:	882b      	ldrh	r3, [r5, #0]
 8003d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	802b      	strh	r3, [r5, #0]
 8003d9c:	e78b      	b.n	8003cb6 <cmd_modify+0x196>
    if (c == '/') {
 8003d9e:	2b2f      	cmp	r3, #47	; 0x2f
 8003da0:	d15e      	bne.n	8003e60 <cmd_modify+0x340>
      *modify_p /= 10;
 8003da2:	682a      	ldr	r2, [r5, #0]
 8003da4:	fba8 3202 	umull	r3, r2, r8, r2
 8003da8:	08d2      	lsrs	r2, r2, #3
 8003daa:	602a      	str	r2, [r5, #0]
 8003dac:	e746      	b.n	8003c3c <cmd_modify+0x11c>
    if (c == '/') {
 8003dae:	2b2f      	cmp	r3, #47	; 0x2f
 8003db0:	d15c      	bne.n	8003e6c <cmd_modify+0x34c>
      *modify_p /= 10;
 8003db2:	682a      	ldr	r2, [r5, #0]
 8003db4:	fb88 1302 	smull	r1, r3, r8, r2
 8003db8:	17d2      	asrs	r2, r2, #31
 8003dba:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8003dbe:	602a      	str	r2, [r5, #0]
 8003dc0:	e6ff      	b.n	8003bc2 <cmd_modify+0xa2>
    if (c == '/') {
 8003dc2:	2b2f      	cmp	r3, #47	; 0x2f
 8003dc4:	d13f      	bne.n	8003e46 <cmd_modify+0x326>
      *modify_p /= 10;
 8003dc6:	f9b5 3000 	ldrsh.w	r3, [r5]
 8003dca:	fb88 2103 	smull	r2, r1, r8, r3
 8003dce:	17da      	asrs	r2, r3, #31
 8003dd0:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003dd4:	b212      	sxth	r2, r2
 8003dd6:	802a      	strh	r2, [r5, #0]
 8003dd8:	e76f      	b.n	8003cba <cmd_modify+0x19a>
      chThdSleepMilliseconds(250);
 8003dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dde:	f7fe fa67 	bl	80022b0 <chThdSleep>
 8003de2:	e71f      	b.n	8003c24 <cmd_modify+0x104>
      chThdSleepMilliseconds(250);
 8003de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003de8:	f7fe fa62 	bl	80022b0 <chThdSleep>
 8003dec:	e758      	b.n	8003ca0 <cmd_modify+0x180>
 8003dee:	bf00      	nop
 8003df0:	08006c24 	.word	0x08006c24
 8003df4:	08006cd8 	.word	0x08006cd8
 8003df8:	0800693c 	.word	0x0800693c
 8003dfc:	08006c50 	.word	0x08006c50
 8003e00:	08006c7c 	.word	0x08006c7c
 8003e04:	200008a0 	.word	0x200008a0
 8003e08:	080069f8 	.word	0x080069f8
 8003e0c:	08006a28 	.word	0x08006a28
 8003e10:	08006ca8 	.word	0x08006ca8
 8003e14:	08006d48 	.word	0x08006d48
 8003e18:	08006cc0 	.word	0x08006cc0
 8003e1c:	200008fc 	.word	0x200008fc
 8003e20:	08006a40 	.word	0x08006a40
 8003e24:	08006a60 	.word	0x08006a60
 8003e28:	08006c38 	.word	0x08006c38
 8003e2c:	20000900 	.word	0x20000900
 8003e30:	200008c4 	.word	0x200008c4
 8003e34:	66666667 	.word	0x66666667
 8003e38:	cccccccd 	.word	0xcccccccd
      chThdSleepMilliseconds(250);
 8003e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e40:	f7fe fa36 	bl	80022b0 <chThdSleep>
 8003e44:	e6ae      	b.n	8003ba4 <cmd_modify+0x84>
    if (c == 'x') {
 8003e46:	2b78      	cmp	r3, #120	; 0x78
 8003e48:	d106      	bne.n	8003e58 <cmd_modify+0x338>
      chprintf(chp, "EXIT\r\n");
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	490d      	ldr	r1, [pc, #52]	; (8003e84 <cmd_modify+0x364>)
 8003e4e:	f7fe fcb7 	bl	80027c0 <chprintf>
}
 8003e52:	b002      	add	sp, #8
 8003e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (c < 0x20)
 8003e58:	2b1f      	cmp	r3, #31
 8003e5a:	f67f af18 	bls.w	8003c8e <cmd_modify+0x16e>
 8003e5e:	e72a      	b.n	8003cb6 <cmd_modify+0x196>
    if (c == 'x') {
 8003e60:	2b78      	cmp	r3, #120	; 0x78
 8003e62:	d0f2      	beq.n	8003e4a <cmd_modify+0x32a>
    if (c < 0x20)
 8003e64:	2b1f      	cmp	r3, #31
 8003e66:	f67f aed4 	bls.w	8003c12 <cmd_modify+0xf2>
 8003e6a:	e6e6      	b.n	8003c3a <cmd_modify+0x11a>
    if (c == 'x') {
 8003e6c:	2b78      	cmp	r3, #120	; 0x78
 8003e6e:	d0ec      	beq.n	8003e4a <cmd_modify+0x32a>
    if (c < 0x20)
 8003e70:	2b1f      	cmp	r3, #31
 8003e72:	f67f ae8e 	bls.w	8003b92 <cmd_modify+0x72>
 8003e76:	e6a3      	b.n	8003bc0 <cmd_modify+0xa0>
    chprintf(chp, "something went wrong\r\n");
 8003e78:	4620      	mov	r0, r4
 8003e7a:	4903      	ldr	r1, [pc, #12]	; (8003e88 <cmd_modify+0x368>)
 8003e7c:	f7fe fca0 	bl	80027c0 <chprintf>
    break;
 8003e80:	e656      	b.n	8003b30 <cmd_modify+0x10>
 8003e82:	bf00      	nop
 8003e84:	08006a58 	.word	0x08006a58
 8003e88:	08006cf0 	.word	0x08006cf0
 8003e8c:	00000000 	.word	0x00000000

08003e90 <configParameterRead>:
void configParameterRead(void) {
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
	fileStreamSetPosition(eeFS, EEPROM_SETTINGS_START);
 8003e92:	4c29      	ldr	r4, [pc, #164]	; (8003f38 <configParameterRead+0xa8>)
void configParameterRead(void) {
 8003e94:	b0a7      	sub	sp, #156	; 0x9c
	fileStreamSetPosition(eeFS, EEPROM_SETTINGS_START);
 8003e96:	6820      	ldr	r0, [r4, #0]
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	6803      	ldr	r3, [r0, #0]
	  	chprintf((BaseSequentialStream *)&SD2, "pos = %u\r\n", EEPROM_SETTINGS_START+i);
 8003e9c:	4f27      	ldr	r7, [pc, #156]	; (8003f3c <configParameterRead+0xac>)
	fileStreamSetPosition(eeFS, EEPROM_SETTINGS_START);
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	4798      	blx	r3
	fileStreamRead(eeFS, &(cureadback.configarray[0]), EEPROM_SETTINGS_SIZE);
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	2294      	movs	r2, #148	; 0x94
 8003ea6:	6803      	ldr	r3, [r0, #0]
 8003ea8:	a901      	add	r1, sp, #4
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4798      	blx	r3
	chprintf((BaseSequentialStream *)&SD2, "EPROM Dump Start");
 8003eae:	4924      	ldr	r1, [pc, #144]	; (8003f40 <configParameterRead+0xb0>)
 8003eb0:	4824      	ldr	r0, [pc, #144]	; (8003f44 <configParameterRead+0xb4>)
 8003eb2:	f7fe fc85 	bl	80027c0 <chprintf>
 8003eb6:	2400      	movs	r4, #0
	  	chprintf((BaseSequentialStream *)&SD2, "pos = %u\r\n", EEPROM_SETTINGS_START+i);
 8003eb8:	4d22      	ldr	r5, [pc, #136]	; (8003f44 <configParameterRead+0xb4>)
	  chprintf((BaseSequentialStream *)&SD2, "%02x ", cureadback.configarray[i]);
 8003eba:	4e23      	ldr	r6, [pc, #140]	; (8003f48 <configParameterRead+0xb8>)
 8003ebc:	e00a      	b.n	8003ed4 <configParameterRead+0x44>
 8003ebe:	ab26      	add	r3, sp, #152	; 0x98
 8003ec0:	4423      	add	r3, r4
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f813 2c94 	ldrb.w	r2, [r3, #-148]
 8003eca:	3401      	adds	r4, #1
 8003ecc:	f7fe fc78 	bl	80027c0 <chprintf>
	for (i=0; i < EEPROM_SETTINGS_SIZE; i++){
 8003ed0:	2c94      	cmp	r4, #148	; 0x94
 8003ed2:	d008      	beq.n	8003ee6 <configParameterRead+0x56>
	  if (i%16 == 0){
 8003ed4:	0723      	lsls	r3, r4, #28
 8003ed6:	d1f2      	bne.n	8003ebe <configParameterRead+0x2e>
	  	chprintf((BaseSequentialStream *)&SD2, "pos = %u\r\n", EEPROM_SETTINGS_START+i);
 8003ed8:	4639      	mov	r1, r7
 8003eda:	4628      	mov	r0, r5
 8003edc:	f104 0280 	add.w	r2, r4, #128	; 0x80
 8003ee0:	f7fe fc6e 	bl	80027c0 <chprintf>
 8003ee4:	e7eb      	b.n	8003ebe <configParameterRead+0x2e>
	chprintf((BaseSequentialStream *)&SD2, "Check Version. RAM: %d, EEPROM: %d\r\n", cudata.configstruct.ver, cureadback.configstruct.ver);
 8003ee6:	4d19      	ldr	r5, [pc, #100]	; (8003f4c <configParameterRead+0xbc>)
	cli_println("");
 8003ee8:	4919      	ldr	r1, [pc, #100]	; (8003f50 <configParameterRead+0xc0>)
 8003eea:	4816      	ldr	r0, [pc, #88]	; (8003f44 <configParameterRead+0xb4>)
 8003eec:	f7fe fc68 	bl	80027c0 <chprintf>
	chprintf((BaseSequentialStream *)&SD2, "Check Version. RAM: %d, EEPROM: %d\r\n", cudata.configstruct.ver, cureadback.configstruct.ver);
 8003ef0:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8003ef4:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
 8003ef8:	4916      	ldr	r1, [pc, #88]	; (8003f54 <configParameterRead+0xc4>)
 8003efa:	4812      	ldr	r0, [pc, #72]	; (8003f44 <configParameterRead+0xb4>)
 8003efc:	f7fe fc60 	bl	80027c0 <chprintf>
	chprintf((BaseSequentialStream *)&SD2, "Checksum: %x\r\n", cureadback.configstruct.chksm);
 8003f00:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
 8003f04:	4914      	ldr	r1, [pc, #80]	; (8003f58 <configParameterRead+0xc8>)
 8003f06:	480f      	ldr	r0, [pc, #60]	; (8003f44 <configParameterRead+0xb4>)
 8003f08:	f7fe fc5a 	bl	80027c0 <chprintf>
	if ((cureadback.configstruct.chksm == CHECKSUM) && (cureadback.configstruct.ver == CONFIG_VERSION)){
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <configParameterRead+0xcc>)
 8003f0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d10a      	bne.n	8003f2a <configParameterRead+0x9a>
		chprintf((BaseSequentialStream *)&SD2, "Checksum and Version match.\r\n");
 8003f14:	4912      	ldr	r1, [pc, #72]	; (8003f60 <configParameterRead+0xd0>)
 8003f16:	480b      	ldr	r0, [pc, #44]	; (8003f44 <configParameterRead+0xb4>)
 8003f18:	f7fe fc52 	bl	80027c0 <chprintf>
		memcpy(&(cudata.configarray[0]), &(cureadback.configarray[0]), EEPROM_SETTINGS_SIZE);
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	4628      	mov	r0, r5
 8003f20:	a901      	add	r1, sp, #4
 8003f22:	f7fc f9a3 	bl	800026c <memcpy>
}
 8003f26:	b027      	add	sp, #156	; 0x9c
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chprintf((BaseSequentialStream *)&SD2, "Checksum or Version mismatch. Save config data first.\r\n");
 8003f2a:	490e      	ldr	r1, [pc, #56]	; (8003f64 <configParameterRead+0xd4>)
 8003f2c:	4805      	ldr	r0, [pc, #20]	; (8003f44 <configParameterRead+0xb4>)
 8003f2e:	f7fe fc47 	bl	80027c0 <chprintf>
}
 8003f32:	b027      	add	sp, #156	; 0x9c
 8003f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20001030 	.word	0x20001030
 8003f3c:	08006d1c 	.word	0x08006d1c
 8003f40:	08006d08 	.word	0x08006d08
 8003f44:	20000db4 	.word	0x20000db4
 8003f48:	0800652c 	.word	0x0800652c
 8003f4c:	20000800 	.word	0x20000800
 8003f50:	08006894 	.word	0x08006894
 8003f54:	08006d28 	.word	0x08006d28
 8003f58:	08006d50 	.word	0x08006d50
 8003f5c:	aa550078 	.word	0xaa550078
 8003f60:	08006d60 	.word	0x08006d60
 8003f64:	08006d80 	.word	0x08006d80
	...

08003f70 <cmd_confrd>:
void cmd_confrd(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003f70:	b510      	push	{r4, lr}
 8003f72:	4604      	mov	r4, r0
  chprintf(chp, "Reads EEPROM and initializes config data\r\n");
 8003f74:	4905      	ldr	r1, [pc, #20]	; (8003f8c <cmd_confrd+0x1c>)
 8003f76:	f7fe fc23 	bl	80027c0 <chprintf>
  chprintf(chp, "Usage: confrd\r\n");
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	4904      	ldr	r1, [pc, #16]	; (8003f90 <cmd_confrd+0x20>)
 8003f7e:	f7fe fc1f 	bl	80027c0 <chprintf>
}
 8003f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  configParameterRead();
 8003f86:	f7ff bf83 	b.w	8003e90 <configParameterRead>
 8003f8a:	bf00      	nop
 8003f8c:	08006db8 	.word	0x08006db8
 8003f90:	08006de4 	.word	0x08006de4
	...

08003fa0 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8003fa0:	2901      	cmp	r1, #1
 8003fa2:	d003      	beq.n	8003fac <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8003fa4:	4a03      	ldr	r2, [pc, #12]	; (8003fb4 <cmd_echo+0x14>)
 8003fa6:	4904      	ldr	r1, [pc, #16]	; (8003fb8 <cmd_echo+0x18>)
 8003fa8:	f7fe bc0a 	b.w	80027c0 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	4903      	ldr	r1, [pc, #12]	; (8003fbc <cmd_echo+0x1c>)
 8003fb0:	f7fe bc06 	b.w	80027c0 <chprintf>
 8003fb4:	08006df4 	.word	0x08006df4
 8003fb8:	08006e04 	.word	0x08006e04
 8003fbc:	08006e10 	.word	0x08006e10

08003fc0 <cmd_info>:
  if (argc > 0) {
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	dc2e      	bgt.n	8004022 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	b082      	sub	sp, #8
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <cmd_info+0x6c>)
 8003fcc:	4918      	ldr	r1, [pc, #96]	; (8004030 <cmd_info+0x70>)
 8003fce:	f7fe fbf7 	bl	80027c0 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <cmd_info+0x74>)
 8003fd6:	4918      	ldr	r1, [pc, #96]	; (8004038 <cmd_info+0x78>)
 8003fd8:	f7fe fbf2 	bl	80027c0 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <cmd_info+0x7c>)
 8003fe0:	4917      	ldr	r1, [pc, #92]	; (8004040 <cmd_info+0x80>)
 8003fe2:	f7fe fbed 	bl	80027c0 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4a16      	ldr	r2, [pc, #88]	; (8004044 <cmd_info+0x84>)
 8003fea:	4917      	ldr	r1, [pc, #92]	; (8004048 <cmd_info+0x88>)
 8003fec:	f7fe fbe8 	bl	80027c0 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	4a16      	ldr	r2, [pc, #88]	; (800404c <cmd_info+0x8c>)
 8003ff4:	4916      	ldr	r1, [pc, #88]	; (8004050 <cmd_info+0x90>)
 8003ff6:	f7fe fbe3 	bl	80027c0 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4a15      	ldr	r2, [pc, #84]	; (8004054 <cmd_info+0x94>)
 8003ffe:	4916      	ldr	r1, [pc, #88]	; (8004058 <cmd_info+0x98>)
 8004000:	f7fe fbde 	bl	80027c0 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8004004:	4620      	mov	r0, r4
 8004006:	4a15      	ldr	r2, [pc, #84]	; (800405c <cmd_info+0x9c>)
 8004008:	4915      	ldr	r1, [pc, #84]	; (8004060 <cmd_info+0xa0>)
 800400a:	f7fe fbd9 	bl	80027c0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <cmd_info+0xa4>)
 8004010:	4620      	mov	r0, r4
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	4a14      	ldr	r2, [pc, #80]	; (8004068 <cmd_info+0xa8>)
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <cmd_info+0xac>)
 8004018:	4915      	ldr	r1, [pc, #84]	; (8004070 <cmd_info+0xb0>)
 800401a:	f7fe fbd1 	bl	80027c0 <chprintf>
}
 800401e:	b002      	add	sp, #8
 8004020:	bd10      	pop	{r4, pc}
    shellUsage(chp, "info");
 8004022:	4a14      	ldr	r2, [pc, #80]	; (8004074 <cmd_info+0xb4>)
 8004024:	4914      	ldr	r1, [pc, #80]	; (8004078 <cmd_info+0xb8>)
 8004026:	f7fe bbcb 	b.w	80027c0 <chprintf>
 800402a:	bf00      	nop
 800402c:	08006e20 	.word	0x08006e20
 8004030:	08006e28 	.word	0x08006e28
 8004034:	08006e3c 	.word	0x08006e3c
 8004038:	08006e7c 	.word	0x08006e7c
 800403c:	08006e90 	.word	0x08006e90
 8004040:	08006e98 	.word	0x08006e98
 8004044:	08006eac 	.word	0x08006eac
 8004048:	08006eb8 	.word	0x08006eb8
 800404c:	08006ecc 	.word	0x08006ecc
 8004050:	08006ee4 	.word	0x08006ee4
 8004054:	08006ef8 	.word	0x08006ef8
 8004058:	08006f24 	.word	0x08006f24
 800405c:	08006f38 	.word	0x08006f38
 8004060:	08006f48 	.word	0x08006f48
 8004064:	08006f84 	.word	0x08006f84
 8004068:	08006f60 	.word	0x08006f60
 800406c:	08006f5c 	.word	0x08006f5c
 8004070:	08006f6c 	.word	0x08006f6c
 8004074:	08006e18 	.word	0x08006e18
 8004078:	08006e04 	.word	0x08006e04
 800407c:	00000000 	.word	0x00000000

08004080 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if !defined(_CHIBIOS_NIL_)
  chRegSetThreadName(SHELL_THREAD_NAME);
#endif

#if SHELL_USE_HISTORY == TRUE
  *(scfg->sc_histbuf) = 0;
 8004084:	2100      	movs	r1, #0
THD_FUNCTION(shellThread, p) {
 8004086:	4681      	mov	r9, r0
 8004088:	f8df a324 	ldr.w	sl, [pc, #804]	; 80043b0 <shellThread+0x330>
  *(scfg->sc_histbuf) = 0;
 800408c:	6883      	ldr	r3, [r0, #8]
 800408e:	f8da 2014 	ldr.w	r2, [sl, #20]
 8004092:	48bd      	ldr	r0, [pc, #756]	; (8004388 <shellThread+0x308>)
THD_FUNCTION(shellThread, p) {
 8004094:	b0a1      	sub	sp, #132	; 0x84
  const ShellCommand *scp = scfg->sc_commands;
 8004096:	e9d9 b400 	ldrd	fp, r4, [r9]
 800409a:	6190      	str	r0, [r2, #24]
  *(scfg->sc_histbuf) = 0;
 800409c:	7019      	strb	r1, [r3, #0]
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 800409e:	4658      	mov	r0, fp
  ShellHistory hist = {
 80040a0:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 80040a4:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80040a8:	910a      	str	r1, [sp, #40]	; 0x28
  chprintf(chp, SHELL_NEWLINE_STR);
 80040aa:	49b8      	ldr	r1, [pc, #736]	; (800438c <shellThread+0x30c>)
  ShellHistory hist = {
 80040ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
  const ShellCommand *scp = scfg->sc_commands;
 80040b0:	9403      	str	r4, [sp, #12]
  chprintf(chp, SHELL_NEWLINE_STR);
 80040b2:	f7fe fb85 	bl	80027c0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 80040b6:	4658      	mov	r0, fp
 80040b8:	49b5      	ldr	r1, [pc, #724]	; (8004390 <shellThread+0x310>)
 80040ba:	f7fe fb81 	bl	80027c0 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80040be:	f8da 3014 	ldr.w	r3, [sl, #20]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 80040c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040c6:	f013 0304 	ands.w	r3, r3, #4
 80040ca:	f040 8093 	bne.w	80041f4 <shellThread+0x174>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 80040ce:	9302      	str	r3, [sp, #8]
 80040d0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80040d4:	f8cd 9000 	str.w	r9, [sp]
 80040d8:	2500      	movs	r5, #0
  char *p = line;
 80040da:	4647      	mov	r7, r8
  bool escape = false;
 80040dc:	462e      	mov	r6, r5
    chprintf(chp, SHELL_PROMPT_STR);
 80040de:	4658      	mov	r0, fp
 80040e0:	49ac      	ldr	r1, [pc, #688]	; (8004394 <shellThread+0x314>)
 80040e2:	f7fe fb6d 	bl	80027c0 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 80040e6:	9b00      	ldr	r3, [sp, #0]
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);

      if (len > 0) {
        _shell_reset_cur(chp);
        _shell_clr_line(chp);
        chprintf(chp, "%s", line);
 80040e8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80043b4 <shellThread+0x334>
  BaseSequentialStream *chp = scfg->sc_channel;
 80040ec:	681c      	ldr	r4, [r3, #0]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	2201      	movs	r2, #1
 80040f2:	4620      	mov	r0, r4
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f10d 0113 	add.w	r1, sp, #19
 80040fa:	4798      	blx	r3
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d043      	beq.n	8004188 <shellThread+0x108>
    if (c == 27) {
 8004100:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8004104:	291b      	cmp	r1, #27
 8004106:	d028      	beq.n	800415a <shellThread+0xda>
    if (escape) {
 8004108:	b15e      	cbz	r6, 8004122 <shellThread+0xa2>
      if (c == '[') {
 800410a:	295b      	cmp	r1, #91	; 0x5b
 800410c:	d03a      	beq.n	8004184 <shellThread+0x104>
      if (bracket) {
 800410e:	b135      	cbz	r5, 800411e <shellThread+0x9e>
        if (c == 'A') {
 8004110:	2941      	cmp	r1, #65	; 0x41
 8004112:	f000 80c4 	beq.w	800429e <shellThread+0x21e>
        if (c == 'B') {
 8004116:	2942      	cmp	r1, #66	; 0x42
 8004118:	f000 8087 	beq.w	800422a <shellThread+0x1aa>
        bracket = false;
 800411c:	2500      	movs	r5, #0
      escape = false;
 800411e:	462e      	mov	r6, r5
 8004120:	e7e5      	b.n	80040ee <shellThread+0x6e>
    if ((c == 8) || (c == 127)) {
 8004122:	2908      	cmp	r1, #8
 8004124:	d01b      	beq.n	800415e <shellThread+0xde>
 8004126:	297f      	cmp	r1, #127	; 0x7f
 8004128:	d019      	beq.n	800415e <shellThread+0xde>
    if (c == '\r') {
 800412a:	290d      	cmp	r1, #13
 800412c:	f000 80d0 	beq.w	80042d0 <shellThread+0x250>
    if (c == 14) {
 8004130:	290e      	cmp	r1, #14
 8004132:	f000 8097 	beq.w	8004264 <shellThread+0x1e4>
    if (c == 16) {
 8004136:	2910      	cmp	r1, #16
 8004138:	f000 80ba 	beq.w	80042b0 <shellThread+0x230>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 800413c:	291f      	cmp	r1, #31
 800413e:	d9d6      	bls.n	80040ee <shellThread+0x6e>
      continue;
    if (p < line + size - 1) {
 8004140:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
 8004144:	429f      	cmp	r7, r3
 8004146:	d2d2      	bcs.n	80040ee <shellThread+0x6e>
      streamPut(chp, c);
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	4620      	mov	r0, r4
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4798      	blx	r3
      *p++ = (char)c;
 8004150:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004154:	f807 3b01 	strb.w	r3, [r7], #1
 8004158:	e7c9      	b.n	80040ee <shellThread+0x6e>
      escape = true;
 800415a:	2601      	movs	r6, #1
 800415c:	e7c7      	b.n	80040ee <shellThread+0x6e>
      if (p != line) {
 800415e:	4547      	cmp	r7, r8
 8004160:	d0c5      	beq.n	80040ee <shellThread+0x6e>
        streamPut(chp, 0x08);
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	2108      	movs	r1, #8
 8004166:	4620      	mov	r0, r4
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	4798      	blx	r3
        streamPut(chp, 0x20);
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	2120      	movs	r1, #32
 8004170:	4620      	mov	r0, r4
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4798      	blx	r3
        streamPut(chp, 0x08);
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	2108      	movs	r1, #8
 800417a:	4620      	mov	r0, r4
 800417c:	68db      	ldr	r3, [r3, #12]
        p--;
 800417e:	3f01      	subs	r7, #1
        streamPut(chp, 0x08);
 8004180:	4798      	blx	r3
 8004182:	e7b4      	b.n	80040ee <shellThread+0x6e>
        bracket = true;
 8004184:	4635      	mov	r5, r6
 8004186:	e7b2      	b.n	80040ee <shellThread+0x6e>
  chThdSleep(delay);
 8004188:	20c8      	movs	r0, #200	; 0xc8
 800418a:	f7fe f891 	bl	80022b0 <chThdSleep>
    lp = parse_arguments(line, &tokp);
 800418e:	a905      	add	r1, sp, #20
 8004190:	4640      	mov	r0, r8
 8004192:	f7fe fae5 	bl	8002760 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004196:	a905      	add	r1, sp, #20
    lp = parse_arguments(line, &tokp);
 8004198:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800419a:	2000      	movs	r0, #0
    n = 0;
 800419c:	2600      	movs	r6, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800419e:	ac0b      	add	r4, sp, #44	; 0x2c
 80041a0:	f7fe fade 	bl	8002760 <parse_arguments>
 80041a4:	b150      	cbz	r0, 80041bc <shellThread+0x13c>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80041a6:	2e04      	cmp	r6, #4
 80041a8:	d031      	beq.n	800420e <shellThread+0x18e>
      args[n++] = lp;
 80041aa:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80041ae:	a905      	add	r1, sp, #20
 80041b0:	2000      	movs	r0, #0
      args[n++] = lp;
 80041b2:	3601      	adds	r6, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 80041b4:	f7fe fad4 	bl	8002760 <parse_arguments>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d1f4      	bne.n	80041a6 <shellThread+0x126>
    args[n] = NULL;
 80041bc:	ab20      	add	r3, sp, #128	; 0x80
 80041be:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80041c2:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80041c6:	b175      	cbz	r5, 80041e6 <shellThread+0x166>
      if (strcmp(cmd, "help") == 0) {
 80041c8:	4628      	mov	r0, r5
 80041ca:	4973      	ldr	r1, [pc, #460]	; (8004398 <shellThread+0x318>)
 80041cc:	f7fc f8c4 	bl	8000358 <strcmp>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f040 8113 	bne.w	80043fc <shellThread+0x37c>
        if (n > 0) {
 80041d6:	2e00      	cmp	r6, #0
 80041d8:	f000 80f3 	beq.w	80043c2 <shellThread+0x342>
          shellUsage(chp, "help");
 80041dc:	4658      	mov	r0, fp
 80041de:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <shellThread+0x318>)
 80041e0:	496e      	ldr	r1, [pc, #440]	; (800439c <shellThread+0x31c>)
 80041e2:	f7fe faed 	bl	80027c0 <chprintf>
 80041e6:	f8da 3014 	ldr.w	r3, [sl, #20]
  while (!chThdShouldTerminateX()) {
 80041ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041ee:	075b      	lsls	r3, r3, #29
 80041f0:	f57f af72 	bpl.w	80040d8 <shellThread+0x58>
 80041f4:	2320      	movs	r3, #32
 80041f6:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80041fa:	2100      	movs	r1, #0
 80041fc:	4868      	ldr	r0, [pc, #416]	; (80043a0 <shellThread+0x320>)
 80041fe:	f7fd fccf 	bl	8001ba0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8004202:	2000      	movs	r0, #0
 8004204:	f7fd feec 	bl	8001fe0 <chThdExitS>
}
 8004208:	b021      	add	sp, #132	; 0x84
 800420a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 800420e:	4658      	mov	r0, fp
 8004210:	4964      	ldr	r1, [pc, #400]	; (80043a4 <shellThread+0x324>)
 8004212:	f7fe fad5 	bl	80027c0 <chprintf>
    args[n] = NULL;
 8004216:	2300      	movs	r3, #0
 8004218:	930f      	str	r3, [sp, #60]	; 0x3c
 800421a:	f8da 3014 	ldr.w	r3, [sl, #20]
  while (!chThdShouldTerminateX()) {
 800421e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004222:	075b      	lsls	r3, r3, #29
 8004224:	f57f af58 	bpl.w	80040d8 <shellThread+0x58>
 8004228:	e7e4      	b.n	80041f4 <shellThread+0x174>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 800422a:	2201      	movs	r2, #1
 800422c:	4641      	mov	r1, r8
 800422e:	a806      	add	r0, sp, #24
 8004230:	f7fe f91e 	bl	8002470 <get_history>
          if (len == 0)
 8004234:	1e06      	subs	r6, r0, #0
 8004236:	d145      	bne.n	80042c4 <shellThread+0x244>
            *line = 0;
 8004238:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
        bracket = false;
 800423c:	2500      	movs	r5, #0
            _shell_reset_cur(chp);
 800423e:	230e      	movs	r3, #14
 8004240:	2250      	movs	r2, #80	; 0x50
 8004242:	4959      	ldr	r1, [pc, #356]	; (80043a8 <shellThread+0x328>)
 8004244:	4620      	mov	r0, r4
 8004246:	f7fe fabb 	bl	80027c0 <chprintf>
            _shell_clr_line(chp);
 800424a:	4958      	ldr	r1, [pc, #352]	; (80043ac <shellThread+0x32c>)
 800424c:	4620      	mov	r0, r4
 800424e:	f7fe fab7 	bl	80027c0 <chprintf>
            chprintf(chp, "%s", line);
 8004252:	4642      	mov	r2, r8
 8004254:	4649      	mov	r1, r9
 8004256:	4620      	mov	r0, r4
            p = line + len;
 8004258:	eb08 0706 	add.w	r7, r8, r6
            chprintf(chp, "%s", line);
 800425c:	f7fe fab0 	bl	80027c0 <chprintf>
      escape = false;
 8004260:	462e      	mov	r6, r5
 8004262:	e744      	b.n	80040ee <shellThread+0x6e>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8004264:	2201      	movs	r2, #1
 8004266:	4641      	mov	r1, r8
 8004268:	a806      	add	r0, sp, #24
 800426a:	f7fe f901 	bl	8002470 <get_history>
      if (len == 0)
 800426e:	1e03      	subs	r3, r0, #0
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	d12a      	bne.n	80042ca <shellThread+0x24a>
        *line = 0;
 8004274:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
        _shell_reset_cur(chp);
 8004278:	230e      	movs	r3, #14
 800427a:	2250      	movs	r2, #80	; 0x50
 800427c:	4620      	mov	r0, r4
 800427e:	494a      	ldr	r1, [pc, #296]	; (80043a8 <shellThread+0x328>)
 8004280:	f7fe fa9e 	bl	80027c0 <chprintf>
        _shell_clr_line(chp);
 8004284:	4620      	mov	r0, r4
 8004286:	4949      	ldr	r1, [pc, #292]	; (80043ac <shellThread+0x32c>)
 8004288:	f7fe fa9a 	bl	80027c0 <chprintf>
        p = line + len;
 800428c:	9b01      	ldr	r3, [sp, #4]
        chprintf(chp, "%s", line);
 800428e:	4642      	mov	r2, r8
        p = line + len;
 8004290:	4443      	add	r3, r8
        chprintf(chp, "%s", line);
 8004292:	4649      	mov	r1, r9
 8004294:	4620      	mov	r0, r4
        p = line + len;
 8004296:	461f      	mov	r7, r3
        chprintf(chp, "%s", line);
 8004298:	f7fe fa92 	bl	80027c0 <chprintf>
 800429c:	e727      	b.n	80040ee <shellThread+0x6e>
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 800429e:	2200      	movs	r2, #0
 80042a0:	4641      	mov	r1, r8
 80042a2:	a806      	add	r0, sp, #24
 80042a4:	f7fe f8e4 	bl	8002470 <get_history>
          if (len > 0) {
 80042a8:	1e06      	subs	r6, r0, #0
 80042aa:	f77f af37 	ble.w	800411c <shellThread+0x9c>
 80042ae:	e7c5      	b.n	800423c <shellThread+0x1bc>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 80042b0:	4632      	mov	r2, r6
 80042b2:	4641      	mov	r1, r8
 80042b4:	a806      	add	r0, sp, #24
 80042b6:	f7fe f8db 	bl	8002470 <get_history>
      if (len > 0) {
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	f77f af16 	ble.w	80040ee <shellThread+0x6e>
 80042c2:	e7d9      	b.n	8004278 <shellThread+0x1f8>
          if (len >= 0) {
 80042c4:	f6ff af2a 	blt.w	800411c <shellThread+0x9c>
 80042c8:	e7b8      	b.n	800423c <shellThread+0x1bc>
      if (len >= 0) {
 80042ca:	f6ff af10 	blt.w	80040ee <shellThread+0x6e>
 80042ce:	e7d3      	b.n	8004278 <shellThread+0x1f8>
      chprintf(chp, SHELL_NEWLINE_STR);
 80042d0:	4620      	mov	r0, r4
 80042d2:	492e      	ldr	r1, [pc, #184]	; (800438c <shellThread+0x30c>)
 80042d4:	f7fe fa74 	bl	80027c0 <chprintf>
  if (length > shp->sh_size - 2)
 80042d8:	9d07      	ldr	r5, [sp, #28]
      save_history(shp, line, p - line);
 80042da:	eba7 0408 	sub.w	r4, r7, r8
  if (length > shp->sh_size - 2)
 80042de:	1e6b      	subs	r3, r5, #1
 80042e0:	429c      	cmp	r4, r3
 80042e2:	da4d      	bge.n	8004380 <shellThread+0x300>
  while ((*(line + length -1) == ' ') && (length > 0))
 80042e4:	1e63      	subs	r3, r4, #1
 80042e6:	f818 1003 	ldrb.w	r1, [r8, r3]
 80042ea:	eb08 0203 	add.w	r2, r8, r3
 80042ee:	2920      	cmp	r1, #32
 80042f0:	d10a      	bne.n	8004308 <shellThread+0x288>
 80042f2:	2c00      	cmp	r4, #0
 80042f4:	dc03      	bgt.n	80042fe <shellThread+0x27e>
 80042f6:	e043      	b.n	8004380 <shellThread+0x300>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d041      	beq.n	8004380 <shellThread+0x300>
 80042fc:	3b01      	subs	r3, #1
 80042fe:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    length--;
 8004302:	461c      	mov	r4, r3
  while ((*(line + length -1) == ' ') && (length > 0))
 8004304:	2920      	cmp	r1, #32
 8004306:	d0f7      	beq.n	80042f8 <shellThread+0x278>
  if (length <= 0)
 8004308:	2c00      	cmp	r4, #0
 800430a:	dd39      	ble.n	8004380 <shellThread+0x300>
  if (shp->sh_end >= shp->sh_beg) {
 800430c:	9909      	ldr	r1, [sp, #36]	; 0x24
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 800430e:	9806      	ldr	r0, [sp, #24]
 8004310:	9b08      	ldr	r3, [sp, #32]
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8004312:	1aca      	subs	r2, r1, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8004314:	1a5e      	subs	r6, r3, r1
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8004316:	3201      	adds	r2, #1
  if (shp->sh_end >= shp->sh_beg) {
 8004318:	4299      	cmp	r1, r3
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 800431a:	eba5 0202 	sub.w	r2, r5, r2
    if (length < (shp->sh_beg - shp->sh_end - 1))
 800431e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
  if (shp->sh_end >= shp->sh_beg) {
 8004322:	db09      	blt.n	8004338 <shellThread+0x2b8>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8004324:	4294      	cmp	r4, r2
 8004326:	db09      	blt.n	800433c <shellThread+0x2bc>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8004328:	5cc2      	ldrb	r2, [r0, r3]
 800432a:	4413      	add	r3, r2
 800432c:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 800432e:	429d      	cmp	r5, r3
    pos -= shp->sh_size;
 8004330:	bfd8      	it	le
 8004332:	1b5b      	suble	r3, r3, r5
  shp->sh_beg = pos;
 8004334:	9308      	str	r3, [sp, #32]
 8004336:	e7ec      	b.n	8004312 <shellThread+0x292>
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8004338:	42b4      	cmp	r4, r6
 800433a:	daf5      	bge.n	8004328 <shellThread+0x2a8>
  if (length < shp->sh_size - shp->sh_end - 1)
 800433c:	1a6d      	subs	r5, r5, r1
 800433e:	3d01      	subs	r5, #1
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8004340:	3101      	adds	r1, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 8004342:	42ac      	cmp	r4, r5
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8004344:	4408      	add	r0, r1
  if (length < shp->sh_size - shp->sh_end - 1)
 8004346:	db37      	blt.n	80043b8 <shellThread+0x338>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8004348:	462a      	mov	r2, r5
 800434a:	4641      	mov	r1, r8
 800434c:	f7fb ff8e 	bl	800026c <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 8004350:	9806      	ldr	r0, [sp, #24]
 8004352:	1b62      	subs	r2, r4, r5
 8004354:	eb08 0105 	add.w	r1, r8, r5
 8004358:	f7fb ff88 	bl	800026c <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 800435c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800435e:	9906      	ldr	r1, [sp, #24]
  shp->sh_end += length + 1;
 8004360:	1c63      	adds	r3, r4, #1
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 8004362:	548c      	strb	r4, [r1, r2]
  shp->sh_end += length + 1;
 8004364:	9909      	ldr	r1, [sp, #36]	; 0x24
  if (shp->sh_end >= shp->sh_size)
 8004366:	9a07      	ldr	r2, [sp, #28]
  shp->sh_end += length + 1;
 8004368:	440b      	add	r3, r1
  if (shp->sh_end >= shp->sh_size)
 800436a:	4293      	cmp	r3, r2
  shp->sh_end += length + 1;
 800436c:	9309      	str	r3, [sp, #36]	; 0x24
  *(shp->sh_buffer + shp->sh_end) = 0;
 800436e:	9902      	ldr	r1, [sp, #8]
    shp->sh_end -= shp->sh_size;
 8004370:	bfa8      	it	ge
 8004372:	1a9b      	subge	r3, r3, r2
  *(shp->sh_buffer + shp->sh_end) = 0;
 8004374:	9a06      	ldr	r2, [sp, #24]
    shp->sh_end -= shp->sh_size;
 8004376:	bfa8      	it	ge
 8004378:	9309      	strge	r3, [sp, #36]	; 0x24
  *(shp->sh_buffer + shp->sh_end) = 0;
 800437a:	54d1      	strb	r1, [r2, r3]
  shp->sh_cur = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	930a      	str	r3, [sp, #40]	; 0x28
      *p = 0;
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	703b      	strb	r3, [r7, #0]
 8004384:	e703      	b.n	800418e <shellThread+0x10e>
 8004386:	bf00      	nop
 8004388:	08006f90 	.word	0x08006f90
 800438c:	08006894 	.word	0x08006894
 8004390:	08006f98 	.word	0x08006f98
 8004394:	08006fac 	.word	0x08006fac
 8004398:	08006fe8 	.word	0x08006fe8
 800439c:	08006e04 	.word	0x08006e04
 80043a0:	20001270 	.word	0x20001270
 80043a4:	08006fd0 	.word	0x08006fd0
 80043a8:	08006fbc 	.word	0x08006fbc
 80043ac:	08006fc8 	.word	0x08006fc8
 80043b0:	20000e30 	.word	0x20000e30
 80043b4:	08006fcc 	.word	0x08006fcc
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 80043b8:	4622      	mov	r2, r4
 80043ba:	4641      	mov	r1, r8
 80043bc:	f7fb ff56 	bl	800026c <memcpy>
 80043c0:	e7cc      	b.n	800435c <shellThread+0x2dc>
        chprintf(chp, "Commands: help ");
 80043c2:	4658      	mov	r0, fp
 80043c4:	4932      	ldr	r1, [pc, #200]	; (8004490 <shellThread+0x410>)
 80043c6:	f7fe f9fb 	bl	80027c0 <chprintf>
  while (scp->sc_name != NULL) {
 80043ca:	4c32      	ldr	r4, [pc, #200]	; (8004494 <shellThread+0x414>)
 80043cc:	4a32      	ldr	r2, [pc, #200]	; (8004498 <shellThread+0x418>)
    chprintf(chp, "%s ", scp->sc_name);
 80043ce:	4d33      	ldr	r5, [pc, #204]	; (800449c <shellThread+0x41c>)
 80043d0:	4629      	mov	r1, r5
 80043d2:	4658      	mov	r0, fp
 80043d4:	f7fe f9f4 	bl	80027c0 <chprintf>
  while (scp->sc_name != NULL) {
 80043d8:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d1f7      	bne.n	80043d0 <shellThread+0x350>
        if (scp != NULL)
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	bb8b      	cbnz	r3, 8004448 <shellThread+0x3c8>
        chprintf(chp, SHELL_NEWLINE_STR);
 80043e4:	4658      	mov	r0, fp
 80043e6:	492e      	ldr	r1, [pc, #184]	; (80044a0 <shellThread+0x420>)
 80043e8:	f7fe f9ea 	bl	80027c0 <chprintf>
 80043ec:	f8da 3014 	ldr.w	r3, [sl, #20]
  while (!chThdShouldTerminateX()) {
 80043f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043f4:	075b      	lsls	r3, r3, #29
 80043f6:	f57f ae6f 	bpl.w	80040d8 <shellThread+0x58>
 80043fa:	e6fb      	b.n	80041f4 <shellThread+0x174>
 80043fc:	4c25      	ldr	r4, [pc, #148]	; (8004494 <shellThread+0x414>)
  while (scp->sc_name != NULL) {
 80043fe:	4826      	ldr	r0, [pc, #152]	; (8004498 <shellThread+0x418>)
 8004400:	e002      	b.n	8004408 <shellThread+0x388>
 8004402:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8004406:	b188      	cbz	r0, 800442c <shellThread+0x3ac>
    if (strcmp(scp->sc_name, name) == 0) {
 8004408:	4629      	mov	r1, r5
 800440a:	f7fb ffa5 	bl	8000358 <strcmp>
 800440e:	2800      	cmp	r0, #0
 8004410:	d1f7      	bne.n	8004402 <shellThread+0x382>
      scp->sc_function(chp, argc, argv);
 8004412:	6863      	ldr	r3, [r4, #4]
 8004414:	4631      	mov	r1, r6
 8004416:	4658      	mov	r0, fp
 8004418:	aa0b      	add	r2, sp, #44	; 0x2c
 800441a:	4798      	blx	r3
 800441c:	f8da 3014 	ldr.w	r3, [sl, #20]
  while (!chThdShouldTerminateX()) {
 8004420:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004424:	075b      	lsls	r3, r3, #29
 8004426:	f57f ae57 	bpl.w	80040d8 <shellThread+0x58>
 800442a:	e6e3      	b.n	80041f4 <shellThread+0x174>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800442c:	9c03      	ldr	r4, [sp, #12]
 800442e:	b1ec      	cbz	r4, 800446c <shellThread+0x3ec>
  while (scp->sc_name != NULL) {
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	b918      	cbnz	r0, 800443c <shellThread+0x3bc>
 8004434:	e01a      	b.n	800446c <shellThread+0x3ec>
 8004436:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800443a:	b1b8      	cbz	r0, 800446c <shellThread+0x3ec>
    if (strcmp(scp->sc_name, name) == 0) {
 800443c:	4629      	mov	r1, r5
 800443e:	f7fb ff8b 	bl	8000358 <strcmp>
 8004442:	2800      	cmp	r0, #0
 8004444:	d1f7      	bne.n	8004436 <shellThread+0x3b6>
 8004446:	e7e4      	b.n	8004412 <shellThread+0x392>
  while (scp->sc_name != NULL) {
 8004448:	9c03      	ldr	r4, [sp, #12]
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	2a00      	cmp	r2, #0
 800444e:	d0c9      	beq.n	80043e4 <shellThread+0x364>
    chprintf(chp, "%s ", scp->sc_name);
 8004450:	4d12      	ldr	r5, [pc, #72]	; (800449c <shellThread+0x41c>)
 8004452:	4629      	mov	r1, r5
 8004454:	4658      	mov	r0, fp
 8004456:	f7fe f9b3 	bl	80027c0 <chprintf>
  while (scp->sc_name != NULL) {
 800445a:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800445e:	2a00      	cmp	r2, #0
 8004460:	d1f7      	bne.n	8004452 <shellThread+0x3d2>
        chprintf(chp, SHELL_NEWLINE_STR);
 8004462:	4658      	mov	r0, fp
 8004464:	490e      	ldr	r1, [pc, #56]	; (80044a0 <shellThread+0x420>)
 8004466:	f7fe f9ab 	bl	80027c0 <chprintf>
 800446a:	e7bf      	b.n	80043ec <shellThread+0x36c>
        chprintf(chp, "%s", cmd);
 800446c:	462a      	mov	r2, r5
 800446e:	490d      	ldr	r1, [pc, #52]	; (80044a4 <shellThread+0x424>)
 8004470:	4658      	mov	r0, fp
 8004472:	f7fe f9a5 	bl	80027c0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8004476:	4658      	mov	r0, fp
 8004478:	490b      	ldr	r1, [pc, #44]	; (80044a8 <shellThread+0x428>)
 800447a:	f7fe f9a1 	bl	80027c0 <chprintf>
 800447e:	f8da 3014 	ldr.w	r3, [sl, #20]
  while (!chThdShouldTerminateX()) {
 8004482:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004486:	075b      	lsls	r3, r3, #29
 8004488:	f57f ae26 	bpl.w	80040d8 <shellThread+0x58>
 800448c:	e6b2      	b.n	80041f4 <shellThread+0x174>
 800448e:	bf00      	nop
 8004490:	08006ff0 	.word	0x08006ff0
 8004494:	08007470 	.word	0x08007470
 8004498:	08006e18 	.word	0x08006e18
 800449c:	08007000 	.word	0x08007000
 80044a0:	08006894 	.word	0x08006894
 80044a4:	08006fcc 	.word	0x08006fcc
 80044a8:	08007004 	.word	0x08007004
 80044ac:	00000000 	.word	0x00000000

080044b0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80044b0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80044b4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80044b6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80044ba:	2300      	movs	r3, #0
 80044bc:	f383 8811 	msr	BASEPRI, r3
}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
	...

080044d0 <chThdExit>:
 80044d0:	2320      	movs	r3, #32
 80044d2:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 80044d6:	f7fd bd83 	b.w	8001fe0 <chThdExitS>
 80044da:	bf00      	nop
 80044dc:	0000      	movs	r0, r0
	...

080044e0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80044e0:	b430      	push	{r4, r5}
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80044e2:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
 80044e4:	2500      	movs	r5, #0
  thread_t *otp = currp;
 80044e6:	4a0c      	ldr	r2, [pc, #48]	; (8004518 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 80044e8:	6810      	ldr	r0, [r2, #0]
 80044ea:	6951      	ldr	r1, [r2, #20]
  tqp->next             = tp->queue.next;
 80044ec:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80044ee:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80044f0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80044f4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 80044f6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80044f8:	6150      	str	r0, [r2, #20]
  tp->state = CH_STATE_READY;
 80044fa:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80044fe:	e000      	b.n	8004502 <chSchDoReschedule+0x22>
 8004500:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4294      	cmp	r4, r2
 8004506:	d3fb      	bcc.n	8004500 <chSchDoReschedule+0x20>
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8004508:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8004510:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8004512:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8004514:	f7fb be94 	b.w	8000240 <_port_switch>
 8004518:	20000e30 	.word	0x20000e30
 800451c:	00000000 	.word	0x00000000

08004520 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8004520:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8004522:	4d1b      	ldr	r5, [pc, #108]	; (8004590 <chMtxUnlock+0x70>)
void chMtxUnlock(mutex_t *mp) {
 8004524:	4601      	mov	r1, r0
 8004526:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8004528:	696e      	ldr	r6, [r5, #20]
 800452a:	f383 8811 	msr	BASEPRI, r3
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800452e:	68c3      	ldr	r3, [r0, #12]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004530:	6800      	ldr	r0, [r0, #0]
 8004532:	63b3      	str	r3, [r6, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8004534:	4288      	cmp	r0, r1
 8004536:	d025      	beq.n	8004584 <chMtxUnlock+0x64>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8004538:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 800453a:	b14b      	cbz	r3, 8004550 <chMtxUnlock+0x30>
 800453c:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <chMtxUnlock+0x2a>
 8004542:	6892      	ldr	r2, [r2, #8]
 8004544:	4294      	cmp	r4, r2
 8004546:	bf38      	it	cc
 8004548:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 800454a:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f5      	bne.n	800453c <chMtxUnlock+0x1c>
  tqp->next             = tp->queue.next;
 8004550:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8004552:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 8004554:	60b4      	str	r4, [r6, #8]
 8004556:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004558:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 800455a:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800455e:	6381      	str	r1, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8004560:	f7fd fb06 	bl	8001b70 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8004564:	682a      	ldr	r2, [r5, #0]
 8004566:	696b      	ldr	r3, [r5, #20]
  if (chSchIsRescRequiredI()) {
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	429a      	cmp	r2, r3
 800456e:	d803      	bhi.n	8004578 <chMtxUnlock+0x58>
 8004570:	2300      	movs	r3, #0
 8004572:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8004576:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 8004578:	f7ff ffb2 	bl	80044e0 <chSchDoReschedule>
 800457c:	2300      	movs	r3, #0
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	6083      	str	r3, [r0, #8]
 8004588:	2300      	movs	r3, #0
 800458a:	f383 8811 	msr	BASEPRI, r3
}
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	20000e30 	.word	0x20000e30
	...

080045a0 <cmd_mem>:
#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
  size_t n, total, largest;

  (void)argv;
  if (argc > 0) {
 80045a0:	2900      	cmp	r1, #0
 80045a2:	dc32      	bgt.n	800460a <cmd_mem+0x6a>
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 80045a6:	4c1d      	ldr	r4, [pc, #116]	; (800461c <cmd_mem+0x7c>)
 80045a8:	4605      	mov	r5, r0
 80045aa:	f104 000c 	add.w	r0, r4, #12
 80045ae:	f7fd fcaf 	bl	8001f10 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 80045b2:	6863      	ldr	r3, [r4, #4]
 80045b4:	b36b      	cbz	r3, 8004612 <cmd_mem+0x72>
  lpages = 0U;
 80045b6:	2400      	movs	r4, #0
  tpages = 0U;
 80045b8:	4622      	mov	r2, r4
  n = 0U;
 80045ba:	4627      	mov	r7, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 80045bc:	6859      	ldr	r1, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	428c      	cmp	r4, r1
 80045c2:	bf38      	it	cc
 80045c4:	460c      	movcc	r4, r1

    /* Updating counters.*/
    n++;
 80045c6:	3701      	adds	r7, #1
    tpages += pages;
 80045c8:	440a      	add	r2, r1
  while (H_NEXT(qp) != NULL) {
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f6      	bne.n	80045bc <cmd_mem+0x1c>
 80045ce:	00d6      	lsls	r6, r2, #3
 80045d0:	00e4      	lsls	r4, r4, #3

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
    *largestp = lpages * CH_HEAP_ALIGNMENT;
  }
  H_UNLOCK(heapp);
 80045d2:	4813      	ldr	r0, [pc, #76]	; (8004620 <cmd_mem+0x80>)
 80045d4:	f7ff ffa4 	bl	8004520 <chMtxUnlock>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <cmd_mem+0x84>)
    shellUsage(chp, "mem");
    return;
  }
  n = chHeapStatus(NULL, &total, &largest);
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 80045da:	4628      	mov	r0, r5
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4911      	ldr	r1, [pc, #68]	; (8004628 <cmd_mem+0x88>)
 80045e2:	1ad2      	subs	r2, r2, r3
 80045e4:	f7fe f8ec 	bl	80027c0 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 80045e8:	463a      	mov	r2, r7
 80045ea:	4628      	mov	r0, r5
 80045ec:	490f      	ldr	r1, [pc, #60]	; (800462c <cmd_mem+0x8c>)
 80045ee:	f7fe f8e7 	bl	80027c0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 80045f2:	4632      	mov	r2, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	490e      	ldr	r1, [pc, #56]	; (8004630 <cmd_mem+0x90>)
 80045f8:	f7fe f8e2 	bl	80027c0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 80045fc:	4622      	mov	r2, r4
 80045fe:	4628      	mov	r0, r5
}
 8004600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8004604:	490b      	ldr	r1, [pc, #44]	; (8004634 <cmd_mem+0x94>)
 8004606:	f7fe b8db 	b.w	80027c0 <chprintf>
    shellUsage(chp, "mem");
 800460a:	4a0b      	ldr	r2, [pc, #44]	; (8004638 <cmd_mem+0x98>)
 800460c:	490b      	ldr	r1, [pc, #44]	; (800463c <cmd_mem+0x9c>)
 800460e:	f7fe b8d7 	b.w	80027c0 <chprintf>
  while (H_NEXT(qp) != NULL) {
 8004612:	461c      	mov	r4, r3
 8004614:	461e      	mov	r6, r3
  n = 0U;
 8004616:	461f      	mov	r7, r3
 8004618:	e7db      	b.n	80045d2 <cmd_mem+0x32>
 800461a:	bf00      	nop
 800461c:	20000fd4 	.word	0x20000fd4
 8004620:	20000fe0 	.word	0x20000fe0
 8004624:	20000fc8 	.word	0x20000fc8
 8004628:	08007010 	.word	0x08007010
 800462c:	08007030 	.word	0x08007030
 8004630:	08007048 	.word	0x08007048
 8004634:	08007068 	.word	0x08007068
 8004638:	0800700c 	.word	0x0800700c
 800463c:	08006e04 	.word	0x08006e04

08004640 <chThdRelease>:
 8004640:	2220      	movs	r2, #32
 8004642:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8004646:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800464a:	3b01      	subs	r3, #1
 800464c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8004650:	6a03      	ldr	r3, [r0, #32]
 8004652:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d003      	beq.n	8004662 <chThdRelease+0x22>
 800465a:	2300      	movs	r3, #0
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	4770      	bx	lr
void chThdRelease(thread_t *tp) {
 8004662:	b570      	push	{r4, r5, r6, lr}
    REG_REMOVE(tp);
 8004664:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
 8004668:	60dc      	str	r4, [r3, #12]
 800466a:	68c4      	ldr	r4, [r0, #12]
 800466c:	2100      	movs	r1, #0
 800466e:	6123      	str	r3, [r4, #16]
 8004670:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8004674:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d00c      	beq.n	800469a <chThdRelease+0x5a>
 8004680:	2b02      	cmp	r3, #2
 8004682:	d000      	beq.n	8004686 <chThdRelease+0x46>
}
 8004684:	bd70      	pop	{r4, r5, r6, pc}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8004686:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004688:	69c0      	ldr	r0, [r0, #28]
 800468a:	f382 8811 	msr	BASEPRI, r2
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8004692:	6018      	str	r0, [r3, #0]
 8004694:	f381 8811 	msr	BASEPRI, r1
}
 8004698:	bd70      	pop	{r4, r5, r6, pc}
      chHeapFree(chThdGetWorkingAreaX(tp));
 800469a:	69c5      	ldr	r5, [r0, #28]
  heapp = H_HEAP(hp);
 800469c:	e955 4302 	ldrd	r4, r3, [r5, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80046a0:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80046a2:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 80046a4:	f104 060c 	add.w	r6, r4, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80046a8:	f845 3c04 	str.w	r3, [r5, #-4]
  H_LOCK(heapp);
 80046ac:	4630      	mov	r0, r6
  qp = &heapp->header;
 80046ae:	3404      	adds	r4, #4
  H_LOCK(heapp);
 80046b0:	f7fd fc2e 	bl	8001f10 <chMtxLock>
  qp = &heapp->header;
 80046b4:	4623      	mov	r3, r4
  hp = (heap_header_t *)p - 1U;
 80046b6:	f1a5 0108 	sub.w	r1, r5, #8
    if (((qp == &heapp->header) || (hp > qp)) &&
 80046ba:	429c      	cmp	r4, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80046bc:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 80046be:	d001      	beq.n	80046c4 <chThdRelease+0x84>
 80046c0:	4299      	cmp	r1, r3
 80046c2:	d902      	bls.n	80046ca <chThdRelease+0x8a>
 80046c4:	b11a      	cbz	r2, 80046ce <chThdRelease+0x8e>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80046c6:	4291      	cmp	r1, r2
 80046c8:	d301      	bcc.n	80046ce <chThdRelease+0x8e>
    qp = H_NEXT(qp);
 80046ca:	4613      	mov	r3, r2
 80046cc:	e7f5      	b.n	80046ba <chThdRelease+0x7a>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80046ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 80046d2:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 80046d6:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80046d8:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80046dc:	1c62      	adds	r2, r4, #1
 80046de:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80046e2:	42a0      	cmp	r0, r4
 80046e4:	d011      	beq.n	800470a <chThdRelease+0xca>
      if ((H_LIMIT(qp) == hp)) {
 80046e6:	6858      	ldr	r0, [r3, #4]
 80046e8:	1c42      	adds	r2, r0, #1
 80046ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80046ee:	4291      	cmp	r1, r2
 80046f0:	d004      	beq.n	80046fc <chThdRelease+0xbc>
  H_UNLOCK(heapp);
 80046f2:	4630      	mov	r0, r6
}
 80046f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046f8:	f7ff bf12 	b.w	8004520 <chMtxUnlock>
        H_NEXT(qp) = H_NEXT(hp);
 80046fc:	e955 1202 	ldrd	r1, r2, [r5, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8004700:	3201      	adds	r2, #1
 8004702:	4410      	add	r0, r2
        H_NEXT(qp) = H_NEXT(hp);
 8004704:	e9c3 1000 	strd	r1, r0, [r3]
 8004708:	e7f3      	b.n	80046f2 <chThdRelease+0xb2>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800470a:	c811      	ldmia	r0, {r0, r4}
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800470c:	4422      	add	r2, r4
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800470e:	e945 0202 	strd	r0, r2, [r5, #-8]
 8004712:	e7e8      	b.n	80046e6 <chThdRelease+0xa6>
	...

08004720 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8004720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004724:	2000      	movs	r0, #0
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <main+0x50>)
}
/*
 * Application entry point.
 */
int main(void) {
 8004728:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800472c:	6916      	ldr	r6, [r2, #16]
 800472e:	6114      	str	r4, [r2, #16]
 8004730:	6916      	ldr	r6, [r2, #16]
 8004732:	6110      	str	r0, [r2, #16]
 8004734:	6916      	ldr	r6, [r2, #16]
  rccResetAPB2(0xFFFFFFFF);
 8004736:	68d6      	ldr	r6, [r2, #12]
 8004738:	60d4      	str	r4, [r2, #12]
 800473a:	68d4      	ldr	r4, [r2, #12]
 800473c:	60d0      	str	r0, [r2, #12]
 800473e:	68d4      	ldr	r4, [r2, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 8004740:	69d4      	ldr	r4, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8004742:	4d0c      	ldr	r5, [pc, #48]	; (8004774 <main+0x54>)
  rccEnablePWRInterface(true);
 8004744:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8004748:	61d4      	str	r4, [r2, #28]
 800474a:	69d4      	ldr	r4, [r2, #28]
  rccEnableBKPInterface(true);
 800474c:	69d4      	ldr	r4, [r2, #28]
  dma.isr_mask       = 0U;
 800474e:	4601      	mov	r1, r0
 8004750:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8004754:	61d4      	str	r4, [r2, #28]
 8004756:	69d2      	ldr	r2, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8004758:	682c      	ldr	r4, [r5, #0]
  dma.allocated_mask = 0U;
 800475a:	4a07      	ldr	r2, [pc, #28]	; (8004778 <main+0x58>)
 800475c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8004760:	602c      	str	r4, [r5, #0]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004762:	4603      	mov	r3, r0
  dma.isr_mask       = 0U;
 8004764:	e9c2 0000 	strd	r0, r0, [r2]
 8004768:	4c04      	ldr	r4, [pc, #16]	; (800477c <main+0x5c>)
 800476a:	4d05      	ldr	r5, [pc, #20]	; (8004780 <main+0x60>)
 800476c:	b087      	sub	sp, #28
 800476e:	e00c      	b.n	800478a <main+0x6a>
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
 8004778:	20000ff0 	.word	0x20000ff0
 800477c:	40020008 	.word	0x40020008
 8004780:	0800725c 	.word	0x0800725c
 8004784:	eb05 0041 	add.w	r0, r5, r1, lsl #1
 8004788:	6844      	ldr	r4, [r0, #4]
    dma.streams[i].func = NULL;
 800478a:	1850      	adds	r0, r2, r1
 800478c:	3108      	adds	r1, #8
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800478e:	2938      	cmp	r1, #56	; 0x38
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004790:	6023      	str	r3, [r4, #0]
    dma.streams[i].func = NULL;
 8004792:	6083      	str	r3, [r0, #8]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8004794:	d1f6      	bne.n	8004784 <main+0x64>
  DMA1->IFCR = 0xFFFFFFFFU;
 8004796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800479a:	2460      	movs	r4, #96	; 0x60
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800479c:	f44f 7880 	mov.w	r8, #256	; 0x100
 80047a0:	f04f 0b80 	mov.w	fp, #128	; 0x80
 80047a4:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80047a8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80047ac:	4ad0      	ldr	r2, [pc, #832]	; (8004af0 <main+0x3d0>)
  GPIOC->CRH = config->PCData.crh;
 80047ae:	f04f 3e88 	mov.w	lr, #2290649224	; 0x88888888
 80047b2:	6051      	str	r1, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047b4:	4acf      	ldr	r2, [pc, #828]	; (8004af4 <main+0x3d4>)
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80047b6:	4ed0      	ldr	r6, [pc, #832]	; (8004af8 <main+0x3d8>)
 80047b8:	f882 4306 	strb.w	r4, [r2, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047bc:	f8c2 a180 	str.w	sl, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80047c0:	f8c2 a000 	str.w	sl, [r2]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047c4:	f882 4307 	strb.w	r4, [r2, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047c8:	f8c2 b180 	str.w	fp, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80047cc:	f8c2 b000 	str.w	fp, [r2]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047d0:	f882 4308 	strb.w	r4, [r2, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047d4:	f8c2 8180 	str.w	r8, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80047d8:	f8c2 8000 	str.w	r8, [r2]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047dc:	f882 4309 	strb.w	r4, [r2, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047e0:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80047e4:	6015      	str	r5, [r2, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047e6:	f44f 6580 	mov.w	r5, #1024	; 0x400
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047ea:	f882 430a 	strb.w	r4, [r2, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047ee:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80047f2:	6015      	str	r5, [r2, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80047f4:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80047f8:	2001      	movs	r0, #1
 80047fa:	46b1      	mov	r9, r6
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80047fc:	f882 4317 	strb.w	r4, [r2, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004800:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004804:	6015      	str	r5, [r2, #0]
  rccEnableAPB2(APB2_EN_MASK, true);
 8004806:	f105 557e 	add.w	r5, r5, #1065353216	; 0x3f800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800480a:	f882 4328 	strb.w	r4, [r2, #808]	; 0x328
 800480e:	f505 3504 	add.w	r5, r5, #135168	; 0x21000
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004812:	f8c2 8184 	str.w	r8, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004816:	f8c2 8004 	str.w	r8, [r2, #4]
 800481a:	f8d5 8018 	ldr.w	r8, [r5, #24]
  GPIOA->ODR = config->PAData.odr;
 800481e:	4cb7      	ldr	r4, [pc, #732]	; (8004afc <main+0x3dc>)
  rccEnableAPB2(APB2_EN_MASK, true);
 8004820:	f048 087d 	orr.w	r8, r8, #125	; 0x7d
 8004824:	f8c5 8018 	str.w	r8, [r5, #24]
  GPIOA->CRH = config->PAData.crh;
 8004828:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8004b4c <main+0x42c>
  rccEnableAPB2(APB2_EN_MASK, true);
 800482c:	f8d5 a018 	ldr.w	sl, [r5, #24]
  GPIOA->ODR = config->PAData.odr;
 8004830:	60e1      	str	r1, [r4, #12]
  GPIOA->CRH = config->PAData.crh;
 8004832:	f8c4 8004 	str.w	r8, [r4, #4]
  GPIOA->CRL = config->PAData.crl;
 8004836:	f5a8 5864 	sub.w	r8, r8, #14592	; 0x3900
 800483a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800483e:	f8c4 8000 	str.w	r8, [r4]
  GPIOB->CRH = config->PBData.crh;
 8004842:	f508 5872 	add.w	r8, r8, #15488	; 0x3c80
 8004846:	f108 0830 	add.w	r8, r8, #48	; 0x30
  GPIOB->ODR = config->PBData.odr;
 800484a:	f8c4 140c 	str.w	r1, [r4, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 800484e:	f8c4 8404 	str.w	r8, [r4, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 8004852:	f8c4 8400 	str.w	r8, [r4, #1024]	; 0x400
  GPIOC->ODR = config->PCData.odr;
 8004856:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8004b50 <main+0x430>
  GPIOB->ODR = config->PBData.odr;
 800485a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIOC->ODR = config->PCData.odr;
 800485e:	f8c8 100c 	str.w	r1, [r8, #12]
  GPIOC->CRH = config->PCData.crh;
 8004862:	f8c8 e004 	str.w	lr, [r8, #4]
  GPIOC->CRL = config->PCData.crl;
 8004866:	f8c8 e000 	str.w	lr, [r8]
  GPIOD->CRL = config->PDData.crl;
 800486a:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8004b54 <main+0x434>
  GPIOD->ODR = config->PDData.odr;
 800486e:	f8c4 180c 	str.w	r1, [r4, #2060]	; 0x80c
  GPIOD->CRH = config->PDData.crh;
 8004872:	f8c4 e804 	str.w	lr, [r4, #2052]	; 0x804
  GPIOD->CRL = config->PDData.crl;
 8004876:	f8c4 8800 	str.w	r8, [r4, #2048]	; 0x800
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800487a:	7230      	strb	r0, [r6, #8]
  GPIOE->ODR = config->PEData.odr;
 800487c:	f8c4 1c0c 	str.w	r1, [r4, #3084]	; 0xc0c
  GPIOE->CRH = config->PEData.crh;
 8004880:	f8c4 ec04 	str.w	lr, [r4, #3076]	; 0xc04
  GPIOE->CRL = config->PEData.crl;
 8004884:	f8c4 ec00 	str.w	lr, [r4, #3072]	; 0xc00
  sdp->vmt = &vmt;
 8004888:	4c9d      	ldr	r4, [pc, #628]	; (8004b00 <main+0x3e0>)
 800488a:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8004b58 <main+0x438>
 800488e:	f849 4b04 	str.w	r4, [r9], #4
  I2CD1.i2c    = I2C1;
 8004892:	4c9c      	ldr	r4, [pc, #624]	; (8004b04 <main+0x3e4>)
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8004894:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 8004b5c <main+0x43c>
 8004898:	f8c8 4034 	str.w	r4, [r8, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
 800489c:	f108 040c 	add.w	r4, r8, #12
  tqp->prev = (thread_t *)tqp;
 80048a0:	e9c8 4403 	strd	r4, r4, [r8, #12]
  ICUD1.tim = STM32_TIM1;
 80048a4:	4c98      	ldr	r4, [pc, #608]	; (8004b08 <main+0x3e8>)
 80048a6:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8004b60 <main+0x440>
 80048aa:	f8ce 400c 	str.w	r4, [lr, #12]
  ICUD2.tim = STM32_TIM2;
 80048ae:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  esp->next = (event_listener_t *)esp;
 80048b2:	f8c6 9004 	str.w	r9, [r6, #4]
  pwmp->state    = PWM_STOP;
 80048b6:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8004b64 <main+0x444>
 80048ba:	f8ca 400c 	str.w	r4, [sl, #12]
  PWMD4.tim = STM32_TIM4;
 80048be:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80048c2:	f8c9 4018 	str.w	r4, [r9, #24]
  tqp->next = (thread_t *)tqp;
 80048c6:	f106 040c 	add.w	r4, r6, #12
  PWMD4.channels = STM32_TIM4_CHANNELS;
 80048ca:	f04f 0c04 	mov.w	ip, #4
  tqp->prev = (thread_t *)tqp;
 80048ce:	e9c6 4403 	strd	r4, r4, [r6, #12]
  oqp->q_counter = size;
 80048d2:	2410      	movs	r4, #16
 80048d4:	f88e 0000 	strb.w	r0, [lr]
 80048d8:	f888 0000 	strb.w	r0, [r8]
  icup->config = NULL;
 80048dc:	f8ce 3004 	str.w	r3, [lr, #4]
  icup->state  = ICU_STOP;
 80048e0:	f88a 0000 	strb.w	r0, [sl]
 80048e4:	f889 0000 	strb.w	r0, [r9]
 80048e8:	f889 c010 	strb.w	ip, [r9, #16]
  I2CD1.dmatx  = NULL;
 80048ec:	e9c8 330b 	strd	r3, r3, [r8, #44]	; 0x2c
  i2cp->config = NULL;
 80048f0:	f8c8 3004 	str.w	r3, [r8, #4]
  mp->owner = NULL;
 80048f4:	f8c8 3014 	str.w	r3, [r8, #20]
  I2CD1.thread = NULL;
 80048f8:	f8c8 301c 	str.w	r3, [r8, #28]
  icup->config = NULL;
 80048fc:	f8ca 3004 	str.w	r3, [sl, #4]
  pwmp->config   = NULL;
 8004900:	f8c9 3004 	str.w	r3, [r9, #4]
  pwmp->enabled  = 0;
 8004904:	f8c9 300c 	str.w	r3, [r9, #12]
  iqp->q_counter = 0;
 8004908:	6173      	str	r3, [r6, #20]
  oqp->q_counter = size;
 800490a:	63b4      	str	r4, [r6, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800490c:	69ec      	ldr	r4, [r5, #28]
  iqp->q_notify  = infy;
 800490e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004910:	f044 0402 	orr.w	r4, r4, #2
 8004914:	61ec      	str	r4, [r5, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004916:	4c7d      	ldr	r4, [pc, #500]	; (8004b0c <main+0x3ec>)
  ST_ENABLE_CLOCK();
 8004918:	69ed      	ldr	r5, [r5, #28]
  ST_ENABLE_STOP();
 800491a:	6865      	ldr	r5, [r4, #4]
  iqp->q_link    = link;
 800491c:	62f6      	str	r6, [r6, #44]	; 0x2c
 800491e:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
  oqp->q_link    = link;
 8004922:	6536      	str	r6, [r6, #80]	; 0x50
 8004924:	6065      	str	r5, [r4, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004926:	f648 459f 	movw	r5, #35999	; 0x8c9f
 800492a:	4c79      	ldr	r4, [pc, #484]	; (8004b10 <main+0x3f0>)
  tmp->cumulative = (rttime_t)0;
 800492c:	4667      	mov	r7, ip
 800492e:	62a5      	str	r5, [r4, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004930:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004934:	62e5      	str	r5, [r4, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004936:	61a3      	str	r3, [r4, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004938:	6363      	str	r3, [r4, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800493a:	60e3      	str	r3, [r4, #12]
  STM32_ST_TIM->CR2    = 0;
 800493c:	6063      	str	r3, [r4, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800493e:	6160      	str	r0, [r4, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8004940:	6020      	str	r0, [r4, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004942:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  oqp->q_top     = bp + size;
 8004946:	f106 0074 	add.w	r0, r6, #116	; 0x74
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800494a:	f882 b31d 	strb.w	fp, [r2, #797]	; 0x31d
 800494e:	6430      	str	r0, [r6, #64]	; 0x40
  oqp->q_notify  = onfy;
 8004950:	4870      	ldr	r0, [pc, #448]	; (8004b14 <main+0x3f4>)
  tqp->next = (thread_t *)tqp;
 8004952:	4d71      	ldr	r5, [pc, #452]	; (8004b18 <main+0x3f8>)
 8004954:	64f0      	str	r0, [r6, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8004956:	4871      	ldr	r0, [pc, #452]	; (8004b1c <main+0x3fc>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004958:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 800495c:	6770      	str	r0, [r6, #116]	; 0x74
  iqp->q_buffer  = bp;
 800495e:	f106 0054 	add.w	r0, r6, #84	; 0x54
  iqp->q_wrptr   = bp;
 8004962:	e9c6 0008 	strd	r0, r0, [r6, #32]
  iqp->q_buffer  = bp;
 8004966:	61b0      	str	r0, [r6, #24]
  iqp->q_top     = bp + size;
 8004968:	f106 0064 	add.w	r0, r6, #100	; 0x64
  oqp->q_wrptr   = bp;
 800496c:	e9c6 0011 	strd	r0, r0, [r6, #68]	; 0x44
  iqp->q_top     = bp + size;
 8004970:	61f0      	str	r0, [r6, #28]
  oqp->q_buffer  = bp;
 8004972:	63f0      	str	r0, [r6, #60]	; 0x3c
 8004974:	f106 0030 	add.w	r0, r6, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 8004978:	e9c6 000c 	strd	r0, r0, [r6, #48]	; 0x30
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800497c:	6014      	str	r4, [r2, #0]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800497e:	4868      	ldr	r0, [pc, #416]	; (8004b20 <main+0x400>)
 8004980:	4c68      	ldr	r4, [pc, #416]	; (8004b24 <main+0x404>)
  tqp->next = (thread_t *)tqp;
 8004982:	4a69      	ldr	r2, [pc, #420]	; (8004b28 <main+0x408>)
  tqp->prev = (thread_t *)tqp;
 8004984:	e9c5 5500 	strd	r5, r5, [r5]
 8004988:	6020      	str	r0, [r4, #0]
  tqp->next = (thread_t *)tqp;
 800498a:	f104 000c 	add.w	r0, r4, #12
  tqp->prev = (thread_t *)tqp;
 800498e:	e9c4 0003 	strd	r0, r0, [r4, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8004992:	f102 0010 	add.w	r0, r2, #16
 8004996:	6110      	str	r0, [r2, #16]
  mp->object_size = size;
 8004998:	2014      	movs	r0, #20
 800499a:	6190      	str	r0, [r2, #24]
 800499c:	f102 0024 	add.w	r0, r2, #36	; 0x24
 80049a0:	6250      	str	r0, [r2, #36]	; 0x24
 80049a2:	f102 0028 	add.w	r0, r2, #40	; 0x28
 80049a6:	6290      	str	r0, [r2, #40]	; 0x28
 80049a8:	201c      	movs	r0, #28
  mp->align = align;
 80049aa:	f8c2 c01c 	str.w	ip, [r2, #28]
 80049ae:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
  mp->object_size = size;
 80049b2:	6310      	str	r0, [r2, #48]	; 0x30
  mp->provider = provider;
 80049b4:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8004b68 <main+0x448>
 80049b8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80049bc:	6410      	str	r0, [r2, #64]	; 0x40
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80049be:	f105 0018 	add.w	r0, r5, #24
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80049c2:	e9c5 0006 	strd	r0, r0, [r5, #24]
  ch_memcore.basemem = __heap_base__;
 80049c6:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8004b6c <main+0x44c>
 80049ca:	f8c2 c020 	str.w	ip, [r2, #32]
 80049ce:	f8c2 c038 	str.w	ip, [r2, #56]	; 0x38
 80049d2:	4856      	ldr	r0, [pc, #344]	; (8004b2c <main+0x40c>)
  ch_memcore.topmem  = __heap_end__;
 80049d4:	f8df c198 	ldr.w	ip, [pc, #408]	; 8004b70 <main+0x450>
 80049d8:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
 80049dc:	e9c0 bc00 	strd	fp, ip, [r0]
 80049e0:	f04f 0b00 	mov.w	fp, #0
 80049e4:	f04f 0c00 	mov.w	ip, #0
 80049e8:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
 80049ec:	f102 0e44 	add.w	lr, r2, #68	; 0x44
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80049f0:	e9c5 3502 	strd	r3, r5, [r5, #8]
  H_PAGES(&default_heap.header) = 0;
 80049f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80049f8:	e9c2 2200 	strd	r2, r2, [r2]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80049fc:	612d      	str	r5, [r5, #16]
  ch.vtlist.delta = (sysinterval_t)-1;
 80049fe:	6229      	str	r1, [r5, #32]
  ch.vtlist.lasttime = (systime_t)0;
 8004a00:	84ab      	strh	r3, [r5, #36]	; 0x24
 8004a02:	6163      	str	r3, [r4, #20]
 8004a04:	6093      	str	r3, [r2, #8]
  mp->next = NULL;
 8004a06:	6153      	str	r3, [r2, #20]
 8004a08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a0a:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 8004a0e:	e9cd bc04 	strd	fp, ip, [sp, #16]
  tmp->last       = (rtcnt_t)0;
 8004a12:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->best       = (rtcnt_t)-1;
 8004a16:	9100      	str	r1, [sp, #0]
  ch.tm.offset = (rtcnt_t)0;
 8004a18:	672b      	str	r3, [r5, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8004a1a:	9303      	str	r3, [sp, #12]
    chTMStartMeasurementX(&tm);
 8004a1c:	4668      	mov	r0, sp
 8004a1e:	f7fd f827 	bl	8001a70 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8004a22:	4668      	mov	r0, sp
 8004a24:	f7fc fffc 	bl	8001a20 <chTMStopMeasurementX>
  } while (i > 0U);
 8004a28:	3f01      	subs	r7, #1
 8004a2a:	d1f7      	bne.n	8004a1c <main+0x2fc>
  tp->prio      = prio;
 8004a2c:	2080      	movs	r0, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8004a2e:	2101      	movs	r1, #1
  REG_INSERT(tp);
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <main+0x410>)
  ch.tm.offset = tm.best;
 8004a32:	9a00      	ldr	r2, [sp, #0]
  tp->prio      = prio;
 8004a34:	e9c5 050d 	strd	r0, r5, [r5, #52]	; 0x34
  tp->realprio  = prio;
 8004a38:	66a8      	str	r0, [r5, #104]	; 0x68
  tp->name      = name;
 8004a3a:	f8df e138 	ldr.w	lr, [pc, #312]	; 8004b74 <main+0x454>
  REG_INSERT(tp);
 8004a3e:	6928      	ldr	r0, [r5, #16]
 8004a40:	672a      	str	r2, [r5, #112]	; 0x70
  tlp->next = (thread_t *)tlp;
 8004a42:	f103 0c28 	add.w	ip, r3, #40	; 0x28
  tqp->next = (thread_t *)tqp;
 8004a46:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tp->epending  = (eventmask_t)0;
 8004a4a:	e9c5 7718 	strd	r7, r7, [r5, #96]	; 0x60
  tp->flags     = CH_FLAG_MODE_STATIC;
 8004a4e:	f885 704d 	strb.w	r7, [r5, #77]	; 0x4d
  tp->refs      = (trefs_t)1;
 8004a52:	f885 104e 	strb.w	r1, [r5, #78]	; 0x4e
  tp->name      = name;
 8004a56:	f8c5 e044 	str.w	lr, [r5, #68]	; 0x44
  REG_INSERT(tp);
 8004a5a:	63e8      	str	r0, [r5, #60]	; 0x3c
 8004a5c:	f04f 0b20 	mov.w	fp, #32
 8004a60:	60c3      	str	r3, [r0, #12]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8004a62:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8004a66:	e9c5 c215 	strd	ip, r2, [r5, #84]	; 0x54
  currp->state = CH_STATE_CURRENT;
 8004a6a:	f885 104c 	strb.w	r1, [r5, #76]	; 0x4c
  currp->wabase = NULL;
 8004a6e:	64af      	str	r7, [r5, #72]	; 0x48
  tqp->prev = (thread_t *)tqp;
 8004a70:	65ea      	str	r2, [r5, #92]	; 0x5c
 8004a72:	f38b 8811 	msr	BASEPRI, fp
  __ASM volatile ("cpsie i" : : : "memory");
 8004a76:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a78:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	2010      	movs	r0, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a7e:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <main+0x414>)
  reg_value  =  (reg_value                                   |
 8004a80:	4a2d      	ldr	r2, [pc, #180]	; (8004b38 <main+0x418>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a82:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a84:	ea01 010c 	and.w	r1, r1, ip
  reg_value  =  (reg_value                                   |
 8004a88:	430a      	orrs	r2, r1
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004a8a:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  SCB->AIRCR =  reg_value;
 8004a8e:	60da      	str	r2, [r3, #12]
 8004a90:	f6ac 3c0f 	subw	ip, ip, #2831	; 0xb0f
 8004a94:	f8dc 200c 	ldr.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004a98:	4928      	ldr	r1, [pc, #160]	; (8004b3c <main+0x41c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004a9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a9e:	f8cc 200c 	str.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004aa2:	680a      	ldr	r2, [r1, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	600a      	str	r2, [r1, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aaa:	77d8      	strb	r0, [r3, #31]
 8004aac:	f883 b022 	strb.w	fp, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004ab0:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 8004ab4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004ab6:	f38b 8811 	msr	BASEPRI, fp
  tp = chThdCreateSuspendedI(tdp);
 8004aba:	4821      	ldr	r0, [pc, #132]	; (8004b40 <main+0x420>)
 8004abc:	f7fc ffe0 	bl	8001a80 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8004ac0:	f7fd f9de 	bl	8001e80 <chSchWakeupS.constprop.0>
 8004ac4:	f387 8811 	msr	BASEPRI, r7
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE; //PB3, PB4, PA15 working, PA13, PA14 NOT
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <main+0x424>)
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004ad0:	605a      	str	r2, [r3, #4]
  //AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_DISABLE;     //PB3, PB4, PA15, PA13, PA14 working
  AFIO->MAPR |= AFIO_MAPR_TIM2_REMAP_0; // Partial Remap PWM2/2 to PB3
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	f38b 8811 	msr	BASEPRI, fp
  pwmp->config = config;
 8004ade:	491a      	ldr	r1, [pc, #104]	; (8004b48 <main+0x428>)
  if (pwmp->state == PWM_STOP) {
 8004ae0:	f899 3000 	ldrb.w	r3, [r9]
  pwmp->period = config->period;
 8004ae4:	6848      	ldr	r0, [r1, #4]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	e9c9 1001 	strd	r1, r0, [r9, #4]
 8004aec:	e044      	b.n	8004b78 <main+0x458>
 8004aee:	bf00      	nop
 8004af0:	40020000 	.word	0x40020000
 8004af4:	e000e100 	.word	0xe000e100
 8004af8:	20000db4 	.word	0x20000db4
 8004afc:	40010800 	.word	0x40010800
 8004b00:	080074d8 	.word	0x080074d8
 8004b04:	40005400 	.word	0x40005400
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	e0042000 	.word	0xe0042000
 8004b10:	40000400 	.word	0x40000400
 8004b14:	08001801 	.word	0x08001801
 8004b18:	20000e30 	.word	0x20000e30
 8004b1c:	40004400 	.word	0x40004400
 8004b20:	080017c1 	.word	0x080017c1
 8004b24:	20000fd4 	.word	0x20000fd4
 8004b28:	20000ea4 	.word	0x20000ea4
 8004b2c:	20000fc8 	.word	0x20000fc8
 8004b30:	20000e5c 	.word	0x20000e5c
 8004b34:	e000ed00 	.word	0xe000ed00
 8004b38:	05fa0300 	.word	0x05fa0300
 8004b3c:	e0001000 	.word	0xe0001000
 8004b40:	080073c8 	.word	0x080073c8
 8004b44:	40010000 	.word	0x40010000
 8004b48:	200008c8 	.word	0x200008c8
 8004b4c:	888884b8 	.word	0x888884b8
 8004b50:	40011000 	.word	0x40011000
 8004b54:	88888844 	.word	0x88888844
 8004b58:	20000d30 	.word	0x20000d30
 8004b5c:	20000d68 	.word	0x20000d68
 8004b60:	20000d80 	.word	0x20000d80
 8004b64:	20000d98 	.word	0x20000d98
 8004b68:	080019f1 	.word	0x080019f1
 8004b6c:	200013c8 	.word	0x200013c8
 8004b70:	20005000 	.word	0x20005000
 8004b74:	080072e0 	.word	0x080072e0
 8004b78:	f000 82e6 	beq.w	8005148 <main+0xa28>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8004b7c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004b80:	601f      	str	r7, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8004b82:	635f      	str	r7, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8004b84:	639f      	str	r7, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8004b86:	63df      	str	r7, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8004b88:	641f      	str	r7, [r3, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8004b8a:	625f      	str	r7, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004b8c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004b90:	680a      	ldr	r2, [r1, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
 8004b92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004b96:	fbb3 f3f2 	udiv	r3, r3, r2
  pwmp->tim->PSC  = psc;
 8004b9a:	f8d9 0018 	ldr.w	r0, [r9, #24]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004b9e:	68ca      	ldr	r2, [r1, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004ba0:	3b01      	subs	r3, #1
  pwmp->tim->PSC  = psc;
 8004ba2:	6283      	str	r3, [r0, #40]	; 0x28
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004ba4:	f002 020f 	and.w	r2, r2, #15
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004ba8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004baa:	2a01      	cmp	r2, #1
  pwmp->tim->ARR  = pwmp->period - 1;
 8004bac:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004bb0:	6043      	str	r3, [r0, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004bb2:	d002      	beq.n	8004bba <main+0x49a>
 8004bb4:	2a02      	cmp	r2, #2
 8004bb6:	d102      	bne.n	8004bbe <main+0x49e>
 8004bb8:	4617      	mov	r7, r2
    ccer |= STM32_TIM_CCER_CC1E;
 8004bba:	f047 0701 	orr.w	r7, r7, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8004bbe:	694b      	ldr	r3, [r1, #20]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d003      	beq.n	8004bd0 <main+0x4b0>
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d103      	bne.n	8004bd4 <main+0x4b4>
    ccer |= STM32_TIM_CCER_CC2P;
 8004bcc:	f047 0720 	orr.w	r7, r7, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8004bd0:	f047 0710 	orr.w	r7, r7, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8004bd4:	69cb      	ldr	r3, [r1, #28]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d003      	beq.n	8004be6 <main+0x4c6>
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d103      	bne.n	8004bea <main+0x4ca>
    ccer |= STM32_TIM_CCER_CC3P;
 8004be2:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8004be6:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8004bea:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d003      	beq.n	8004bfc <main+0x4dc>
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d103      	bne.n	8004c00 <main+0x4e0>
    ccer |= STM32_TIM_CCER_CC4P;
 8004bf8:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8004bfc:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004c00:	2300      	movs	r3, #0
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004c02:	f04f 0b01 	mov.w	fp, #1
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004c06:	f04f 0e85 	mov.w	lr, #133	; 0x85
  pwmp->state = PWM_READY;
 8004c0a:	f04f 0c02 	mov.w	ip, #2
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004c0e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 8004c10:	6207      	str	r7, [r0, #32]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004c12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004c16:	f8c0 b014 	str.w	fp, [r0, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004c1a:	6103      	str	r3, [r0, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004c1c:	60c2      	str	r2, [r0, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004c1e:	f8c0 e000 	str.w	lr, [r0]
  pwmp->enabled = 0;
 8004c22:	f8c9 300c 	str.w	r3, [r9, #12]
  pwmp->state = PWM_READY;
 8004c26:	f889 c000 	strb.w	ip, [r9]
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	2320      	movs	r3, #32
 8004c30:	f383 8811 	msr	BASEPRI, r3
  uint32_t dier = pwmp->tim->DIER;
 8004c34:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8004c38:	68d3      	ldr	r3, [r2, #12]
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 8004c3a:	07d8      	lsls	r0, r3, #31
 8004c3c:	d405      	bmi.n	8004c4a <main+0x52a>
    pwmp->tim->SR   = ~STM32_TIM_SR_UIF;
 8004c3e:	f06f 0101 	mvn.w	r1, #1
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 8004c42:	ea43 030b 	orr.w	r3, r3, fp
    pwmp->tim->SR   = ~STM32_TIM_SR_UIF;
 8004c46:	6111      	str	r1, [r2, #16]
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 8004c48:	60d3      	str	r3, [r2, #12]
 8004c4a:	2700      	movs	r7, #0
 8004c4c:	f387 8811 	msr	BASEPRI, r7

  pwmStart(&PWMD4, &pwmcfg);
  pwmEnablePeriodicNotification(&PWMD4);
  // TIM1 Outputs
  palSetPadMode(GPIOB, 8, PAL_MODE_STM32_ALTERNATE_PUSHPULL); //TIM4-CH3, Motor PWM out
 8004c50:	2210      	movs	r2, #16
 8004c52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c56:	48c9      	ldr	r0, [pc, #804]	; (8004f7c <main+0x85c>)
 8004c58:	f7fd f87a 	bl	8001d50 <_pal_lld_setgroupmode>

  /*
   * Starts the PWM channel 1 using 30% duty cycle.
   */
  pwmEnableChannel(&PWMD4, 2, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, 3000));
 8004c5c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004c60:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8004c64:	4ac6      	ldr	r2, [pc, #792]	; (8004f80 <main+0x860>)
 8004c66:	fb03 f301 	mul.w	r3, r3, r1
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	2020      	movs	r0, #32
 8004c70:	0b5b      	lsrs	r3, r3, #13
 8004c72:	f380 8811 	msr	BASEPRI, r0
  pwmEnableChannelI(pwmp, channel, width);
 8004c76:	f8d9 200c 	ldr.w	r2, [r9, #12]
  pwmp->tim->CCR[channel] = width;
 8004c7a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8004c7e:	f042 0204 	orr.w	r2, r2, #4
 8004c82:	f8c9 200c 	str.w	r2, [r9, #12]
 8004c86:	63cb      	str	r3, [r1, #60]	; 0x3c
 8004c88:	f387 8811 	msr	BASEPRI, r7
 8004c8c:	f380 8811 	msr	BASEPRI, r0
  uint32_t dier = pwmp->tim->DIER;
 8004c90:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8004c94:	68d3      	ldr	r3, [r2, #12]
  if ((dier & (2 << channel)) == 0) {
 8004c96:	0719      	lsls	r1, r3, #28
 8004c98:	f140 831c 	bpl.w	80052d4 <main+0xbb4>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f382 8811 	msr	BASEPRI, r2
  if (icup->state == ICU_STOP) {
 8004ca8:	f89a 1000 	ldrb.w	r1, [sl]
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 8004cac:	4ab5      	ldr	r2, [pc, #724]	; (8004f84 <main+0x864>)
 8004cae:	2901      	cmp	r1, #1
 8004cb0:	f8ca 2004 	str.w	r2, [sl, #4]
 8004cb4:	f000 82ef 	beq.w	8005296 <main+0xb76>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8004cb8:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004cbc:	600b      	str	r3, [r1, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8004cbe:	634b      	str	r3, [r1, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8004cc0:	638b      	str	r3, [r1, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8004cc2:	624b      	str	r3, [r1, #36]	; 0x24
  psc = (icup->clock / icup->config->frequency) - 1;
 8004cc4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004cc8:	6850      	ldr	r0, [r2, #4]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8004cca:	2700      	movs	r7, #0
  psc = (icup->clock / icup->config->frequency) - 1;
 8004ccc:	fbb3 f0f0 	udiv	r0, r3, r0
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8004cd0:	f8da 300c 	ldr.w	r3, [sl, #12]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8004cd4:	6991      	ldr	r1, [r2, #24]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8004cd6:	611f      	str	r7, [r3, #16]
  if (icup->config->arr == 0U) {
 8004cd8:	69d7      	ldr	r7, [r2, #28]
  psc = (icup->clock / icup->config->frequency) - 1;
 8004cda:	3801      	subs	r0, #1
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8004cdc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004ce0:	60d9      	str	r1, [r3, #12]
  icup->tim->PSC = psc;
 8004ce2:	6298      	str	r0, [r3, #40]	; 0x28
  if (icup->config->arr == 0U) {
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	f000 82cf 	beq.w	8005288 <main+0xb68>
    icup->tim->ARR = icup->config->arr;
 8004cea:	62df      	str	r7, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 8004cec:	7d11      	ldrb	r1, [r2, #20]
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	f040 82bb 	bne.w	800526a <main+0xb4a>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8004cf4:	f240 2001 	movw	r0, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8004cf8:	2154      	movs	r1, #84	; 0x54
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8004cfa:	7812      	ldrb	r2, [r2, #0]
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8004cfc:	6198      	str	r0, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8004cfe:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	f040 82af 	bne.w	8005264 <main+0xb44>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8004d06:	2231      	movs	r2, #49	; 0x31
 8004d08:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 8004d0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 8004d0e:	3334      	adds	r3, #52	; 0x34
 8004d10:	e9ca 2304 	strd	r2, r3, [sl, #16]
  icu_lld_start(icup);
  icup->state = ICU_READY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	2200      	movs	r2, #0
 8004d18:	f88a 3000 	strb.w	r3, [sl]
 8004d1c:	f382 8811 	msr	BASEPRI, r2
 8004d20:	2020      	movs	r0, #32
 8004d22:	f380 8811 	msr	BASEPRI, r0
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8004d26:	f04f 0c05 	mov.w	ip, #5

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 8004d2a:	2703      	movs	r7, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8004d2c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004d30:	6959      	ldr	r1, [r3, #20]
 8004d32:	f041 0101 	orr.w	r1, r1, #1
 8004d36:	6159      	str	r1, [r3, #20]
  icup->tim->SR = 0;
 8004d38:	611a      	str	r2, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8004d3a:	f8c3 c000 	str.w	ip, [r3]
 8004d3e:	f88a 7000 	strb.w	r7, [sl]
 8004d42:	f382 8811 	msr	BASEPRI, r2
 8004d46:	f380 8811 	msr	BASEPRI, r0
  uint32_t dier = icup->tim->DIER;
 8004d4a:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004d4e:	68cb      	ldr	r3, [r1, #12]
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8004d50:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
 8004d54:	d111      	bne.n	8004d7a <main+0x65a>
    if (icup->config->channel == ICU_CHANNEL_1) {
 8004d56:	f8da 2004 	ldr.w	r2, [sl, #4]
    icup->tim->SR = 0;
 8004d5a:	6108      	str	r0, [r1, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8004d5c:	7d10      	ldrb	r0, [r2, #20]
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f040 82bf 	bne.w	80052e2 <main+0xbc2>
      if (icup->config->width_cb != NULL)
 8004d64:	6890      	ldr	r0, [r2, #8]
 8004d66:	2800      	cmp	r0, #0
 8004d68:	f000 82c2 	beq.w	80052f0 <main+0xbd0>
        dier |= STM32_TIM_DIER_CC1IE;
 8004d6c:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 8004d70:	6912      	ldr	r2, [r2, #16]
 8004d72:	b10a      	cbz	r2, 8004d78 <main+0x658>
      dier |= STM32_TIM_DIER_UIE;
 8004d74:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8004d78:	60cb      	str	r3, [r1, #12]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f383 8811 	msr	BASEPRI, r3
  //ch_PWM_Freq(600000);

  icuStart(&ICUD2, &icucfg);
  icuStartCapture(&ICUD2);
  icuEnableNotifications(&ICUD2);
  palSetPadMode(GPIOB, 3, PAL_MODE_INPUT_PULLUP); //TIM2-CH2 Motor Speed feedback
 8004d80:	2203      	movs	r2, #3
 8004d82:	2108      	movs	r1, #8
 8004d84:	487d      	ldr	r0, [pc, #500]	; (8004f7c <main+0x85c>)
 8004d86:	f7fc ffe3 	bl	8001d50 <_pal_lld_setgroupmode>
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8004d90:	7a33      	ldrb	r3, [r6, #8]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10d      	bne.n	8004db2 <main+0x692>
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004d96:	2140      	movs	r1, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004d98:	20c0      	movs	r0, #192	; 0xc0
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8004d9a:	4b7b      	ldr	r3, [pc, #492]	; (8004f88 <main+0x868>)
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004da2:	61da      	str	r2, [r3, #28]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4b79      	ldr	r3, [pc, #484]	; (8004f8c <main+0x86c>)
 8004da8:	f883 0326 	strb.w	r0, [r3, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004dac:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004db0:	6059      	str	r1, [r3, #4]
  u->BRR = fck;
 8004db2:	f240 39a9 	movw	r9, #937	; 0x3a9
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004db6:	f04f 0e40 	mov.w	lr, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004dba:	f04f 0c01 	mov.w	ip, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004dbe:	f242 172c 	movw	r7, #8492	; 0x212c
  u->SR = 0;
 8004dc2:	2200      	movs	r2, #0
    sdp->rxmask = 0xFF;
 8004dc4:	20ff      	movs	r0, #255	; 0xff

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8004dc6:	2102      	movs	r1, #2
  USART_TypeDef *u = sdp->usart;
 8004dc8:	6f73      	ldr	r3, [r6, #116]	; 0x74
  u->BRR = fck;
 8004dca:	f8c3 9008 	str.w	r9, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004dce:	f8c3 e010 	str.w	lr, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004dd2:	f8c3 c014 	str.w	ip, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004dd6:	60df      	str	r7, [r3, #12]
  u->SR = 0;
 8004dd8:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8004dda:	681f      	ldr	r7, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004ddc:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8004dde:	f886 0078 	strb.w	r0, [r6, #120]	; 0x78
 8004de2:	7231      	strb	r1, [r6, #8]
 8004de4:	f382 8811 	msr	BASEPRI, r2
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_STM32_ALTERNATE_PUSHPULL); //UART TX
  palSetPadMode(GPIOB, 4, PAL_MODE_OUTPUT_PUSHPULL); //CW/CCW
 8004de8:	4e64      	ldr	r6, [pc, #400]	; (8004f7c <main+0x85c>)
  palSetPadMode(GPIOA, 2, PAL_MODE_STM32_ALTERNATE_PUSHPULL); //UART TX
 8004dea:	2210      	movs	r2, #16
 8004dec:	2104      	movs	r1, #4
 8004dee:	4868      	ldr	r0, [pc, #416]	; (8004f90 <main+0x870>)
 8004df0:	f7fc ffae 	bl	8001d50 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 4, PAL_MODE_OUTPUT_PUSHPULL); //CW/CCW
 8004df4:	4630      	mov	r0, r6
 8004df6:	2206      	movs	r2, #6
 8004df8:	2110      	movs	r1, #16
 8004dfa:	f7fc ffa9 	bl	8001d50 <_pal_lld_setgroupmode>
  palClearPad(GPIOB, 4);
 8004dfe:	2310      	movs	r3, #16
  palClearPad(GPIOC, 13); // Set EPROM to Write Protect Off
 8004e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e04:	4863      	ldr	r0, [pc, #396]	; (8004f94 <main+0x874>)
  palClearPad(GPIOB, 4);
 8004e06:	6173      	str	r3, [r6, #20]
  palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL); // EPROM WP
 8004e08:	2206      	movs	r2, #6
  palClearPad(GPIOC, 13); // Set EPROM to Write Protect Off
 8004e0a:	6141      	str	r1, [r0, #20]
  palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL); // EPROM WP
 8004e0c:	f7fc ffa0 	bl	8001d50 <_pal_lld_setgroupmode>

  chprintf((BaseSequentialStream *)&SD2, "ChibiOS Bluepill F103 Shell v0.1\r\n");
 8004e10:	4961      	ldr	r1, [pc, #388]	; (8004f98 <main+0x878>)
 8004e12:	4862      	ldr	r0, [pc, #392]	; (8004f9c <main+0x87c>)
 8004e14:	f7fd fcd4 	bl	80027c0 <chprintf>
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <main+0x880>)
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	601b      	str	r3, [r3, #0]
 8004e1e:	f382 8811 	msr	BASEPRI, r2
  if (i2cp->state == I2C_STOP) {
 8004e22:	f898 9000 	ldrb.w	r9, [r8]
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8004e26:	4b5f      	ldr	r3, [pc, #380]	; (8004fa4 <main+0x884>)
 8004e28:	f1b9 0f01 	cmp.w	r9, #1
  I2C_TypeDef *dp = i2cp->i2c;
 8004e2c:	f8d8 7034 	ldr.w	r7, [r8, #52]	; 0x34
 8004e30:	f8c8 3004 	str.w	r3, [r8, #4]
  if (i2cp->state == I2C_STOP) {
 8004e34:	d13d      	bne.n	8004eb2 <main+0x792>
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8004e36:	239a      	movs	r3, #154	; 0x9a
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8004e38:	228a      	movs	r2, #138	; 0x8a
      rccResetI2C1();
 8004e3a:	f506 3682 	add.w	r6, r6, #66560	; 0x10400
    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8004e3e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
      rccResetI2C1();
 8004e42:	6933      	ldr	r3, [r6, #16]
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8004e44:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
      rccResetI2C1();
 8004e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e4c:	6133      	str	r3, [r6, #16]
 8004e4e:	6933      	ldr	r3, [r6, #16]
 8004e50:	4955      	ldr	r1, [pc, #340]	; (8004fa8 <main+0x888>)
 8004e52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e56:	6133      	str	r3, [r6, #16]
 8004e58:	2006      	movs	r0, #6
 8004e5a:	6933      	ldr	r3, [r6, #16]
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8004e5c:	f7fc fc08 	bl	8001670 <dmaStreamAllocI.part.0.constprop.0>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4952      	ldr	r1, [pc, #328]	; (8004fac <main+0x88c>)
 8004e64:	2005      	movs	r0, #5
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 8004e66:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8004e6a:	f7fc fc01 	bl	8001670 <dmaStreamAllocI.part.0.constprop.0>
 8004e6e:	4602      	mov	r2, r0
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004e70:	f04f 0c50 	mov.w	ip, #80	; 0x50
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004e74:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
      rccEnableI2C1(true);
 8004e78:	69f3      	ldr	r3, [r6, #28]
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 8004e7a:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      rccEnableI2C1(true);
 8004e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e82:	61f3      	str	r3, [r6, #28]
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8004e84:	e9d8 2309 	ldrd	r2, r3, [r8, #36]	; 0x24
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8004e88:	f442 5140 	orr.w	r1, r2, #12288	; 0x3000
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8004e8c:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
      rccEnableI2C1(true);
 8004e90:	69f3      	ldr	r3, [r6, #28]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004e92:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <main+0x86c>)
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8004e94:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
 8004e98:	f883 c31f 	strb.w	ip, [r3, #799]	; 0x31f
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8004e9c:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004ea0:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004ea4:	6018      	str	r0, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004ea6:	f883 c320 	strb.w	ip, [r3, #800]	; 0x320
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004eaa:	f8c3 9184 	str.w	r9, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004eae:	f8c3 9004 	str.w	r9, [r3, #4]
  dp->CR1 = I2C_CR1_SWRST;
 8004eb2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8004eb6:	f44f 6610 	mov.w	r6, #2304	; 0x900
  dp->CR1 = 0;
 8004eba:	2300      	movs	r3, #0
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8004ebc:	f64f 70c0 	movw	r0, #65472	; 0xffc0
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8004ec0:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8004ec4:	684a      	ldr	r2, [r1, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8004ec6:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 8004eca:	f8d1 e004 	ldr.w	lr, [r1, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8004ece:	f107 0110 	add.w	r1, r7, #16
 8004ed2:	6091      	str	r1, [r2, #8]
  i2c_lld_set_clock(i2cp);
 8004ed4:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8004ed8:	f8ce 1008 	str.w	r1, [lr, #8]
  dp->CR1 = I2C_CR1_SWRST;
 8004edc:	f8c7 c000 	str.w	ip, [r7]
  dp->CR1 = 0;
 8004ee0:	603b      	str	r3, [r7, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8004ee2:	607e      	str	r6, [r7, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8004ee4:	6856      	ldr	r6, [r2, #4]
  i2c_lld_set_clock(i2cp);
 8004ee6:	f8d8 1004 	ldr.w	r1, [r8, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8004eea:	4006      	ands	r6, r0
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8004eec:	f891 c008 	ldrb.w	ip, [r1, #8]
  int32_t clock_speed = i2cp->config->clock_speed;
 8004ef0:	6848      	ldr	r0, [r1, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8004ef2:	6056      	str	r6, [r2, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8004ef4:	6856      	ldr	r6, [r2, #4]
  if (clock_speed <= 100000) {
 8004ef6:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8004fc8 <main+0x8a8>
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8004efa:	f046 0624 	orr.w	r6, r6, #36	; 0x24
  if (clock_speed <= 100000) {
 8004efe:	4570      	cmp	r0, lr
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8004f00:	6056      	str	r6, [r2, #4]
  if (clock_speed <= 100000) {
 8004f02:	f300 819b 	bgt.w	800523c <main+0xb1c>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8004f06:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <main+0x890>)
 8004f08:	0040      	lsls	r0, r0, #1
 8004f0a:	fb93 f3f0 	sdiv	r3, r3, r0
    dp->TRISE = I2C_CLK_FREQ + 1;
 8004f0e:	2025      	movs	r0, #37	; 0x25
    regCCR |= (clock_div & I2C_CCR_CCR);
 8004f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
    dp->TRISE = I2C_CLK_FREQ + 1;
 8004f14:	6210      	str	r0, [r2, #32]
  dp->CCR = regCCR;
 8004f16:	61d3      	str	r3, [r2, #28]
  i2copmode_t opmode = i2cp->config->op_mode;
 8004f18:	7809      	ldrb	r1, [r1, #0]
  regCR1 = dp->CR1;
 8004f1a:	6813      	ldr	r3, [r2, #0]
  switch (opmode) {
 8004f1c:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 8004f1e:	b29b      	uxth	r3, r3
  switch (opmode) {
 8004f20:	f000 8186 	beq.w	8005230 <main+0xb10>
 8004f24:	2903      	cmp	r1, #3
 8004f26:	f000 8180 	beq.w	800522a <main+0xb0a>
 8004f2a:	2901      	cmp	r1, #1
 8004f2c:	f000 8179 	beq.w	8005222 <main+0xb02>
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 8004f30:	f04f 0902 	mov.w	r9, #2
  dp->CR1 = regCR1;
 8004f34:	6013      	str	r3, [r2, #0]
  dp->CR1 |= I2C_CR1_PE;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2600      	movs	r6, #0
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	f888 9000 	strb.w	r9, [r8]
 8004f44:	f386 8811 	msr	BASEPRI, r6
 * EXPORTED FUNCTIONS
 *******************************************************************************
 */
void I2CInitLocal(void) {
  i2cStart(&I2C_BUS, &i2cfg1);
  palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
 8004f48:	2210      	movs	r2, #16
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	480b      	ldr	r0, [pc, #44]	; (8004f7c <main+0x85c>)
 8004f4e:	f7fc feff 	bl	8001d50 <_pal_lld_setgroupmode>
    //palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);
    //palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
    palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);
 8004f52:	2211      	movs	r2, #17
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	4809      	ldr	r0, [pc, #36]	; (8004f7c <main+0x85c>)
 8004f58:	f7fc fefa 	bl	8001d50 <_pal_lld_setgroupmode>
}

void configInit(void) {
    chprintf((BaseSequentialStream *)&SD2, "Open EEPROM...");
 8004f5c:	4915      	ldr	r1, [pc, #84]	; (8004fb4 <main+0x894>)
 8004f5e:	480f      	ldr	r0, [pc, #60]	; (8004f9c <main+0x87c>)
 8004f60:	f7fd fc2e 	bl	80027c0 <chprintf>
    if (drv->id == id) {
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <main+0x898>)
 8004f66:	781a      	ldrb	r2, [r3, #0]
 8004f68:	2a18      	cmp	r2, #24
 8004f6a:	f040 81ff 	bne.w	800536c <main+0xc4c>
  efs->vmt      = eepdev->efsvmt;
 8004f6e:	6858      	ldr	r0, [r3, #4]
  efs->cfg      = eepcfg;
 8004f70:	4f12      	ldr	r7, [pc, #72]	; (8004fbc <main+0x89c>)
  efs->vmt      = eepdev->efsvmt;
 8004f72:	4b13      	ldr	r3, [pc, #76]	; (8004fc0 <main+0x8a0>)
    eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <main+0x8a4>)
  efs->position = 0;
 8004f76:	e9c3 6601 	strd	r6, r6, [r3, #4]
 8004f7a:	e027      	b.n	8004fcc <main+0x8ac>
 8004f7c:	40010c00 	.word	0x40010c00
 8004f80:	d1b71759 	.word	0xd1b71759
 8004f84:	200008a4 	.word	0x200008a4
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	e000e100 	.word	0xe000e100
 8004f90:	40010800 	.word	0x40010800
 8004f94:	40011000 	.word	0x40011000
 8004f98:	08007088 	.word	0x08007088
 8004f9c:	20000db4 	.word	0x20000db4
 8004fa0:	20001270 	.word	0x20001270
 8004fa4:	080073bc 	.word	0x080073bc
 8004fa8:	08001ce1 	.word	0x08001ce1
 8004fac:	08001ca1 	.word	0x08001ca1
 8004fb0:	02255100 	.word	0x02255100
 8004fb4:	080070ac 	.word	0x080070ac
 8004fb8:	20000894 	.word	0x20000894
 8004fbc:	080073a0 	.word	0x080073a0
 8004fc0:	20001034 	.word	0x20001034
 8004fc4:	20001030 	.word	0x20001030
 8004fc8:	000186a0 	.word	0x000186a0
  efs->vmt      = eepdev->efsvmt;
 8004fcc:	6018      	str	r0, [r3, #0]
  efs->cfg      = eepcfg;
 8004fce:	60df      	str	r7, [r3, #12]
    chprintf((BaseSequentialStream *)&SD2, "Done\r\n");
 8004fd0:	49c9      	ldr	r1, [pc, #804]	; (80052f8 <main+0xbd8>)
 8004fd2:	48ca      	ldr	r0, [pc, #808]	; (80052fc <main+0xbdc>)
    eeFS = I2CEepromFileOpen(&eeFile, &eeCfg, EepromFindDevice(EEPROM_DEV_24XX));
 8004fd4:	6013      	str	r3, [r2, #0]
    configParameterRead();
    cudata.configstruct.in_freq = 500000;
    cudata.configstruct.out_freq = 500000;
    cudata.configstruct.fs_corr = 4.42;
    cudata.configstruct.corr = 1050;   //1050 = 105%
 8004fd6:	f240 471a 	movw	r7, #1050	; 0x41a
    chprintf((BaseSequentialStream *)&SD2, "Done\r\n");
 8004fda:	f7fd fbf1 	bl	80027c0 <chprintf>
    configParameterRead();
 8004fde:	f7fe ff57 	bl	8003e90 <configParameterRead>

#include "ch.h"
#include "hal.h"

void hc05_init(void){
  palSetPad(GPIOC, 14); // HC05 Enable off
 8004fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    cudata.configstruct.in_freq = 500000;
 8004fe6:	4bc6      	ldr	r3, [pc, #792]	; (8005300 <main+0xbe0>)
 8004fe8:	48c6      	ldr	r0, [pc, #792]	; (8005304 <main+0xbe4>)
    cudata.configstruct.fs_corr = 4.42;
 8004fea:	4ac7      	ldr	r2, [pc, #796]	; (8005308 <main+0xbe8>)
 8004fec:	6101      	str	r1, [r0, #16]
    cudata.configstruct.corr = 1050;   //1050 = 105%
 8004fee:	f8a3 7082 	strh.w	r7, [r3, #130]	; 0x82
    cudata.configstruct.in_freq = 500000;
 8004ff2:	4fc6      	ldr	r7, [pc, #792]	; (800530c <main+0xbec>)
    cudata.configstruct.fs_corr = 4.42;
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//  palClearPad(GPIOC, 14); // HC05 Enable on
  palSetPadMode(GPIOC, 14, PAL_MODE_OUTPUT_PUSHPULL); // HC05 Enable Low active
 8004ff8:	2206      	movs	r2, #6
    cudata.configstruct.out_freq = 500000;
 8004ffa:	e9c3 7722 	strd	r7, r7, [r3, #136]	; 0x88
 8004ffe:	f7fc fea7 	bl	8001d50 <_pal_lld_setgroupmode>
  palSetPad(GPIOA, 1); // HC05 Off
 8005002:	48c3      	ldr	r0, [pc, #780]	; (8005310 <main+0xbf0>)
//  palClearPad(GPIOA, 1); // HC05 On
  palSetPadMode(GPIOA, 1, PAL_MODE_OUTPUT_PUSHPULL); // HC05 On Low active
 8005004:	4649      	mov	r1, r9
  palSetPad(GPIOA, 1); // HC05 Off
 8005006:	f8c0 9010 	str.w	r9, [r0, #16]
  palSetPadMode(GPIOA, 1, PAL_MODE_OUTPUT_PUSHPULL); // HC05 On Low active
 800500a:	2206      	movs	r2, #6
 800500c:	f7fc fea0 	bl	8001d50 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 12, PAL_MODE_INPUT_PULLUP); // HC05 State
 8005010:	2203      	movs	r2, #3
 8005012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005016:	48bf      	ldr	r0, [pc, #764]	; (8005314 <main+0xbf4>)
 8005018:	f7fc fe9a 	bl	8001d50 <_pal_lld_setgroupmode>
 800501c:	2320      	movs	r3, #32
 800501e:	f383 8811 	msr	BASEPRI, r3
  tp->refs      = (trefs_t)1;
 8005022:	f04f 0c01 	mov.w	ip, #1
  tp->prio      = prio;
 8005026:	2181      	movs	r1, #129	; 0x81
  tp->wabase = (stkalign_t *)wsp;
 8005028:	4bbb      	ldr	r3, [pc, #748]	; (8005318 <main+0xbf8>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800502a:	4abc      	ldr	r2, [pc, #752]	; (800531c <main+0xbfc>)
 800502c:	f103 07dc 	add.w	r7, r3, #220	; 0xdc
 8005030:	48bb      	ldr	r0, [pc, #748]	; (8005320 <main+0xc00>)
 8005032:	f8c3 7114 	str.w	r7, [r3, #276]	; 0x114
 8005036:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tp->name      = name;
 800503a:	4fba      	ldr	r7, [pc, #744]	; (8005324 <main+0xc04>)
  REG_INSERT(tp);
 800503c:	692a      	ldr	r2, [r5, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800503e:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
  REG_INSERT(tp);
 8005042:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8005046:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  tp->prio      = prio;
 800504a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
  tp->realprio  = prio;
 800504e:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  tp->epending  = (eventmask_t)0;
 8005052:	e9c3 664d 	strd	r6, r6, [r3, #308]	; 0x134
  tp->state     = CH_STATE_WTSTART;
 8005056:	f8a3 9120 	strh.w	r9, [r3, #288]	; 0x120
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800505a:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
  REG_INSERT(tp);
 800505e:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
  tp->wabase = (stkalign_t *)wsp;
 8005062:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  tp->refs      = (trefs_t)1;
 8005066:	f883 c122 	strb.w	ip, [r3, #290]	; 0x122
  tp->name      = name;
 800506a:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
  tlp->next = (thread_t *)tlp;
 800506e:	f503 7194 	add.w	r1, r3, #296	; 0x128
  REG_INSERT(tp);
 8005072:	60d0      	str	r0, [r2, #12]
  tqp->next = (thread_t *)tqp;
 8005074:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8005078:	e9c3 124a 	strd	r1, r2, [r3, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 800507c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8005080:	6128      	str	r0, [r5, #16]
  chSchWakeupS(tp, MSG_OK);
 8005082:	f7fc fefd 	bl	8001e80 <chSchWakeupS.constprop.0>
 8005086:	f386 8811 	msr	BASEPRI, r6
  thread_t *shelltp = NULL;
 800508a:	4635      	mov	r5, r6
  H_LOCK(heapp);
 800508c:	4ea6      	ldr	r6, [pc, #664]	; (8005328 <main+0xc08>)
 800508e:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800533c <main+0xc1c>
 8005092:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8005340 <main+0xc20>
 8005096:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8005344 <main+0xc24>
  qp = &heapp->header;
 800509a:	f1a6 0708 	sub.w	r7, r6, #8
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state, when the button is
   * pressed the test procedure is launched.
   */
  while (true) {
    if (!shelltp)
 800509e:	b14d      	cbz	r5, 80050b4 <main+0x994>
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    else if (chThdTerminatedX(shelltp)) {
 80050a0:	f895 3020 	ldrb.w	r3, [r5, #32]
 80050a4:	2b0f      	cmp	r3, #15
 80050a6:	d07c      	beq.n	80051a2 <main+0xa82>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(500);
 80050a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050ac:	f7fd f900 	bl	80022b0 <chThdSleep>
    if (!shelltp)
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	d1f5      	bne.n	80050a0 <main+0x980>
  H_LOCK(heapp);
 80050b4:	4630      	mov	r0, r6
 80050b6:	f7fc ff2b 	bl	8001f10 <chMtxLock>
  while (H_NEXT(qp) != NULL) {
 80050ba:	6863      	ldr	r3, [r4, #4]
  qp = &heapp->header;
 80050bc:	4638      	mov	r0, r7
  while (H_NEXT(qp) != NULL) {
 80050be:	b90b      	cbnz	r3, 80050c4 <main+0x9a4>
 80050c0:	e017      	b.n	80050f2 <main+0x9d2>
 80050c2:	4613      	mov	r3, r2
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80050c4:	6859      	ldr	r1, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80050c6:	f103 050f 	add.w	r5, r3, #15
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80050ca:	1c4a      	adds	r2, r1, #1
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80050cc:	f025 0507 	bic.w	r5, r5, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80050d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80050d4:	f1a5 0e08 	sub.w	lr, r5, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80050d8:	4596      	cmp	lr, r2
 80050da:	d206      	bcs.n	80050ea <main+0x9ca>
 80050dc:	eba2 0c05 	sub.w	ip, r2, r5
 80050e0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80050e4:	f5bc 7f8c 	cmp.w	ip, #280	; 0x118
 80050e8:	d863      	bhi.n	80051b2 <main+0xa92>
  while (H_NEXT(qp) != NULL) {
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d1e7      	bne.n	80050c2 <main+0x9a2>
  H_UNLOCK(heapp);
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7ff fa14 	bl	8004520 <chMtxUnlock>
  if (heapp->provider != NULL) {
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d054      	beq.n	80051a8 <main+0xa88>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 80050fe:	2208      	movs	r2, #8
 8005100:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8005104:	4611      	mov	r1, r2
 8005106:	4798      	blx	r3
    if (ahp != NULL) {
 8005108:	4605      	mov	r5, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d04c      	beq.n	80051a8 <main+0xa88>
      H_SIZE(hp) = size;
 800510e:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8005112:	e940 4302 	strd	r4, r3, [r0, #-8]
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
  if (wsp == NULL) {
    return NULL;
  }

  thread_descriptor_t td = {
 8005116:	2381      	movs	r3, #129	; 0x81
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8005118:	f605 02c8 	addw	r2, r5, #2248	; 0x8c8
  thread_descriptor_t td = {
 800511c:	9303      	str	r3, [sp, #12]
 800511e:	e9cd a500 	strd	sl, r5, [sp]
 8005122:	2320      	movs	r3, #32
 8005124:	e9cd 9804 	strd	r9, r8, [sp, #16]
 8005128:	9202      	str	r2, [sp, #8]
 800512a:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800512e:	4668      	mov	r0, sp
 8005130:	f7fc fca6 	bl	8001a80 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8005134:	2301      	movs	r3, #1
 8005136:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 800513a:	4605      	mov	r5, r0
  chSchWakeupS(tp, MSG_OK);
 800513c:	f7fc fea0 	bl	8001e80 <chSchWakeupS.constprop.0>
 8005140:	2300      	movs	r3, #0
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	e7af      	b.n	80050a8 <main+0x988>
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005148:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800514c:	f04f 0e70 	mov.w	lr, #112	; 0x70
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8005150:	f646 0268 	movw	r2, #26728	; 0x6868
      rccEnableTIM4(true);
 8005154:	4b75      	ldr	r3, [pc, #468]	; (800532c <main+0xc0c>)
 8005156:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800515a:	f04b 0b04 	orr.w	fp, fp, #4
 800515e:	f8c3 b01c 	str.w	fp, [r3, #28]
 8005162:	f8d3 b01c 	ldr.w	fp, [r3, #28]
      rccResetTIM4();
 8005166:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800516a:	f04b 0b04 	orr.w	fp, fp, #4
 800516e:	f8c3 b010 	str.w	fp, [r3, #16]
 8005172:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8005176:	f02b 0b04 	bic.w	fp, fp, #4
 800517a:	f8c3 b010 	str.w	fp, [r3, #16]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	4b6b      	ldr	r3, [pc, #428]	; (8005330 <main+0xc10>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8005182:	f8d9 b018 	ldr.w	fp, [r9, #24]
 8005186:	f883 e31e 	strb.w	lr, [r3, #798]	; 0x31e
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800518a:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800518e:	f8c3 c000 	str.w	ip, [r3]
      pwmp->clock = STM32_TIMCLK1;
 8005192:	4b68      	ldr	r3, [pc, #416]	; (8005334 <main+0xc14>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8005194:	f8cb 2018 	str.w	r2, [fp, #24]
      pwmp->clock = STM32_TIMCLK1;
 8005198:	f8c9 3014 	str.w	r3, [r9, #20]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 800519c:	f8cb 201c 	str.w	r2, [fp, #28]
 80051a0:	e4f4      	b.n	8004b8c <main+0x46c>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7ff fa4c 	bl	8004640 <chThdRelease>
    chThdSleepMilliseconds(500);
 80051a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051ac:	f7fd f880 	bl	80022b0 <chThdSleep>
    if (!shelltp)
 80051b0:	e780      	b.n	80050b4 <main+0x994>
      if (ahp > hp) {
 80051b2:	4573      	cmp	r3, lr
 80051b4:	d21b      	bcs.n	80051ee <main+0xace>
        if (bpages > pages) {
 80051b6:	f240 1119 	movw	r1, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80051ba:	f103 0208 	add.w	r2, r3, #8
 80051be:	ebae 0202 	sub.w	r2, lr, r2
 80051c2:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 80051c4:	458c      	cmp	ip, r1
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80051c6:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 80051c8:	d009      	beq.n	80051de <main+0xabe>
          H_NEXT(fp) = H_NEXT(hp);
 80051ca:	681a      	ldr	r2, [r3, #0]
          H_PAGES(fp) = (bpages - pages) - 1U;
 80051cc:	f5ac 718d 	sub.w	r1, ip, #282	; 0x11a
          fp = H_BLOCK(ahp) + pages;
 80051d0:	f605 00c8 	addw	r0, r5, #2248	; 0x8c8
          H_PAGES(fp) = (bpages - pages) - 1U;
 80051d4:	f8ce 18d4 	str.w	r1, [lr, #2260]	; 0x8d4
          H_NEXT(fp) = H_NEXT(hp);
 80051d8:	f8ce 28d0 	str.w	r2, [lr, #2256]	; 0x8d0
          H_NEXT(hp) = fp;
 80051dc:	6018      	str	r0, [r3, #0]
      H_SIZE(hp) = size;
 80051de:	f640 03c8 	movw	r3, #2248	; 0x8c8
      H_UNLOCK(heapp);
 80051e2:	4630      	mov	r0, r6
      H_SIZE(hp) = size;
 80051e4:	e9ce 4300 	strd	r4, r3, [lr]
      H_UNLOCK(heapp);
 80051e8:	f7ff f99a 	bl	8004520 <chMtxUnlock>
 80051ec:	e793      	b.n	8005116 <main+0x9f6>
        if (H_PAGES(hp) == pages) {
 80051ee:	f240 1519 	movw	r5, #281	; 0x119
 80051f2:	42a9      	cmp	r1, r5
 80051f4:	d00f      	beq.n	8005216 <main+0xaf6>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80051f6:	f603 01d8 	addw	r1, r3, #2264	; 0x8d8
          H_NEXT(fp) = H_NEXT(hp);
 80051fa:	681d      	ldr	r5, [r3, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80051fc:	1a52      	subs	r2, r2, r1
 80051fe:	10d2      	asrs	r2, r2, #3
          fp = H_BLOCK(hp) + pages;
 8005200:	f503 610d 	add.w	r1, r3, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8005204:	f8c3 58d0 	str.w	r5, [r3, #2256]	; 0x8d0
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005208:	f8c3 28d4 	str.w	r2, [r3, #2260]	; 0x8d4
          H_NEXT(qp) = fp;
 800520c:	469e      	mov	lr, r3
 800520e:	f103 0508 	add.w	r5, r3, #8
 8005212:	6001      	str	r1, [r0, #0]
 8005214:	e7e3      	b.n	80051de <main+0xabe>
          H_NEXT(qp) = H_NEXT(hp);
 8005216:	461d      	mov	r5, r3
 8005218:	f855 2b08 	ldr.w	r2, [r5], #8
 800521c:	469e      	mov	lr, r3
 800521e:	6002      	str	r2, [r0, #0]
 8005220:	e7dd      	b.n	80051de <main+0xabe>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8005222:	f023 030a 	bic.w	r3, r3, #10
 8005226:	b29b      	uxth	r3, r3
 8005228:	e682      	b.n	8004f30 <main+0x810>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800522a:	f043 030a 	orr.w	r3, r3, #10
 800522e:	e67f      	b.n	8004f30 <main+0x810>
 8005230:	f023 0308 	bic.w	r3, r3, #8
 8005234:	b29b      	uxth	r3, r3
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8005236:	f043 0302 	orr.w	r3, r3, #2
 800523a:	e679      	b.n	8004f30 <main+0x810>
  else if (clock_speed <= 400000) {
 800523c:	4e3e      	ldr	r6, [pc, #248]	; (8005338 <main+0xc18>)
 800523e:	42b0      	cmp	r0, r6
 8005240:	f73f ae69 	bgt.w	8004f16 <main+0x7f6>
    if (duty == FAST_DUTY_CYCLE_2) {
 8005244:	f1bc 0f02 	cmp.w	ip, #2
 8005248:	d07e      	beq.n	8005348 <main+0xc28>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 800524a:	f1bc 0f03 	cmp.w	ip, #3
 800524e:	f000 8083 	beq.w	8005358 <main+0xc38>
  regCCR = 0;
 8005252:	4618      	mov	r0, r3
  clock_div = I2C_CCR_CCR;
 8005254:	f640 73ff 	movw	r3, #4095	; 0xfff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8005258:	260b      	movs	r6, #11
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 800525a:	4303      	orrs	r3, r0
 800525c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8005260:	6216      	str	r6, [r2, #32]
 8005262:	e658      	b.n	8004f16 <main+0x7f6>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8005264:	2213      	movs	r2, #19
 8005266:	621a      	str	r2, [r3, #32]
 8005268:	e54f      	b.n	8004d0a <main+0x5ea>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800526a:	f44f 7081 	mov.w	r0, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 800526e:	2164      	movs	r1, #100	; 0x64
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8005270:	7812      	ldrb	r2, [r2, #0]
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8005272:	6198      	str	r0, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8005274:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8005276:	b95a      	cbnz	r2, 8005290 <main+0xb70>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8005278:	2213      	movs	r2, #19
 800527a:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 800527c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8005280:	3338      	adds	r3, #56	; 0x38
 8005282:	e9ca 2304 	strd	r2, r3, [sl, #16]
 8005286:	e545      	b.n	8004d14 <main+0x5f4>
    icup->tim->ARR = 0xFFFFFFFFU;
 8005288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800528c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800528e:	e52d      	b.n	8004cec <main+0x5cc>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8005290:	2231      	movs	r2, #49	; 0x31
 8005292:	621a      	str	r2, [r3, #32]
 8005294:	e7f2      	b.n	800527c <main+0xb5c>
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800529a:	2770      	movs	r7, #112	; 0x70
      rccEnableTIM2(true);
 800529c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80052a4:	69d9      	ldr	r1, [r3, #28]
 80052a6:	f041 0101 	orr.w	r1, r1, #1
 80052aa:	61d9      	str	r1, [r3, #28]
 80052ac:	69d9      	ldr	r1, [r3, #28]
      rccResetTIM2();
 80052ae:	6919      	ldr	r1, [r3, #16]
 80052b0:	f041 0101 	orr.w	r1, r1, #1
 80052b4:	6119      	str	r1, [r3, #16]
 80052b6:	6919      	ldr	r1, [r3, #16]
 80052b8:	f021 0101 	bic.w	r1, r1, #1
 80052bc:	6119      	str	r1, [r3, #16]
 80052be:	691b      	ldr	r3, [r3, #16]
      icup->clock = STM32_TIMCLK1;
 80052c0:	491c      	ldr	r1, [pc, #112]	; (8005334 <main+0xc14>)
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <main+0xc10>)
 80052c4:	f883 731c 	strb.w	r7, [r3, #796]	; 0x31c
 80052c8:	f8ca 1008 	str.w	r1, [sl, #8]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80052cc:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80052d0:	6018      	str	r0, [r3, #0]
 80052d2:	e4f7      	b.n	8004cc4 <main+0x5a4>
    pwmp->tim->SR   = ~(2 << channel);
 80052d4:	f06f 0108 	mvn.w	r1, #8
    pwmp->tim->DIER = dier | (2 << channel);
 80052d8:	f043 0308 	orr.w	r3, r3, #8
    pwmp->tim->SR   = ~(2 << channel);
 80052dc:	6111      	str	r1, [r2, #16]
    pwmp->tim->DIER = dier | (2 << channel);
 80052de:	60d3      	str	r3, [r2, #12]
 80052e0:	e4dc      	b.n	8004c9c <main+0x57c>
      if (icup->config->width_cb != NULL)
 80052e2:	6890      	ldr	r0, [r2, #8]
 80052e4:	2800      	cmp	r0, #0
 80052e6:	f47f ad41 	bne.w	8004d6c <main+0x64c>
      dier |= STM32_TIM_DIER_CC2IE;
 80052ea:	f043 0304 	orr.w	r3, r3, #4
 80052ee:	e53f      	b.n	8004d70 <main+0x650>
      dier |= STM32_TIM_DIER_CC1IE;
 80052f0:	f043 0302 	orr.w	r3, r3, #2
 80052f4:	e53c      	b.n	8004d70 <main+0x650>
 80052f6:	bf00      	nop
 80052f8:	080070bc 	.word	0x080070bc
 80052fc:	20000db4 	.word	0x20000db4
 8005300:	20000800 	.word	0x20000800
 8005304:	40011000 	.word	0x40011000
 8005308:	408d70a4 	.word	0x408d70a4
 800530c:	0007a120 	.word	0x0007a120
 8005310:	40010800 	.word	0x40010800
 8005314:	40010c00 	.word	0x40010c00
 8005318:	20001280 	.word	0x20001280
 800531c:	080022d1 	.word	0x080022d1
 8005320:	08000251 	.word	0x08000251
 8005324:	080070c4 	.word	0x080070c4
 8005328:	20000fe0 	.word	0x20000fe0
 800532c:	40021000 	.word	0x40021000
 8005330:	e000e100 	.word	0xe000e100
 8005334:	044aa200 	.word	0x044aa200
 8005338:	00061a80 	.word	0x00061a80
 800533c:	08006f90 	.word	0x08006f90
 8005340:	08004081 	.word	0x08004081
 8005344:	08007460 	.word	0x08007460
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8005348:	4e09      	ldr	r6, [pc, #36]	; (8005370 <main+0xc50>)
 800534a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800534e:	fbb6 f6f0 	udiv	r6, r6, r0
  regCCR = 0;
 8005352:	4618      	mov	r0, r3
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8005354:	b2b3      	uxth	r3, r6
 8005356:	e77f      	b.n	8005258 <main+0xb38>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8005358:	2319      	movs	r3, #25
 800535a:	fb03 f600 	mul.w	r6, r3, r0
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <main+0xc50>)
      regCCR |= I2C_CCR_DUTY;
 8005360:	f44f 4080 	mov.w	r0, #16384	; 0x4000
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8005364:	fbb3 f3f6 	udiv	r3, r3, r6
 8005368:	b29b      	uxth	r3, r3
      regCCR |= I2C_CCR_DUTY;
 800536a:	e775      	b.n	8005258 <main+0xb38>
  efs->vmt      = eepdev->efsvmt;
 800536c:	6873      	ldr	r3, [r6, #4]
 800536e:	deff      	udf	#255	; 0xff
 8005370:	02255100 	.word	0x02255100
	...

08005380 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8005380:	2900      	cmp	r1, #0
 8005382:	dc4d      	bgt.n	8005420 <cmd_threads+0xa0>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    shellUsage(chp, "threads");
    return;
  }
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8005388:	4927      	ldr	r1, [pc, #156]	; (8005428 <cmd_threads+0xa8>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800538a:	b087      	sub	sp, #28
 800538c:	4605      	mov	r5, r0
 800538e:	2620      	movs	r6, #32
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8005390:	f7fd fa16 	bl	80027c0 <chprintf>
 8005394:	f386 8811 	msr	BASEPRI, r6
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8005398:	4f24      	ldr	r7, [pc, #144]	; (800542c <cmd_threads+0xac>)
 800539a:	2200      	movs	r2, #0
 800539c:	68fc      	ldr	r4, [r7, #12]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 800539e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80053a2:	3301      	adds	r3, #1
 80053a4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80053a8:	f382 8811 	msr	BASEPRI, r2
#endif
  chSysUnlock();

  return tp;
 80053ac:	f8df a088 	ldr.w	sl, [pc, #136]	; 8005438 <cmd_threads+0xb8>
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
    uint32_t stklimit = (uint32_t)tp->wabase;
#else
    uint32_t stklimit = 0U;
#endif
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80053b0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800543c <cmd_threads+0xbc>
 80053b4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8005440 <cmd_threads+0xc0>
 80053b8:	e00b      	b.n	80053d2 <cmd_threads+0x52>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 80053ba:	f89b 3022 	ldrb.w	r3, [fp, #34]	; 0x22
 80053be:	2200      	movs	r2, #0
 80053c0:	3301      	adds	r3, #1
 80053c2:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
 80053c6:	f382 8811 	msr	BASEPRI, r2
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff f938 	bl	8004640 <chThdRelease>
 80053d0:	465c      	mov	r4, fp
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
             tp->name == NULL ? "" : tp->name);
 80053d2:	69a1      	ldr	r1, [r4, #24]
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 80053d4:	f894 3020 	ldrb.w	r3, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80053d8:	2900      	cmp	r1, #0
 80053da:	bf08      	it	eq
 80053dc:	4649      	moveq	r1, r9
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 80053de:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 80053e2:	f8d4 c008 	ldr.w	ip, [r4, #8]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80053e6:	f85a e023 	ldr.w	lr, [sl, r3, lsl #2]
 80053ea:	3801      	subs	r0, #1
    uint32_t stklimit = (uint32_t)tp->wabase;
 80053ec:	69e2      	ldr	r2, [r4, #28]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80053ee:	6963      	ldr	r3, [r4, #20]
 80053f0:	e9cd e103 	strd	lr, r1, [sp, #12]
 80053f4:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 80053f8:	4641      	mov	r1, r8
 80053fa:	4628      	mov	r0, r5
 80053fc:	9400      	str	r4, [sp, #0]
 80053fe:	f7fd f9df 	bl	80027c0 <chprintf>
 8005402:	f386 8811 	msr	BASEPRI, r6
  ntp = tp->newer;
 8005406:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  if (ntp == (thread_t *)&ch.rlist) {
 800540a:	45bb      	cmp	fp, r7
 800540c:	d1d5      	bne.n	80053ba <cmd_threads+0x3a>
 800540e:	2300      	movs	r3, #0
 8005410:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8005414:	4620      	mov	r0, r4
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 8005416:	b007      	add	sp, #28
 8005418:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	f7ff b910 	b.w	8004640 <chThdRelease>
    shellUsage(chp, "threads");
 8005420:	4a03      	ldr	r2, [pc, #12]	; (8005430 <cmd_threads+0xb0>)
 8005422:	4904      	ldr	r1, [pc, #16]	; (8005434 <cmd_threads+0xb4>)
 8005424:	f7fd b9cc 	b.w	80027c0 <chprintf>
 8005428:	080070d4 	.word	0x080070d4
 800542c:	20000e30 	.word	0x20000e30
 8005430:	080070cc 	.word	0x080070cc
 8005434:	08006e04 	.word	0x08006e04
 8005438:	08007498 	.word	0x08007498
 800543c:	08006a3c 	.word	0x08006a3c
 8005440:	08007114 	.word	0x08007114
	...

08005450 <__fitted_write>:
}

/**
 * @brief   Write data that can be fitted in one page boundary
 */
static msg_t __fitted_write(void *ip, const uint8_t *data, size_t len, uint32_t *written) {
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ((EepromFileStream *)ip)->position;
 8005454:	e9d0 c402 	ldrd	ip, r4, [r0, #8]
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8005458:	f242 7710 	movw	r7, #10000	; 0x2710
static msg_t __fitted_write(void *ip, const uint8_t *data, size_t len, uint32_t *written) {
 800545c:	4698      	mov	r8, r3
 800545e:	4606      	mov	r6, r0
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	69a3      	ldr	r3, [r4, #24]
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8005464:	f102 0e03 	add.w	lr, r2, #3
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8005468:	4460      	add	r0, ip
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 800546a:	fb07 f70e 	mul.w	r7, r7, lr
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 800546e:	0a00      	lsrs	r0, r0, #8
 8005470:	7018      	strb	r0, [r3, #0]
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	69a3      	ldr	r3, [r4, #24]
  tmo /= EEPROM_I2C_CLOCK;
 8005476:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8005534 <__fitted_write+0xe4>
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 800547a:	4460      	add	r0, ip
  tmo /= EEPROM_I2C_CLOCK;
 800547c:	09ff      	lsrs	r7, r7, #7
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 800547e:	7058      	strb	r0, [r3, #1]
  tmo /= EEPROM_I2C_CLOCK;
 8005480:	fbae 3707 	umull	r3, r7, lr, r7
  memcpy(&(eepcfg->write_buf[2]), data, len);
 8005484:	69a0      	ldr	r0, [r4, #24]
static msg_t __fitted_write(void *ip, const uint8_t *data, size_t len, uint32_t *written) {
 8005486:	b087      	sub	sp, #28
  tmo /= EEPROM_I2C_CLOCK;
 8005488:	093b      	lsrs	r3, r7, #4
  memcpy(&(eepcfg->write_buf[2]), data, len);
 800548a:	3002      	adds	r0, #2
static msg_t __fitted_write(void *ip, const uint8_t *data, size_t len, uint32_t *written) {
 800548c:	4615      	mov	r5, r2
  tmo /= EEPROM_I2C_CLOCK;
 800548e:	9305      	str	r3, [sp, #20]
  memcpy(&(eepcfg->write_buf[2]), data, len);
 8005490:	f7fa feec 	bl	800026c <memcpy>
 */
void i2cAcquireBus(I2CDriver *i2cp) {

  osalDbgCheck(i2cp != NULL);

  osalMutexLock(&i2cp->mutex);
 8005494:	6920      	ldr	r0, [r4, #16]
static msg_t __fitted_write(void *ip, const uint8_t *data, size_t len, uint32_t *written) {
 8005496:	46c1      	mov	r9, r8
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8005498:	300c      	adds	r0, #12
 800549a:	f7fc fd39 	bl	8001f10 <chMtxLock>
 800549e:	2220      	movs	r2, #32
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 80054a0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80054a4:	f8b4 a014 	ldrh.w	sl, [r4, #20]
                                    eepcfg->write_buf, (len + 2), NULL, 0, tmo);
 80054a8:	f8d4 b018 	ldr.w	fp, [r4, #24]
 80054ac:	f382 8811 	msr	BASEPRI, r2
  return TIME_MS2I(tmo);
 80054b0:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
  i2cp->errors = I2C_NO_ERROR;
 80054b4:	2700      	movs	r7, #0
  i2cp->state = I2C_ACTIVE_TX;
 80054b6:	2203      	movs	r2, #3
 80054b8:	f240 30e7 	movw	r0, #999	; 0x3e7
 80054bc:	2100      	movs	r1, #0
  tmo += 10; /* some additional milliseconds to be safer */
 80054be:	9b05      	ldr	r3, [sp, #20]
 80054c0:	f888 2000 	strb.w	r2, [r8]
 80054c4:	330a      	adds	r3, #10
  return TIME_MS2I(tmo);
 80054c6:	fbec 0103 	umlal	r0, r1, ip, r3
 80054ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054ce:	2300      	movs	r3, #0
  i2cp->errors = I2C_NO_ERROR;
 80054d0:	f8c8 7008 	str.w	r7, [r8, #8]
 80054d4:	f7fb ff50 	bl	8001378 <__aeabi_uldivmod>
  systime_t tmo = calc_timeout(eepcfg->i2cp, (len + 2), 0);
 80054d8:	1cab      	adds	r3, r5, #2
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 80054da:	4651      	mov	r1, sl
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 80054dc:	9002      	str	r0, [sp, #8]
 80054de:	465a      	mov	r2, fp
 80054e0:	4640      	mov	r0, r8
 80054e2:	e9cd 7700 	strd	r7, r7, [sp]
 80054e6:	f7fc ff43 	bl	8002370 <i2c_lld_master_transmit_timeout>
 80054ea:	4682      	mov	sl, r0
    i2cp->state = I2C_LOCKED;
 80054ec:	3001      	adds	r0, #1
 80054ee:	bf14      	ite	ne
 80054f0:	2302      	movne	r3, #2
 80054f2:	2305      	moveq	r3, #5
 80054f4:	f888 3000 	strb.w	r3, [r8]
 80054f8:	f387 8811 	msr	BASEPRI, r7
 */
void i2cReleaseBus(I2CDriver *i2cp) {

  osalDbgCheck(i2cp != NULL);

  osalMutexUnlock(&i2cp->mutex);
 80054fc:	6920      	ldr	r0, [r4, #16]
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 80054fe:	300c      	adds	r0, #12
 8005500:	f7ff f80e 	bl	8004520 <chMtxUnlock>
  chThdSleep(eepcfg->write_time);
 8005504:	89e0      	ldrh	r0, [r4, #14]
 8005506:	f7fc fed3 	bl	80022b0 <chThdSleep>

  osalDbgAssert(len > 0, "len must be greater than 0");

  status = eeprom_write(((I2CEepromFileStream *)ip)->cfg,
                        eepfs_getposition(ip), data, len);
  if (status == MSG_OK) {
 800550a:	f1ba 0f00 	cmp.w	sl, #0
 800550e:	d003      	beq.n	8005518 <__fitted_write+0xc8>
    *written += len;
    eepfs_lseek(ip, eepfs_getposition(ip) + len);
  }

  return status;
}
 8005510:	4650      	mov	r0, sl
 8005512:	b007      	add	sp, #28
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *written += len;
 8005518:	f8d9 3000 	ldr.w	r3, [r9]
    eepfs_lseek(ip, eepfs_getposition(ip) + len);
 800551c:	4630      	mov	r0, r6
    *written += len;
 800551e:	442b      	add	r3, r5
 8005520:	f8c9 3000 	str.w	r3, [r9]
    eepfs_lseek(ip, eepfs_getposition(ip) + len);
 8005524:	68b1      	ldr	r1, [r6, #8]
 8005526:	4429      	add	r1, r5
 8005528:	f7fc fc8a 	bl	8001e40 <eepfs_lseek>
}
 800552c:	4650      	mov	r0, sl
 800552e:	b007      	add	sp, #28
 8005530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005534:	014f8b59 	.word	0x014f8b59
	...

08005540 <write>:
 *            aligned to EEPROM page boundaries.
 */
static size_t write(void *ip, const uint8_t *bp, size_t n) {

  size_t   len = 0;      /* bytes to be written per transaction */
  uint32_t written = 0;  /* total bytes successfully written */
 8005540:	2300      	movs	r3, #0
static size_t write(void *ip, const uint8_t *bp, size_t n) {
 8005542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005546:	b082      	sub	sp, #8
  uint32_t firstpage;
  uint32_t lastpage;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));

  if (n == 0)
 8005548:	4614      	mov	r4, r2
  uint32_t written = 0;  /* total bytes successfully written */
 800554a:	9301      	str	r3, [sp, #4]
  if (n == 0)
 800554c:	b91a      	cbnz	r2, 8005556 <write+0x16>
      __fitted_write(ip, bp, len, &written);
    }
  }

  return written;
}
 800554e:	4620      	mov	r0, r4
 8005550:	b002      	add	sp, #8
 8005552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005556:	4606      	mov	r6, r0
msg_t eepfs_getposition(void *ip) {
 8005558:	460d      	mov	r5, r1
  if (((size_t)eepfs_getposition(ip) + n) > (size_t)eepfs_getsize(ip))
 800555a:	f7fc fc81 	bl	8001e60 <eepfs_getsize>
  return ((EepromFileStream *)ip)->position;
 800555e:	68b2      	ldr	r2, [r6, #8]
 8005560:	18a3      	adds	r3, r4, r2
 8005562:	4283      	cmp	r3, r0
 8005564:	d82e      	bhi.n	80055c4 <write+0x84>
  pagesize  =  ((EepromFileStream *)ip)->cfg->pagesize;
 8005566:	68f3      	ldr	r3, [r6, #12]
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8005568:	6819      	ldr	r1, [r3, #0]
               eepfs_getposition(ip)) / pagesize;
 800556a:	899f      	ldrh	r7, [r3, #12]
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 800556c:	440a      	add	r2, r1
               eepfs_getposition(ip) + n - 1) / pagesize;
 800556e:	1e51      	subs	r1, r2, #1
 8005570:	4421      	add	r1, r4
  lastpage  = (((EepromFileStream *)ip)->cfg->barrier_low +
 8005572:	fbb1 f1f7 	udiv	r1, r1, r7
  firstpage = (((EepromFileStream *)ip)->cfg->barrier_low +
 8005576:	fbb2 f3f7 	udiv	r3, r2, r7
  if (firstpage == lastpage) {
 800557a:	428b      	cmp	r3, r1
 800557c:	d028      	beq.n	80055d0 <write+0x90>
    len =  ((firstpage + 1) * pagesize) - eepfs_getposition(ip);
 800557e:	fb03 7307 	mla	r3, r3, r7, r7
    len -= ((EepromFileStream *)ip)->cfg->barrier_low;
 8005582:	eba3 0802 	sub.w	r8, r3, r2
    if (__fitted_write(ip, bp, len, &written) != MSG_OK)
 8005586:	4642      	mov	r2, r8
 8005588:	4629      	mov	r1, r5
 800558a:	4630      	mov	r0, r6
 800558c:	ab01      	add	r3, sp, #4
 800558e:	f7ff ff5f 	bl	8005450 <__fitted_write>
 8005592:	b990      	cbnz	r0, 80055ba <write+0x7a>
    while ((n - written) > pagesize) {
 8005594:	9b01      	ldr	r3, [sp, #4]
    bp += len;
 8005596:	4445      	add	r5, r8
    while ((n - written) > pagesize) {
 8005598:	1ae2      	subs	r2, r4, r3
 800559a:	4297      	cmp	r7, r2
 800559c:	d304      	bcc.n	80055a8 <write+0x68>
 800559e:	e01f      	b.n	80055e0 <write+0xa0>
 80055a0:	9b01      	ldr	r3, [sp, #4]
 80055a2:	1ae2      	subs	r2, r4, r3
 80055a4:	4297      	cmp	r7, r2
 80055a6:	d21b      	bcs.n	80055e0 <write+0xa0>
      if (__fitted_write(ip, bp, len, &written) != MSG_OK)
 80055a8:	4629      	mov	r1, r5
 80055aa:	463a      	mov	r2, r7
 80055ac:	4630      	mov	r0, r6
 80055ae:	ab01      	add	r3, sp, #4
 80055b0:	f7ff ff4e 	bl	8005450 <__fitted_write>
      bp += len;
 80055b4:	443d      	add	r5, r7
      if (__fitted_write(ip, bp, len, &written) != MSG_OK)
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d0f2      	beq.n	80055a0 <write+0x60>
  return written;
 80055ba:	9c01      	ldr	r4, [sp, #4]
}
 80055bc:	4620      	mov	r0, r4
 80055be:	b002      	add	sp, #8
 80055c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (n == 0)
 80055c4:	1a84      	subs	r4, r0, r2
 80055c6:	d1ce      	bne.n	8005566 <write+0x26>
}
 80055c8:	4620      	mov	r0, r4
 80055ca:	b002      	add	sp, #8
 80055cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __fitted_write(ip, bp, len, &written);
 80055d0:	4622      	mov	r2, r4
 80055d2:	4629      	mov	r1, r5
 80055d4:	4630      	mov	r0, r6
 80055d6:	ab01      	add	r3, sp, #4
 80055d8:	f7ff ff3a 	bl	8005450 <__fitted_write>
    return written;
 80055dc:	9c01      	ldr	r4, [sp, #4]
 80055de:	e7b6      	b.n	800554e <write+0xe>
    if (len == 0)
 80055e0:	b90a      	cbnz	r2, 80055e6 <write+0xa6>
 80055e2:	461c      	mov	r4, r3
 80055e4:	e7b3      	b.n	800554e <write+0xe>
      __fitted_write(ip, bp, len, &written);
 80055e6:	4629      	mov	r1, r5
 80055e8:	4630      	mov	r0, r6
 80055ea:	ab01      	add	r3, sp, #4
 80055ec:	f7ff ff30 	bl	8005450 <__fitted_write>
 80055f0:	e7e3      	b.n	80055ba <write+0x7a>
 80055f2:	bf00      	nop
	...

08005600 <read>:
static size_t read(void *ip, uint8_t *bp, size_t n) {
  msg_t status = MSG_OK;

  osalDbgCheck((ip != NULL) && (((EepromFileStream *)ip)->vmt != NULL));

  if (n == 0)
 8005600:	b90a      	cbnz	r2, 8005606 <read+0x6>
    return 0;
 8005602:	2000      	movs	r0, #0
    return 0;
  else {
    eepfs_lseek(ip, (eepfs_getposition(ip) + n));
    return n;
  }
}
 8005604:	4770      	bx	lr
static size_t read(void *ip, uint8_t *bp, size_t n) {
 8005606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	4605      	mov	r5, r0
 800560c:	b089      	sub	sp, #36	; 0x24
 800560e:	460e      	mov	r6, r1
 8005610:	4614      	mov	r4, r2
  if (((size_t)eepfs_getposition(ip) + n) > (size_t)eepfs_getsize(ip))
 8005612:	f7fc fc25 	bl	8001e60 <eepfs_getsize>
 8005616:	68a9      	ldr	r1, [r5, #8]
 8005618:	1853      	adds	r3, r2, r1
 800561a:	4283      	cmp	r3, r0
 800561c:	d85b      	bhi.n	80056d6 <read+0xd6>
  if (n == 1) {
 800561e:	2c01      	cmp	r4, #1
 8005620:	d05c      	beq.n	80056dc <read+0xdc>
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8005622:	f242 7310 	movw	r3, #10000	; 0x2710
  status  = eeprom_read(((I2CEepromFileStream *)ip)->cfg,
 8005626:	68ef      	ldr	r7, [r5, #12]
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8005628:	f104 0c03 	add.w	ip, r4, #3
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 800562c:	6838      	ldr	r0, [r7, #0]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4408      	add	r0, r1
  tmo = ((txbytes + rxbytes + 1) * bitsinbyte * 1000);
 8005632:	fb03 f30c 	mul.w	r3, r3, ip
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8005636:	0a00      	lsrs	r0, r0, #8
 8005638:	7010      	strb	r0, [r2, #0]
 800563a:	6838      	ldr	r0, [r7, #0]
  tmo /= EEPROM_I2C_CLOCK;
 800563c:	4a3c      	ldr	r2, [pc, #240]	; (8005730 <read+0x130>)
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 800563e:	4401      	add	r1, r0
  tmo /= EEPROM_I2C_CLOCK;
 8005640:	09db      	lsrs	r3, r3, #7
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8005642:	69b8      	ldr	r0, [r7, #24]
  tmo /= EEPROM_I2C_CLOCK;
 8005644:	fba2 2303 	umull	r2, r3, r2, r3
  eeprom_split_addr(eepcfg->write_buf, (offset + eepcfg->barrier_low));
 8005648:	7041      	strb	r1, [r0, #1]
  osalMutexLock(&i2cp->mutex);
 800564a:	6938      	ldr	r0, [r7, #16]
  tmo /= EEPROM_I2C_CLOCK;
 800564c:	091b      	lsrs	r3, r3, #4
  chMtxLock(mp);
 800564e:	300c      	adds	r0, #12
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	f7fc fc5d 	bl	8001f10 <chMtxLock>
 8005656:	2220      	movs	r2, #32
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 8005658:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800565c:	f8b7 a014 	ldrh.w	sl, [r7, #20]
                                    eepcfg->write_buf, 2, data, len, tmo);
 8005660:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8005664:	f382 8811 	msr	BASEPRI, r2
  return TIME_MS2I(tmo);
 8005668:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
  i2cp->state = I2C_ACTIVE_TX;
 800566c:	2203      	movs	r2, #3
  i2cp->errors = I2C_NO_ERROR;
 800566e:	f04f 0900 	mov.w	r9, #0
 8005672:	f240 30e7 	movw	r0, #999	; 0x3e7
 8005676:	2100      	movs	r1, #0
  tmo += 10; /* some additional milliseconds to be safer */
 8005678:	9b05      	ldr	r3, [sp, #20]
  i2cp->state = I2C_ACTIVE_TX;
 800567a:	f888 2000 	strb.w	r2, [r8]
 800567e:	330a      	adds	r3, #10
  return TIME_MS2I(tmo);
 8005680:	fbec 0103 	umlal	r0, r1, ip, r3
 8005684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005688:	2300      	movs	r3, #0
  i2cp->errors = I2C_NO_ERROR;
 800568a:	f8c8 9008 	str.w	r9, [r8, #8]
 800568e:	f7fb fe73 	bl	8001378 <__aeabi_uldivmod>
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8005692:	e9cd 6400 	strd	r6, r4, [sp]
  status = i2cMasterTransmitTimeout(eepcfg->i2cp, eepcfg->addr,
 8005696:	9002      	str	r0, [sp, #8]
 8005698:	465a      	mov	r2, fp
 800569a:	4651      	mov	r1, sl
 800569c:	4640      	mov	r0, r8
 800569e:	2302      	movs	r3, #2
 80056a0:	f7fc fe66 	bl	8002370 <i2c_lld_master_transmit_timeout>
    i2cp->state = I2C_LOCKED;
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	bf14      	ite	ne
 80056a8:	2302      	movne	r3, #2
 80056aa:	2305      	moveq	r3, #5
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 80056ac:	4606      	mov	r6, r0
  if (rdymsg == MSG_TIMEOUT) {
 80056ae:	f888 3000 	strb.w	r3, [r8]
 80056b2:	f389 8811 	msr	BASEPRI, r9
  osalMutexUnlock(&i2cp->mutex);
 80056b6:	6938      	ldr	r0, [r7, #16]
  chMtxUnlock(mp);
 80056b8:	300c      	adds	r0, #12
 80056ba:	f7fe ff31 	bl	8004520 <chMtxUnlock>
  if (status != MSG_OK)
 80056be:	b11e      	cbz	r6, 80056c8 <read+0xc8>
        return 0;
 80056c0:	2000      	movs	r0, #0
}
 80056c2:	b009      	add	sp, #36	; 0x24
 80056c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eepfs_lseek(ip, (eepfs_getposition(ip) + n));
 80056c8:	68a9      	ldr	r1, [r5, #8]
 80056ca:	4628      	mov	r0, r5
 80056cc:	4421      	add	r1, r4
 80056ce:	f7fc fbb7 	bl	8001e40 <eepfs_lseek>
 80056d2:	4620      	mov	r0, r4
 80056d4:	e7f5      	b.n	80056c2 <read+0xc2>
  if (n == 0)
 80056d6:	1a44      	subs	r4, r0, r1
 80056d8:	d0f2      	beq.n	80056c0 <read+0xc0>
 80056da:	e7a0      	b.n	800561e <read+0x1e>
    if ((eepfs_getposition(ip) + 1) < eepfs_getsize(ip)) {
 80056dc:	1c4b      	adds	r3, r1, #1
 80056de:	4298      	cmp	r0, r3
 80056e0:	dd10      	ble.n	8005704 <read+0x104>
      if (read(ip, __buf, 2) == 2) {
 80056e2:	2202      	movs	r2, #2
 80056e4:	4628      	mov	r0, r5
 80056e6:	a907      	add	r1, sp, #28
 80056e8:	f7ff ff8a 	bl	8005600 <read>
 80056ec:	2802      	cmp	r0, #2
 80056ee:	d1e7      	bne.n	80056c0 <read+0xc0>
        eepfs_lseek(ip, (eepfs_getposition(ip) + 1));
 80056f0:	68a9      	ldr	r1, [r5, #8]
 80056f2:	4628      	mov	r0, r5
 80056f4:	3101      	adds	r1, #1
 80056f6:	f7fc fba3 	bl	8001e40 <eepfs_lseek>
        bp[0] = __buf[0];
 80056fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
        return 1;
 80056fe:	4620      	mov	r0, r4
        bp[0] = __buf[0];
 8005700:	7033      	strb	r3, [r6, #0]
        return 1;
 8005702:	e7de      	b.n	80056c2 <read+0xc2>
      eepfs_lseek(ip, (eepfs_getposition(ip) - 1));
 8005704:	3901      	subs	r1, #1
 8005706:	4628      	mov	r0, r5
 8005708:	f7fc fb9a 	bl	8001e40 <eepfs_lseek>
      if (read(ip, __buf, 2) == 2) {
 800570c:	2202      	movs	r2, #2
 800570e:	4628      	mov	r0, r5
 8005710:	a907      	add	r1, sp, #28
 8005712:	f7ff ff75 	bl	8005600 <read>
 8005716:	2802      	cmp	r0, #2
 8005718:	d1d2      	bne.n	80056c0 <read+0xc0>
        eepfs_lseek(ip, (eepfs_getposition(ip) + 2));
 800571a:	68a9      	ldr	r1, [r5, #8]
 800571c:	4628      	mov	r0, r5
 800571e:	3102      	adds	r1, #2
 8005720:	f7fc fb8e 	bl	8001e40 <eepfs_lseek>
        bp[0] = __buf[1];
 8005724:	f89d 301d 	ldrb.w	r3, [sp, #29]
        return 1;
 8005728:	4620      	mov	r0, r4
        bp[0] = __buf[1];
 800572a:	7033      	strb	r3, [r6, #0]
        return 1;
 800572c:	e7c9      	b.n	80056c2 <read+0xc2>
 800572e:	bf00      	nop
 8005730:	014f8b59 	.word	0x014f8b59
	...

08005740 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <__early_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8005742:	4613      	mov	r3, r2
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	f041 0101 	orr.w	r1, r1, #1
 800574a:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	0791      	lsls	r1, r2, #30
 8005750:	d5fc      	bpl.n	800574c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8005752:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8005754:	6819      	ldr	r1, [r3, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8005756:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8005758:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800575c:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800575e:	6058      	str	r0, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8005760:	6853      	ldr	r3, [r2, #4]
 8005762:	f013 0f0c 	tst.w	r3, #12
 8005766:	d1fb      	bne.n	8005760 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8005768:	6811      	ldr	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800576c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005770:	6011      	str	r1, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	0392      	lsls	r2, r2, #14
 8005776:	d5fc      	bpl.n	8005772 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8005778:	6859      	ldr	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800577a:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800577c:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8005780:	6059      	str	r1, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8005788:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	019b      	lsls	r3, r3, #6
 800578e:	d5fc      	bpl.n	800578a <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8005790:	2112      	movs	r1, #18
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <__early_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8005794:	4808      	ldr	r0, [pc, #32]	; (80057b8 <__early_init+0x78>)
 8005796:	6050      	str	r0, [r2, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8005798:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800579a:	6853      	ldr	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800579c:	4904      	ldr	r1, [pc, #16]	; (80057b0 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 800579e:	f043 0302 	orr.w	r3, r3, #2
 80057a2:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80057a4:	684b      	ldr	r3, [r1, #4]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d1fa      	bne.n	80057a4 <__early_init+0x64>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80057ae:	4770      	bx	lr
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40022000 	.word	0x40022000
 80057b8:	001d6400 	.word	0x001d6400
 80057bc:	00000000 	.word	0x00000000

080057c0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80057c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 80057c4:	4c6c      	ldr	r4, [pc, #432]	; (8005978 <VectorD8+0x1b8>)
 80057c6:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80057c8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 80057cc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80057ce:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80057d0:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80057d2:	f100 8082 	bmi.w	80058da <VectorD8+0x11a>
 80057d6:	2320      	movs	r3, #32
 80057d8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80057dc:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80057e0:	d04f      	beq.n	8005882 <VectorD8+0xc2>
  chEvtBroadcastFlagsI(esp, flags);
 80057e2:	4f66      	ldr	r7, [pc, #408]	; (800597c <VectorD8+0x1bc>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80057e4:	f04f 0a00 	mov.w	sl, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80057e8:	f107 0908 	add.w	r9, r7, #8
 80057ec:	e008      	b.n	8005800 <VectorD8+0x40>
    if (sr & USART_SR_RXNE)
 80057ee:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80057f0:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 80057f4:	d41e      	bmi.n	8005834 <VectorD8+0x74>
    sr = u->SR;
 80057f6:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80057f8:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80057fc:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80057fe:	d040      	beq.n	8005882 <VectorD8+0xc2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8005800:	072b      	lsls	r3, r5, #28
 8005802:	d0f4      	beq.n	80057ee <VectorD8+0x2e>
    sts |= SD_OVERRUN_ERROR;
 8005804:	f015 0f08 	tst.w	r5, #8
 8005808:	bf0c      	ite	eq
 800580a:	2100      	moveq	r1, #0
 800580c:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800580e:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8005810:	bf48      	it	mi
 8005812:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8005816:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8005818:	bf48      	it	mi
 800581a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800581e:	076b      	lsls	r3, r5, #29
 8005820:	4638      	mov	r0, r7
    sts |= SD_NOISE_ERROR;
 8005822:	bf48      	it	mi
 8005824:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8005828:	f7fc f9ba 	bl	8001ba0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800582c:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800582e:	f8d6 b004 	ldr.w	fp, [r6, #4]
    if (sr & USART_SR_RXNE)
 8005832:	d5e0      	bpl.n	80057f6 <VectorD8+0x36>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8005834:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8005836:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800583a:	2b00      	cmp	r3, #0
 800583c:	d03c      	beq.n	80058b8 <VectorD8+0xf8>
  if (!iqIsFullI(iqp)) {
 800583e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8005842:	4293      	cmp	r3, r2
 8005844:	d040      	beq.n	80058c8 <VectorD8+0x108>
    iqp->q_counter++;
 8005846:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8005848:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800584a:	3201      	adds	r2, #1
 800584c:	ea05 050b 	and.w	r5, r5, fp
 8005850:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8005852:	6221      	str	r1, [r4, #32]
 8005854:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8005856:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800585a:	429a      	cmp	r2, r3
 800585c:	d301      	bcc.n	8005862 <VectorD8+0xa2>
      iqp->q_wrptr = iqp->q_buffer;
 800585e:	69a3      	ldr	r3, [r4, #24]
 8005860:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005862:	68e0      	ldr	r0, [r4, #12]
 8005864:	4548      	cmp	r0, r9
 8005866:	d0c6      	beq.n	80057f6 <VectorD8+0x36>
  tqp->next             = tp->queue.next;
 8005868:	6803      	ldr	r3, [r0, #0]
 800586a:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800586c:	f8c3 9004 	str.w	r9, [r3, #4]
 8005870:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8005874:	f7fc f97c 	bl	8001b70 <chSchReadyI>
    sr = u->SR;
 8005878:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800587a:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800587e:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005880:	d1be      	bne.n	8005800 <VectorD8+0x40>
 8005882:	2300      	movs	r3, #0
 8005884:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8005888:	f018 0f80 	tst.w	r8, #128	; 0x80
 800588c:	d001      	beq.n	8005892 <VectorD8+0xd2>
 800588e:	062a      	lsls	r2, r5, #24
 8005890:	d432      	bmi.n	80058f8 <VectorD8+0x138>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8005892:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005896:	d00b      	beq.n	80058b0 <VectorD8+0xf0>
 8005898:	066b      	lsls	r3, r5, #25
 800589a:	d509      	bpl.n	80058b0 <VectorD8+0xf0>
 800589c:	2320      	movs	r3, #32
 800589e:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80058a2:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d04b      	beq.n	8005942 <VectorD8+0x182>
 80058aa:	2300      	movs	r3, #0
 80058ac:	f383 8811 	msr	BASEPRI, r3
}
 80058b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80058b4:	f7fc b874 	b.w	80019a0 <_port_irq_epilogue>
 80058b8:	2104      	movs	r1, #4
 80058ba:	4638      	mov	r0, r7
 80058bc:	f7fc f970 	bl	8001ba0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80058c0:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d1be      	bne.n	8005846 <VectorD8+0x86>
 80058c8:	6962      	ldr	r2, [r4, #20]
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	d0bb      	beq.n	8005846 <VectorD8+0x86>
 80058ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058d2:	4638      	mov	r0, r7
 80058d4:	f7fc f964 	bl	8001ba0 <chEvtBroadcastFlagsI>
 80058d8:	e78d      	b.n	80057f6 <VectorD8+0x36>
 80058da:	2320      	movs	r3, #32
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058e4:	1d20      	adds	r0, r4, #4
 80058e6:	f7fc f95b 	bl	8001ba0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80058ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058ee:	2300      	movs	r3, #0
 80058f0:	6032      	str	r2, [r6, #0]
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	e76e      	b.n	80057d6 <VectorD8+0x16>
 80058f8:	2320      	movs	r3, #32
 80058fa:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 80058fe:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8005902:	429a      	cmp	r2, r3
 8005904:	d02a      	beq.n	800595c <VectorD8+0x19c>
    oqp->q_counter++;
 8005906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8005908:	6c20      	ldr	r0, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 800590a:	1c59      	adds	r1, r3, #1
    oqp->q_counter++;
 800590c:	3201      	adds	r2, #1
 800590e:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8005910:	64a1      	str	r1, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8005912:	4281      	cmp	r1, r0
    b = *oqp->q_rdptr++;
 8005914:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8005916:	d301      	bcc.n	800591c <VectorD8+0x15c>
      oqp->q_rdptr = oqp->q_buffer;
 8005918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800591a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 800591c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800591e:	4b18      	ldr	r3, [pc, #96]	; (8005980 <VectorD8+0x1c0>)
 8005920:	4298      	cmp	r0, r3
 8005922:	d006      	beq.n	8005932 <VectorD8+0x172>
  tp->u.rdymsg = msg;
 8005924:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
 8005926:	6802      	ldr	r2, [r0, #0]
 8005928:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 800592a:	6053      	str	r3, [r2, #4]
 800592c:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800592e:	f7fc f91f 	bl	8001b70 <chSchReadyI>
      u->DR = b;
 8005932:	6077      	str	r7, [r6, #4]
 8005934:	2300      	movs	r3, #0
 8005936:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800593a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800593e:	d0b7      	beq.n	80058b0 <VectorD8+0xf0>
 8005940:	e7aa      	b.n	8005898 <VectorD8+0xd8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8005942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0b0      	beq.n	80058aa <VectorD8+0xea>
 8005948:	2110      	movs	r1, #16
 800594a:	480c      	ldr	r0, [pc, #48]	; (800597c <VectorD8+0x1bc>)
 800594c:	f7fc f928 	bl	8001ba0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8005950:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8005954:	ea08 0303 	and.w	r3, r8, r3
 8005958:	60f3      	str	r3, [r6, #12]
 800595a:	e7a6      	b.n	80058aa <VectorD8+0xea>
  if (!oqIsEmptyI(oqp)) {
 800595c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800595e:	2a00      	cmp	r2, #0
 8005960:	d0d1      	beq.n	8005906 <VectorD8+0x146>
 8005962:	2108      	movs	r1, #8
 8005964:	4805      	ldr	r0, [pc, #20]	; (800597c <VectorD8+0x1bc>)
 8005966:	f7fc f91b 	bl	8001ba0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800596a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800596e:	ea08 0303 	and.w	r3, r8, r3
 8005972:	60f3      	str	r3, [r6, #12]
 8005974:	e7de      	b.n	8005934 <VectorD8+0x174>
 8005976:	bf00      	nop
 8005978:	20000db4 	.word	0x20000db4
 800597c:	20000db8 	.word	0x20000db8
 8005980:	20000de4 	.word	0x20000de4
	...

08005990 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8005990:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8005992:	4d17      	ldr	r5, [pc, #92]	; (80059f0 <VectorB8+0x60>)
 8005994:	69ab      	ldr	r3, [r5, #24]
 8005996:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	4014      	ands	r4, r2
 800599c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800599e:	43d2      	mvns	r2, r2
 80059a0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80059a2:	07a3      	lsls	r3, r4, #30
 80059a4:	d504      	bpl.n	80059b0 <VectorB8+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80059a6:	686b      	ldr	r3, [r5, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80059aa:	b10b      	cbz	r3, 80059b0 <VectorB8+0x20>
    pwmp->config->channels[0].callback(pwmp);
 80059ac:	4628      	mov	r0, r5
 80059ae:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80059b0:	0760      	lsls	r0, r4, #29
 80059b2:	d504      	bpl.n	80059be <VectorB8+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80059b4:	686b      	ldr	r3, [r5, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80059b8:	b10b      	cbz	r3, 80059be <VectorB8+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80059ba:	480d      	ldr	r0, [pc, #52]	; (80059f0 <VectorB8+0x60>)
 80059bc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80059be:	0721      	lsls	r1, r4, #28
 80059c0:	d504      	bpl.n	80059cc <VectorB8+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80059c2:	686b      	ldr	r3, [r5, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80059c6:	b10b      	cbz	r3, 80059cc <VectorB8+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 80059c8:	4809      	ldr	r0, [pc, #36]	; (80059f0 <VectorB8+0x60>)
 80059ca:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80059cc:	06e2      	lsls	r2, r4, #27
 80059ce:	d504      	bpl.n	80059da <VectorB8+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 80059d0:	686b      	ldr	r3, [r5, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80059d4:	b10b      	cbz	r3, 80059da <VectorB8+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 80059d6:	4806      	ldr	r0, [pc, #24]	; (80059f0 <VectorB8+0x60>)
 80059d8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80059da:	07e3      	lsls	r3, r4, #31
 80059dc:	d504      	bpl.n	80059e8 <VectorB8+0x58>
 80059de:	686b      	ldr	r3, [r5, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	b10b      	cbz	r3, 80059e8 <VectorB8+0x58>
    pwmp->config->callback(pwmp);
 80059e4:	4802      	ldr	r0, [pc, #8]	; (80059f0 <VectorB8+0x60>)
 80059e6:	4798      	blx	r3
}
 80059e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80059ec:	f7fb bfd8 	b.w	80019a0 <_port_irq_epilogue>
 80059f0:	20000d98 	.word	0x20000d98
	...

08005a00 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8005a00:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 8005a02:	4803      	ldr	r0, [pc, #12]	; (8005a10 <VectorB0+0x10>)
 8005a04:	f7fc f904 	bl	8001c10 <icu_lld_serve_interrupt>
}
 8005a08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005a0c:	f7fb bfc8 	b.w	80019a0 <_port_irq_epilogue>
 8005a10:	20000d80 	.word	0x20000d80
	...

08005a20 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8005a20:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD1);
 8005a22:	4803      	ldr	r0, [pc, #12]	; (8005a30 <VectorA4+0x10>)
 8005a24:	f7fc f8f4 	bl	8001c10 <icu_lld_serve_interrupt>
}
 8005a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005a2c:	f7fb bfb8 	b.w	80019a0 <_port_irq_epilogue>
 8005a30:	20000d68 	.word	0x20000d68
	...

08005a40 <VectorAC>:
 8005a40:	f7ff bfee 	b.w	8005a20 <VectorA4>
	...

08005a50 <VectorB4>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8005a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8005a54:	4d2c      	ldr	r5, [pc, #176]	; (8005b08 <VectorB4+0xb8>)
 8005a56:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8005a58:	68ea      	ldr	r2, [r5, #12]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8005a5e:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8005a60:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8005a62:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8005a64:	d403      	bmi.n	8005a6e <VectorB4+0x1e>
}
 8005a66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8005a6a:	f7fb bf99 	b.w	80019a0 <_port_irq_epilogue>
 8005a6e:	2320      	movs	r3, #32
 8005a70:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8005a74:	4e25      	ldr	r6, [pc, #148]	; (8005b0c <VectorB4+0xbc>)
 8005a76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8005a78:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
  vtp = ch.vtlist.next;
 8005a7a:	69b0      	ldr	r0, [r6, #24]
 8005a7c:	b29b      	uxth	r3, r3

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8005a7e:	6881      	ldr	r1, [r0, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8005a80:	1a9c      	subs	r4, r3, r2
 8005a82:	b2a4      	uxth	r4, r4
 8005a84:	428c      	cmp	r4, r1
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8005a86:	bf28      	it	cs
 8005a88:	2700      	movcs	r7, #0
 8005a8a:	f106 0818 	add.w	r8, r6, #24
    if (nowdelta < vtp->delta) {
 8005a8e:	d321      	bcc.n	8005ad4 <VectorB4+0x84>
 8005a90:	f04f 0920 	mov.w	r9, #32
 8005a94:	e000      	b.n	8005a98 <VectorB4+0x48>
 8005a96:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005a98:	6803      	ldr	r3, [r0, #0]
      ch.vtlist.lasttime += vtp->delta;
 8005a9a:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005a9c:	4543      	cmp	r3, r8
      ch.vtlist.lasttime += vtp->delta;
 8005a9e:	84b2      	strh	r2, [r6, #36]	; 0x24
      nowdelta -= vtp->delta;
 8005aa0:	eba4 0401 	sub.w	r4, r4, r1
      fn = vtp->func;
 8005aa4:	68c2      	ldr	r2, [r0, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005aa6:	f8c3 8004 	str.w	r8, [r3, #4]
      ch.vtlist.next = vtp->next;
 8005aaa:	61b3      	str	r3, [r6, #24]
      vtp->func = NULL;
 8005aac:	60c7      	str	r7, [r0, #12]
  STM32_ST_TIM->DIER = 0U;
 8005aae:	bf08      	it	eq
 8005ab0:	60ef      	streq	r7, [r5, #12]
 8005ab2:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8005ab6:	6900      	ldr	r0, [r0, #16]
 8005ab8:	4790      	blx	r2
 8005aba:	f389 8811 	msr	BASEPRI, r9
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8005abe:	69b0      	ldr	r0, [r6, #24]
    }
    while (vtp->delta <= nowdelta);
 8005ac0:	6881      	ldr	r1, [r0, #8]
 8005ac2:	428c      	cmp	r4, r1
 8005ac4:	d2e7      	bcs.n	8005a96 <VectorB4+0x46>
  return (systime_t)STM32_ST_TIM->CNT;
 8005ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8005ac8:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	1a9c      	subs	r4, r3, r2
 8005ace:	b2a4      	uxth	r4, r4
    if (nowdelta < vtp->delta) {
 8005ad0:	428c      	cmp	r4, r1
 8005ad2:	d2dd      	bcs.n	8005a90 <VectorB4+0x40>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005ad4:	4540      	cmp	r0, r8
 8005ad6:	d010      	beq.n	8005afa <VectorB4+0xaa>
  return systime + (systime_t)interval;
 8005ad8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8005adc:	6882      	ldr	r2, [r0, #8]
  ch.vtlist.lasttime += nowdelta;
 8005ade:	84b3      	strh	r3, [r6, #36]	; 0x24
  ch.vtlist.next->delta -= nowdelta;
 8005ae0:	1b14      	subs	r4, r2, r4
 8005ae2:	42a1      	cmp	r1, r4
 8005ae4:	460a      	mov	r2, r1
 8005ae6:	bf28      	it	cs
 8005ae8:	4622      	movcs	r2, r4
 8005aea:	2a02      	cmp	r2, #2
 8005aec:	bf2c      	ite	cs
 8005aee:	189b      	addcs	r3, r3, r2
 8005af0:	3302      	addcc	r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8005af2:	4a05      	ldr	r2, [pc, #20]	; (8005b08 <VectorB4+0xb8>)
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	6084      	str	r4, [r0, #8]
 8005af8:	6353      	str	r3, [r2, #52]	; 0x34
 8005afa:	2300      	movs	r3, #0
 8005afc:	f383 8811 	msr	BASEPRI, r3
}
 8005b00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8005b04:	f7fb bf4c 	b.w	80019a0 <_port_irq_epilogue>
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	20000e30 	.word	0x20000e30

08005b10 <VectorC0>:
  uint16_t sr = I2CD1.i2c->SR1;
 8005b10:	4a35      	ldr	r2, [pc, #212]	; (8005be8 <VectorC0+0xd8>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8005b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 8005b14:	e9d2 640c 	ldrd	r6, r4, [r2, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 8005b18:	6961      	ldr	r1, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8005b1a:	230e      	movs	r3, #14
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8005b1c:	f401 405f 	and.w	r0, r1, #57088	; 0xdf00
 8005b20:	43c0      	mvns	r0, r0
  dmaStreamDisable(i2cp->dmatx);
 8005b22:	6877      	ldr	r7, [r6, #4]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8005b24:	6160      	str	r0, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 8005b26:	683d      	ldr	r5, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8005b28:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8005b2a:	f025 050f 	bic.w	r5, r5, #15
 8005b2e:	603d      	str	r5, [r7, #0]
 8005b30:	7b75      	ldrb	r5, [r6, #13]
 8005b32:	6837      	ldr	r7, [r6, #0]
 8005b34:	fa03 f505 	lsl.w	r5, r3, r5
  dmaStreamDisable(i2cp->dmarx);
 8005b38:	6846      	ldr	r6, [r0, #4]
  dmaStreamDisable(i2cp->dmatx);
 8005b3a:	607d      	str	r5, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8005b3c:	6835      	ldr	r5, [r6, #0]
 8005b3e:	6807      	ldr	r7, [r0, #0]
 8005b40:	f025 050f 	bic.w	r5, r5, #15
 8005b44:	6035      	str	r5, [r6, #0]
 8005b46:	7b45      	ldrb	r5, [r0, #13]
  uint16_t sr = I2CD1.i2c->SR1;
 8005b48:	b288      	uxth	r0, r1
  dmaStreamDisable(i2cp->dmarx);
 8005b4a:	40ab      	lsls	r3, r5
 8005b4c:	607b      	str	r3, [r7, #4]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8005b4e:	f411 7380 	ands.w	r3, r1, #256	; 0x100
 8005b52:	d139      	bne.n	8005bc8 <VectorC0+0xb8>
  i2cp->errors = I2C_NO_ERROR;
 8005b54:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8005b56:	0585      	lsls	r5, r0, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8005b58:	bf44      	itt	mi
 8005b5a:	f043 0302 	orrmi.w	r3, r3, #2
 8005b5e:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8005b60:	0547      	lsls	r7, r0, #21
 8005b62:	d50a      	bpl.n	8005b7a <VectorC0+0x6a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8005b64:	6865      	ldr	r5, [r4, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 8005b66:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8005b6a:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8005b6e:	6065      	str	r5, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8005b70:	6825      	ldr	r5, [r4, #0]
 8005b72:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005b76:	6025      	str	r5, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8005b78:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8005b7a:	0506      	lsls	r6, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8005b7c:	bf44      	itt	mi
 8005b7e:	f043 0308 	orrmi.w	r3, r3, #8
 8005b82:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8005b84:	0445      	lsls	r5, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 8005b86:	bf44      	itt	mi
 8005b88:	f043 0320 	orrmi.w	r3, r3, #32
 8005b8c:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8005b8e:	04c4      	lsls	r4, r0, #19
 8005b90:	d522      	bpl.n	8005bd8 <VectorC0+0xc8>
    i2cp->errors |= I2C_PEC_ERROR;
 8005b92:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8005b96:	0408      	lsls	r0, r1, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8005b98:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8005b9a:	d502      	bpl.n	8005ba2 <VectorC0+0x92>
    i2cp->errors |= I2C_SMB_ALERT;
 8005b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba0:	6093      	str	r3, [r2, #8]
 8005ba2:	2320      	movs	r3, #32
 8005ba4:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8005ba8:	69d0      	ldr	r0, [r2, #28]
 8005baa:	b130      	cbz	r0, 8005bba <VectorC0+0xaa>
    tp->u.rdymsg = msg;
 8005bac:	f06f 0101 	mvn.w	r1, #1
    *trp = NULL;
 8005bb0:	2300      	movs	r3, #0
    tp->u.rdymsg = msg;
 8005bb2:	6241      	str	r1, [r0, #36]	; 0x24
    *trp = NULL;
 8005bb4:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8005bb6:	f7fb ffdb 	bl	8001b70 <chSchReadyI>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f383 8811 	msr	BASEPRI, r3
}
 8005bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8005bc4:	f7fb beec 	b.w	80019a0 <_port_irq_epilogue>
    i2cp->errors |= I2C_BUS_ERROR;
 8005bc8:	2601      	movs	r6, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8005bca:	6965      	ldr	r5, [r4, #20]
 8005bcc:	4633      	mov	r3, r6
 8005bce:	f425 7580 	bic.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 8005bd2:	6096      	str	r6, [r2, #8]
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8005bd4:	6165      	str	r5, [r4, #20]
 8005bd6:	e7be      	b.n	8005b56 <VectorC0+0x46>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8005bd8:	0409      	lsls	r1, r1, #16
 8005bda:	d4df      	bmi.n	8005b9c <VectorC0+0x8c>
  if (i2cp->errors != I2C_NO_ERROR)
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e0      	bne.n	8005ba2 <VectorC0+0x92>
}
 8005be0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8005be4:	f7fb bedc 	b.w	80019a0 <_port_irq_epilogue>
 8005be8:	20000d30 	.word	0x20000d30
 8005bec:	00000000 	.word	0x00000000

08005bf0 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 8005bf0:	4a45      	ldr	r2, [pc, #276]	; (8005d08 <VectorBC+0x118>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8005bf2:	b538      	push	{r3, r4, r5, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8005bf4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8005bf6:	4945      	ldr	r1, [pc, #276]	; (8005d0c <VectorBC+0x11c>)
  uint32_t regSR2 = dp->SR2;
 8005bf8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8005bfa:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8005bfc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8005c00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c04:	428b      	cmp	r3, r1
 8005c06:	d062      	beq.n	8005cce <VectorBC+0xde>
 8005c08:	d833      	bhi.n	8005c72 <VectorBC+0x82>
 8005c0a:	3907      	subs	r1, #7
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	d024      	beq.n	8005c5a <VectorBC+0x6a>
 8005c10:	3101      	adds	r1, #1
 8005c12:	428b      	cmp	r3, r1
 8005c14:	d11e      	bne.n	8005c54 <VectorBC+0x64>
    dmaStreamEnable(i2cp->dmarx);
 8005c16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005c18:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8005c1a:	685b      	ldr	r3, [r3, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005c1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c20:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	f042 0201 	orr.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c30:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d945      	bls.n	8005cc4 <VectorBC+0xd4>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8005c38:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8005c3c:	bf18      	it	ne
 8005c3e:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8005c40:	05eb      	lsls	r3, r5, #23
 8005c42:	d503      	bpl.n	8005c4c <VectorBC+0x5c>
    dp->SR1 &= ~I2C_SR1_BERR;
 8005c44:	6963      	ldr	r3, [r4, #20]
 8005c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4a:	6163      	str	r3, [r4, #20]
}
 8005c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8005c50:	f7fb bea6 	b.w	80019a0 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8005c54:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005c58:	d1ee      	bne.n	8005c38 <VectorBC+0x48>
    if ((i2cp->addr >> 8) > 0) {
 8005c5a:	8c13      	ldrh	r3, [r2, #32]
 8005c5c:	0a1a      	lsrs	r2, r3, #8
 8005c5e:	d039      	beq.n	8005cd4 <VectorBC+0xe4>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8005c60:	f002 0206 	and.w	r2, r2, #6
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	e7e2      	b.n	8005c38 <VectorBC+0x48>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8005c72:	4927      	ldr	r1, [pc, #156]	; (8005d10 <VectorBC+0x120>)
 8005c74:	428b      	cmp	r3, r1
 8005c76:	d035      	beq.n	8005ce4 <VectorBC+0xf4>
 8005c78:	3102      	adds	r1, #2
 8005c7a:	428b      	cmp	r3, r1
 8005c7c:	d1dc      	bne.n	8005c38 <VectorBC+0x48>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8005c7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 8005c80:	6921      	ldr	r1, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	b143      	cbz	r3, 8005c9a <VectorBC+0xaa>
      i2cp->addr |= 0x01;
 8005c88:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8005c8a:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 8005c8c:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8005c90:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8005c94:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	e7d8      	b.n	8005c4c <VectorBC+0x5c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005c9a:	6861      	ldr	r1, [r4, #4]
 8005c9c:	2020      	movs	r0, #32
 8005c9e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8005ca2:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8005ca4:	6821      	ldr	r1, [r4, #0]
 8005ca6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005caa:	6021      	str	r1, [r4, #0]
 8005cac:	f380 8811 	msr	BASEPRI, r0
  if (*trp != NULL) {
 8005cb0:	69d0      	ldr	r0, [r2, #28]
 8005cb2:	b118      	cbz	r0, 8005cbc <VectorBC+0xcc>
    tp->u.rdymsg = msg;
 8005cb4:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8005cb6:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8005cb8:	f7fb ff5a 	bl	8001b70 <chSchReadyI>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	e7b9      	b.n	8005c38 <VectorBC+0x48>
      dp->CR1 &= ~I2C_CR1_ACK;
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	e7b4      	b.n	8005c38 <VectorBC+0x48>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8005cce:	8c13      	ldrh	r3, [r2, #32]
 8005cd0:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8005cd4:	6123      	str	r3, [r4, #16]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8005cd6:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8005cda:	bf18      	it	ne
 8005cdc:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8005cde:	05eb      	lsls	r3, r5, #23
 8005ce0:	d5b4      	bpl.n	8005c4c <VectorBC+0x5c>
 8005ce2:	e7af      	b.n	8005c44 <VectorBC+0x54>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005ce4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8005ce6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8005cec:	6852      	ldr	r2, [r2, #4]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005cee:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8005cf0:	6813      	ldr	r3, [r2, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8005cf2:	f015 0f0a 	tst.w	r5, #10
    dmaStreamEnable(i2cp->dmatx);
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6013      	str	r3, [r2, #0]
    (void)dp->SR2;
 8005cfc:	bf18      	it	ne
 8005cfe:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8005d00:	05eb      	lsls	r3, r5, #23
 8005d02:	d5a3      	bpl.n	8005c4c <VectorBC+0x5c>
 8005d04:	e79e      	b.n	8005c44 <VectorBC+0x54>
 8005d06:	bf00      	nop
 8005d08:	20000d30 	.word	0x20000d30
 8005d0c:	00030008 	.word	0x00030008
 8005d10:	00070082 	.word	0x00070082
	...

08005d20 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8005d20:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8005d22:	4803      	ldr	r0, [pc, #12]	; (8005d30 <Vector84+0x10>)
 8005d24:	f7fc f84c 	bl	8001dc0 <dmaServeInterrupt>
}
 8005d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005d2c:	f7fb be38 	b.w	80019a0 <_port_irq_epilogue>
 8005d30:	080072bc 	.word	0x080072bc
	...

08005d40 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8005d40:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8005d42:	4803      	ldr	r0, [pc, #12]	; (8005d50 <Vector80+0x10>)
 8005d44:	f7fc f83c 	bl	8001dc0 <dmaServeInterrupt>
}
 8005d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005d4c:	f7fb be28 	b.w	80019a0 <_port_irq_epilogue>
 8005d50:	080072ac 	.word	0x080072ac
	...

08005d60 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8005d60:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8005d62:	4803      	ldr	r0, [pc, #12]	; (8005d70 <Vector7C+0x10>)
 8005d64:	f7fc f82c 	bl	8001dc0 <dmaServeInterrupt>
}
 8005d68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005d6c:	f7fb be18 	b.w	80019a0 <_port_irq_epilogue>
 8005d70:	0800729c 	.word	0x0800729c
	...

08005d80 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8005d80:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8005d82:	4803      	ldr	r0, [pc, #12]	; (8005d90 <Vector78+0x10>)
 8005d84:	f7fc f81c 	bl	8001dc0 <dmaServeInterrupt>
}
 8005d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005d8c:	f7fb be08 	b.w	80019a0 <_port_irq_epilogue>
 8005d90:	0800728c 	.word	0x0800728c
	...

08005da0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8005da0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8005da2:	4803      	ldr	r0, [pc, #12]	; (8005db0 <Vector74+0x10>)
 8005da4:	f7fc f80c 	bl	8001dc0 <dmaServeInterrupt>
}
 8005da8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005dac:	f7fb bdf8 	b.w	80019a0 <_port_irq_epilogue>
 8005db0:	0800727c 	.word	0x0800727c
	...

08005dc0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8005dc0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8005dc2:	4803      	ldr	r0, [pc, #12]	; (8005dd0 <Vector70+0x10>)
 8005dc4:	f7fb fffc 	bl	8001dc0 <dmaServeInterrupt>
}
 8005dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005dcc:	f7fb bde8 	b.w	80019a0 <_port_irq_epilogue>
 8005dd0:	0800726c 	.word	0x0800726c
	...

08005de0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8005de0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8005de2:	4803      	ldr	r0, [pc, #12]	; (8005df0 <Vector6C+0x10>)
 8005de4:	f7fb ffec 	bl	8001dc0 <dmaServeInterrupt>
}
 8005de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8005dec:	f7fb bdd8 	b.w	80019a0 <_port_irq_epilogue>
 8005df0:	0800725c 	.word	0x0800725c
	...

08005e00 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8005e00:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8005e02:	2600      	movs	r6, #0
 8005e04:	4f13      	ldr	r7, [pc, #76]	; (8005e54 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 8005e06:	4d14      	ldr	r5, [pc, #80]	; (8005e58 <__init_ram_areas+0x58>)
 8005e08:	4814      	ldr	r0, [pc, #80]	; (8005e5c <__init_ram_areas+0x5c>)
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <__init_ram_areas+0x60>)
 8005e0c:	4915      	ldr	r1, [pc, #84]	; (8005e64 <__init_ram_areas+0x64>)
 8005e0e:	f107 0c70 	add.w	ip, r7, #112	; 0x70
    while (p < rap->clear_area) {
 8005e12:	4298      	cmp	r0, r3
 8005e14:	d911      	bls.n	8005e3a <__init_ram_areas+0x3a>
 8005e16:	461a      	mov	r2, r3
 8005e18:	3904      	subs	r1, #4
      *p = *tp;
 8005e1a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8005e1e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8005e22:	4290      	cmp	r0, r2
 8005e24:	d8f9      	bhi.n	8005e1a <__init_ram_areas+0x1a>
 8005e26:	1e42      	subs	r2, r0, #1
 8005e28:	1ad2      	subs	r2, r2, r3
 8005e2a:	f022 0203 	bic.w	r2, r2, #3
 8005e2e:	3204      	adds	r2, #4
 8005e30:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8005e32:	429d      	cmp	r5, r3
 8005e34:	d903      	bls.n	8005e3e <__init_ram_areas+0x3e>
      *p = 0;
 8005e36:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8005e3a:	429d      	cmp	r5, r3
 8005e3c:	d8fb      	bhi.n	8005e36 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8005e3e:	4567      	cmp	r7, ip
 8005e40:	d005      	beq.n	8005e4e <__init_ram_areas+0x4e>
 8005e42:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8005e46:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	e7e1      	b.n	8005e12 <__init_ram_areas+0x12>
#endif
}
 8005e4e:	bcf0      	pop	{r4, r5, r6, r7}
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	080073e0 	.word	0x080073e0
 8005e58:	200013c8 	.word	0x200013c8
 8005e5c:	200013c8 	.word	0x200013c8
 8005e60:	200013c8 	.word	0x200013c8
 8005e64:	08007b64 	.word	0x08007b64
	...

08005e70 <__default_exit>:
  while (true) {
 8005e70:	e7fe      	b.n	8005e70 <__default_exit>
 8005e72:	bf00      	nop
	...

08005e80 <__late_init>:
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
	...

08005e90 <__core_init>:
}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <atoi>:
 8005e94:	220a      	movs	r2, #10
 8005e96:	2100      	movs	r1, #0
 8005e98:	f000 b888 	b.w	8005fac <strtol>

08005e9c <_strtol_l.isra.0>:
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	460d      	mov	r5, r1
 8005ea2:	4681      	mov	r9, r0
 8005ea4:	4840      	ldr	r0, [pc, #256]	; (8005fa8 <_strtol_l.isra.0+0x10c>)
 8005ea6:	462f      	mov	r7, r5
 8005ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eac:	5d06      	ldrb	r6, [r0, r4]
 8005eae:	f016 0608 	ands.w	r6, r6, #8
 8005eb2:	d1f8      	bne.n	8005ea6 <_strtol_l.isra.0+0xa>
 8005eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8005eb6:	d053      	beq.n	8005f60 <_strtol_l.isra.0+0xc4>
 8005eb8:	2c2b      	cmp	r4, #43	; 0x2b
 8005eba:	d027      	beq.n	8005f0c <_strtol_l.isra.0+0x70>
 8005ebc:	46a3      	mov	fp, r4
 8005ebe:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8005ec2:	b353      	cbz	r3, 8005f1a <_strtol_l.isra.0+0x7e>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d052      	beq.n	8005f6e <_strtol_l.isra.0+0xd2>
 8005ec8:	469e      	mov	lr, r3
 8005eca:	2700      	movs	r7, #0
 8005ecc:	fbb8 fcfe 	udiv	ip, r8, lr
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	fb0e 8a1c 	mls	sl, lr, ip, r8
 8005ed6:	e005      	b.n	8005ee4 <_strtol_l.isra.0+0x48>
 8005ed8:	d036      	beq.n	8005f48 <_strtol_l.isra.0+0xac>
 8005eda:	2701      	movs	r7, #1
 8005edc:	fb0e 4000 	mla	r0, lr, r0, r4
 8005ee0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8005ee4:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8005ee8:	2c09      	cmp	r4, #9
 8005eea:	d905      	bls.n	8005ef8 <_strtol_l.isra.0+0x5c>
 8005eec:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 8005ef0:	2c19      	cmp	r4, #25
 8005ef2:	d818      	bhi.n	8005f26 <_strtol_l.isra.0+0x8a>
 8005ef4:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	dd1c      	ble.n	8005f36 <_strtol_l.isra.0+0x9a>
 8005efc:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8005f00:	d0ee      	beq.n	8005ee0 <_strtol_l.isra.0+0x44>
 8005f02:	4584      	cmp	ip, r0
 8005f04:	d2e8      	bcs.n	8005ed8 <_strtol_l.isra.0+0x3c>
 8005f06:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f0a:	e7e9      	b.n	8005ee0 <_strtol_l.isra.0+0x44>
 8005f0c:	f895 b000 	ldrb.w	fp, [r5]
 8005f10:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8005f14:	1cbd      	adds	r5, r7, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1d4      	bne.n	8005ec4 <_strtol_l.isra.0+0x28>
 8005f1a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8005f1e:	d035      	beq.n	8005f8c <_strtol_l.isra.0+0xf0>
 8005f20:	230a      	movs	r3, #10
 8005f22:	469e      	mov	lr, r3
 8005f24:	e7d1      	b.n	8005eca <_strtol_l.isra.0+0x2e>
 8005f26:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 8005f2a:	2c19      	cmp	r4, #25
 8005f2c:	d803      	bhi.n	8005f36 <_strtol_l.isra.0+0x9a>
 8005f2e:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	dce2      	bgt.n	8005efc <_strtol_l.isra.0+0x60>
 8005f36:	1c7b      	adds	r3, r7, #1
 8005f38:	d00b      	beq.n	8005f52 <_strtol_l.isra.0+0xb6>
 8005f3a:	b106      	cbz	r6, 8005f3e <_strtol_l.isra.0+0xa2>
 8005f3c:	4240      	negs	r0, r0
 8005f3e:	b10a      	cbz	r2, 8005f44 <_strtol_l.isra.0+0xa8>
 8005f40:	bb7f      	cbnz	r7, 8005fa2 <_strtol_l.isra.0+0x106>
 8005f42:	6011      	str	r1, [r2, #0]
 8005f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	45a2      	cmp	sl, r4
 8005f4a:	dac6      	bge.n	8005eda <_strtol_l.isra.0+0x3e>
 8005f4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f50:	e7c6      	b.n	8005ee0 <_strtol_l.isra.0+0x44>
 8005f52:	2322      	movs	r3, #34	; 0x22
 8005f54:	f8c9 3000 	str.w	r3, [r9]
 8005f58:	b302      	cbz	r2, 8005f9c <_strtol_l.isra.0+0x100>
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	1e69      	subs	r1, r5, #1
 8005f5e:	e7f0      	b.n	8005f42 <_strtol_l.isra.0+0xa6>
 8005f60:	f895 b000 	ldrb.w	fp, [r5]
 8005f64:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005f68:	2601      	movs	r6, #1
 8005f6a:	1cbd      	adds	r5, r7, #2
 8005f6c:	e7a9      	b.n	8005ec2 <_strtol_l.isra.0+0x26>
 8005f6e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8005f72:	d1a9      	bne.n	8005ec8 <_strtol_l.isra.0+0x2c>
 8005f74:	7828      	ldrb	r0, [r5, #0]
 8005f76:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005f7a:	2858      	cmp	r0, #88	; 0x58
 8005f7c:	d1a4      	bne.n	8005ec8 <_strtol_l.isra.0+0x2c>
 8005f7e:	f04f 0e10 	mov.w	lr, #16
 8005f82:	f895 b001 	ldrb.w	fp, [r5, #1]
 8005f86:	4673      	mov	r3, lr
 8005f88:	3502      	adds	r5, #2
 8005f8a:	e79e      	b.n	8005eca <_strtol_l.isra.0+0x2e>
 8005f8c:	782b      	ldrb	r3, [r5, #0]
 8005f8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f92:	2b58      	cmp	r3, #88	; 0x58
 8005f94:	d0f3      	beq.n	8005f7e <_strtol_l.isra.0+0xe2>
 8005f96:	2308      	movs	r3, #8
 8005f98:	469e      	mov	lr, r3
 8005f9a:	e796      	b.n	8005eca <_strtol_l.isra.0+0x2e>
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	e7d9      	b.n	8005f5a <_strtol_l.isra.0+0xbe>
 8005fa6:	bf00      	nop
 8005fa8:	08007529 	.word	0x08007529

08005fac <strtol>:
 8005fac:	b430      	push	{r4, r5}
 8005fae:	460d      	mov	r5, r1
 8005fb0:	4c03      	ldr	r4, [pc, #12]	; (8005fc0 <strtol+0x14>)
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	6820      	ldr	r0, [r4, #0]
 8005fba:	bc30      	pop	{r4, r5}
 8005fbc:	f7ff bf6e 	b.w	8005e9c <_strtol_l.isra.0>
 8005fc0:	20000904 	.word	0x20000904

08005fc4 <memset>:
 8005fc4:	b4f0      	push	{r4, r5, r6, r7}
 8005fc6:	0786      	lsls	r6, r0, #30
 8005fc8:	d046      	beq.n	8006058 <memset+0x94>
 8005fca:	1e54      	subs	r4, r2, #1
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	d03c      	beq.n	800604a <memset+0x86>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	b2ca      	uxtb	r2, r1
 8005fd4:	e001      	b.n	8005fda <memset+0x16>
 8005fd6:	3c01      	subs	r4, #1
 8005fd8:	d337      	bcc.n	800604a <memset+0x86>
 8005fda:	f803 2b01 	strb.w	r2, [r3], #1
 8005fde:	079d      	lsls	r5, r3, #30
 8005fe0:	d1f9      	bne.n	8005fd6 <memset+0x12>
 8005fe2:	2c03      	cmp	r4, #3
 8005fe4:	d92a      	bls.n	800603c <memset+0x78>
 8005fe6:	b2cd      	uxtb	r5, r1
 8005fe8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005fec:	2c0f      	cmp	r4, #15
 8005fee:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005ff2:	d934      	bls.n	800605e <memset+0x9a>
 8005ff4:	f1a4 0210 	sub.w	r2, r4, #16
 8005ff8:	f022 0c0f 	bic.w	ip, r2, #15
 8005ffc:	f103 0720 	add.w	r7, r3, #32
 8006000:	0916      	lsrs	r6, r2, #4
 8006002:	4467      	add	r7, ip
 8006004:	f103 0210 	add.w	r2, r3, #16
 8006008:	e942 5504 	strd	r5, r5, [r2, #-16]
 800600c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8006010:	3210      	adds	r2, #16
 8006012:	42ba      	cmp	r2, r7
 8006014:	d1f8      	bne.n	8006008 <memset+0x44>
 8006016:	1c72      	adds	r2, r6, #1
 8006018:	f014 0f0c 	tst.w	r4, #12
 800601c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006020:	f004 060f 	and.w	r6, r4, #15
 8006024:	d013      	beq.n	800604e <memset+0x8a>
 8006026:	1f33      	subs	r3, r6, #4
 8006028:	f023 0303 	bic.w	r3, r3, #3
 800602c:	3304      	adds	r3, #4
 800602e:	4413      	add	r3, r2
 8006030:	f842 5b04 	str.w	r5, [r2], #4
 8006034:	4293      	cmp	r3, r2
 8006036:	d1fb      	bne.n	8006030 <memset+0x6c>
 8006038:	f006 0403 	and.w	r4, r6, #3
 800603c:	b12c      	cbz	r4, 800604a <memset+0x86>
 800603e:	b2ca      	uxtb	r2, r1
 8006040:	441c      	add	r4, r3
 8006042:	f803 2b01 	strb.w	r2, [r3], #1
 8006046:	429c      	cmp	r4, r3
 8006048:	d1fb      	bne.n	8006042 <memset+0x7e>
 800604a:	bcf0      	pop	{r4, r5, r6, r7}
 800604c:	4770      	bx	lr
 800604e:	4634      	mov	r4, r6
 8006050:	4613      	mov	r3, r2
 8006052:	2c00      	cmp	r4, #0
 8006054:	d1f3      	bne.n	800603e <memset+0x7a>
 8006056:	e7f8      	b.n	800604a <memset+0x86>
 8006058:	4614      	mov	r4, r2
 800605a:	4603      	mov	r3, r0
 800605c:	e7c1      	b.n	8005fe2 <memset+0x1e>
 800605e:	461a      	mov	r2, r3
 8006060:	4626      	mov	r6, r4
 8006062:	e7e0      	b.n	8006026 <memset+0x62>

08006064 <strchr>:
 8006064:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8006068:	4603      	mov	r3, r0
 800606a:	d044      	beq.n	80060f6 <strchr+0x92>
 800606c:	0782      	lsls	r2, r0, #30
 800606e:	d132      	bne.n	80060d6 <strchr+0x72>
 8006070:	b470      	push	{r4, r5, r6}
 8006072:	6804      	ldr	r4, [r0, #0]
 8006074:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8006078:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800607c:	ea86 0504 	eor.w	r5, r6, r4
 8006080:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8006084:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8006088:	ea23 0305 	bic.w	r3, r3, r5
 800608c:	ea22 0204 	bic.w	r2, r2, r4
 8006090:	4313      	orrs	r3, r2
 8006092:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006096:	d10f      	bne.n	80060b8 <strchr+0x54>
 8006098:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800609c:	ea84 0506 	eor.w	r5, r4, r6
 80060a0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 80060a4:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 80060a8:	ea22 0205 	bic.w	r2, r2, r5
 80060ac:	ea23 0304 	bic.w	r3, r3, r4
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80060b6:	d0ef      	beq.n	8006098 <strchr+0x34>
 80060b8:	7803      	ldrb	r3, [r0, #0]
 80060ba:	b923      	cbnz	r3, 80060c6 <strchr+0x62>
 80060bc:	e036      	b.n	800612c <strchr+0xc8>
 80060be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d032      	beq.n	800612c <strchr+0xc8>
 80060c6:	4299      	cmp	r1, r3
 80060c8:	d1f9      	bne.n	80060be <strchr+0x5a>
 80060ca:	e030      	b.n	800612e <strchr+0xca>
 80060cc:	428a      	cmp	r2, r1
 80060ce:	d011      	beq.n	80060f4 <strchr+0x90>
 80060d0:	079a      	lsls	r2, r3, #30
 80060d2:	4618      	mov	r0, r3
 80060d4:	d0cc      	beq.n	8006070 <strchr+0xc>
 80060d6:	4618      	mov	r0, r3
 80060d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060dc:	2a00      	cmp	r2, #0
 80060de:	d1f5      	bne.n	80060cc <strchr+0x68>
 80060e0:	4610      	mov	r0, r2
 80060e2:	4770      	bx	lr
 80060e4:	0799      	lsls	r1, r3, #30
 80060e6:	4618      	mov	r0, r3
 80060e8:	d007      	beq.n	80060fa <strchr+0x96>
 80060ea:	781a      	ldrb	r2, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	3301      	adds	r3, #1
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d1f7      	bne.n	80060e4 <strchr+0x80>
 80060f4:	4770      	bx	lr
 80060f6:	0782      	lsls	r2, r0, #30
 80060f8:	d1f7      	bne.n	80060ea <strchr+0x86>
 80060fa:	6802      	ldr	r2, [r0, #0]
 80060fc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8006100:	ea23 0302 	bic.w	r3, r3, r2
 8006104:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006108:	d108      	bne.n	800611c <strchr+0xb8>
 800610a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800610e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8006112:	ea23 0302 	bic.w	r3, r3, r2
 8006116:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800611a:	d0f6      	beq.n	800610a <strchr+0xa6>
 800611c:	7803      	ldrb	r3, [r0, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0e8      	beq.n	80060f4 <strchr+0x90>
 8006122:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1fb      	bne.n	8006122 <strchr+0xbe>
 800612a:	4770      	bx	lr
 800612c:	4618      	mov	r0, r3
 800612e:	bc70      	pop	{r4, r5, r6}
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop

08006134 <strpbrk>:
 8006134:	b430      	push	{r4, r5}
 8006136:	7804      	ldrb	r4, [r0, #0]
 8006138:	b1a4      	cbz	r4, 8006164 <strpbrk+0x30>
 800613a:	780d      	ldrb	r5, [r1, #0]
 800613c:	460a      	mov	r2, r1
 800613e:	462b      	mov	r3, r5
 8006140:	b91d      	cbnz	r5, 800614a <strpbrk+0x16>
 8006142:	e00a      	b.n	800615a <strpbrk+0x26>
 8006144:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006148:	b13b      	cbz	r3, 800615a <strpbrk+0x26>
 800614a:	429c      	cmp	r4, r3
 800614c:	d1fa      	bne.n	8006144 <strpbrk+0x10>
 800614e:	7813      	ldrb	r3, [r2, #0]
 8006150:	bc30      	pop	{r4, r5}
 8006152:	2b00      	cmp	r3, #0
 8006154:	bf08      	it	eq
 8006156:	2000      	moveq	r0, #0
 8006158:	4770      	bx	lr
 800615a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800615e:	2c00      	cmp	r4, #0
 8006160:	d1ec      	bne.n	800613c <strpbrk+0x8>
 8006162:	e7f4      	b.n	800614e <strpbrk+0x1a>
 8006164:	4620      	mov	r0, r4
 8006166:	bc30      	pop	{r4, r5}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop

0800616c <strspn>:
 800616c:	b470      	push	{r4, r5, r6}
 800616e:	7804      	ldrb	r4, [r0, #0]
 8006170:	b18c      	cbz	r4, 8006196 <strspn+0x2a>
 8006172:	4605      	mov	r5, r0
 8006174:	780e      	ldrb	r6, [r1, #0]
 8006176:	b15e      	cbz	r6, 8006190 <strspn+0x24>
 8006178:	460a      	mov	r2, r1
 800617a:	4633      	mov	r3, r6
 800617c:	e002      	b.n	8006184 <strspn+0x18>
 800617e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006182:	b12b      	cbz	r3, 8006190 <strspn+0x24>
 8006184:	42a3      	cmp	r3, r4
 8006186:	d1fa      	bne.n	800617e <strspn+0x12>
 8006188:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800618c:	2c00      	cmp	r4, #0
 800618e:	d1f2      	bne.n	8006176 <strspn+0xa>
 8006190:	1a28      	subs	r0, r5, r0
 8006192:	bc70      	pop	{r4, r5, r6}
 8006194:	4770      	bx	lr
 8006196:	4620      	mov	r0, r4
 8006198:	e7fb      	b.n	8006192 <strspn+0x26>
 800619a:	bf00      	nop
